
nano_display_jxl19264.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062d0  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011e4  080063dc  080063dc  000163dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c0  080075c0  000202a0  2**0
                  CONTENTS
  4 .ARM          00000000  080075c0  080075c0  000202a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075c0  080075c0  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  080075c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  200002a0  08007868  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b28  08007868  00020b28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003619a  00000000  00000000  000202c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004314  00000000  00000000  00056463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e50  00000000  00000000  0005a778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c38  00000000  00000000  0005c5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011f2f  00000000  00000000  0005e200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000110ef  00000000  00000000  0007012f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  0008121e  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00008434  00000000  00000000  00081270  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002a0 	.word	0x200002a0
 8000128:	00000000 	.word	0x00000000
 800012c:	080063c4 	.word	0x080063c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002a4 	.word	0x200002a4
 8000148:	080063c4 	.word	0x080063c4

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
//uint8_t ans[100];
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f003 fca6 	bl	8003adc <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f003 fca1 	bl	8003adc <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f003 ffa6 	bl	80040f4 <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f003 ff9f 	bl	80040f4 <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f004 fc4a 	bl	8004ac4 <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f003 ff5b 	bl	80040f4 <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000358 	.word	0x20000358
 8000254:	40010800 	.word	0x40010800

08000258 <HAL_TIM_PeriodElapsedCallback>:
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
	}
}
*/

void HAL_TIM_PeriodElapsedCallback	(	TIM_HandleTypeDef * 	htim	)	{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000266:	f003 ff5d 	bl	8004124 <HAL_GPIO_TogglePin>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800026a:	200a      	movs	r0, #10
 800026c:	f003 fd8f 	bl	8003d8e <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Stop_IT(&htim2);
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000272:	f004 fea5 	bl	8004fc0 <HAL_TIM_Base_Stop_IT>
}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40011000 	.word	0x40011000
 8000284:	200003b0 	.word	0x200003b0

08000288 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4) {
 8000292:	88fb      	ldrh	r3, [r7, #6]
 8000294:	2b10      	cmp	r3, #16
 8000296:	d10d      	bne.n	80002b4 <HAL_GPIO_EXTI_Callback+0x2c>
//		reset
		HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000298:	200a      	movs	r0, #10
 800029a:	f003 fd86 	bl	8003daa <HAL_NVIC_DisableIRQ>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800029e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a2:	4806      	ldr	r0, [pc, #24]	; (80002bc <HAL_GPIO_EXTI_Callback+0x34>)
 80002a4:	f003 ff3e 	bl	8004124 <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Start_IT(&htim2);
 80002a8:	4805      	ldr	r0, [pc, #20]	; (80002c0 <HAL_GPIO_EXTI_Callback+0x38>)
 80002aa:	f004 fe3d 	bl	8004f28 <HAL_TIM_Base_Start_IT>
		monitor_send_string((uint8_t*) "E\r\n");
 80002ae:	4805      	ldr	r0, [pc, #20]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80002b0:	f000 fdb8 	bl	8000e24 <monitor_send_string>
	 cont = 0;
	 monitor_send_string((uint8_t*) "A");
	 HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
	 interrupt_enable = true;
	 }*/
}
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40011000 	.word	0x40011000
 80002c0:	200003b0 	.word	0x200003b0
 80002c4:	080063dc 	.word	0x080063dc

080002c8 <start>:
void start(void) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
//			u8x8_stm32_gpio_and_delay);

	u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 80002cc:	4b16      	ldr	r3, [pc, #88]	; (8000328 <start+0x60>)
 80002ce:	4a17      	ldr	r2, [pc, #92]	; (800032c <start+0x64>)
 80002d0:	4917      	ldr	r1, [pc, #92]	; (8000330 <start+0x68>)
 80002d2:	4818      	ldr	r0, [pc, #96]	; (8000334 <start+0x6c>)
 80002d4:	f001 fcc4 	bl	8001c60 <u8g2_Setup_uc1604_jlx19264_f>
			u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


	u8g2_InitDisplay(&u8g2);
 80002d8:	4816      	ldr	r0, [pc, #88]	; (8000334 <start+0x6c>)
 80002da:	f003 fac8 	bl	800386e <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80002de:	2100      	movs	r1, #0
 80002e0:	4814      	ldr	r0, [pc, #80]	; (8000334 <start+0x6c>)
 80002e2:	f003 fad3 	bl	800388c <u8x8_SetPowerSave>
	set_contrast(OPTIMAL_CONTRAST + '0');
 80002e6:	2034      	movs	r0, #52	; 0x34
 80002e8:	f000 fa20 	bl	800072c <set_contrast>

	u8g2_SetDrawColor(&u8g2, 2);
 80002ec:	2102      	movs	r1, #2
 80002ee:	4811      	ldr	r0, [pc, #68]	; (8000334 <start+0x6c>)
 80002f0:	f002 fcd0 	bl	8002c94 <u8g2_SetDrawColor>
	u8g2_SetBitmapMode(&u8g2, 1);
 80002f4:	2101      	movs	r1, #1
 80002f6:	480f      	ldr	r0, [pc, #60]	; (8000334 <start+0x6c>)
 80002f8:	f001 f918 	bl	800152c <u8g2_SetBitmapMode>
	u8g2_SetFontMode(&u8g2, 1);
 80002fc:	2101      	movs	r1, #1
 80002fe:	480d      	ldr	r0, [pc, #52]	; (8000334 <start+0x6c>)
 8000300:	f002 f948 	bl	8002594 <u8g2_SetFontMode>
	u8g2_SetFontPosTop(&u8g2);
 8000304:	480b      	ldr	r0, [pc, #44]	; (8000334 <start+0x6c>)
 8000306:	f002 fab3 	bl	8002870 <u8g2_SetFontPosTop>
	r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
	u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
	n	Only numbers and extra glyphs for writing date and time strings are included in the font.
	...	Other custom character list.*/

	u8g2_SetFont(&u8g2, u8g2_font_10x20_mf);
 800030a:	490b      	ldr	r1, [pc, #44]	; (8000338 <start+0x70>)
 800030c:	4809      	ldr	r0, [pc, #36]	; (8000334 <start+0x6c>)
 800030e:	f002 fabd 	bl	800288c <u8g2_SetFont>



	disp_splash();
 8000312:	f000 fa21 	bl	8000758 <disp_splash>
	text_insertion_point((0 + '0'), (0 + '0'));
 8000316:	2130      	movs	r1, #48	; 0x30
 8000318:	2030      	movs	r0, #48	; 0x30
 800031a:	f000 f8a9 	bl	8000470 <text_insertion_point>
//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
	serial_begin();
 800031e:	f000 ff43 	bl	80011a8 <serial_begin>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	0800015d 	.word	0x0800015d
 800032c:	080001cd 	.word	0x080001cd
 8000330:	0800751c 	.word	0x0800751c
 8000334:	200002bc 	.word	0x200002bc
 8000338:	080064ac 	.word	0x080064ac

0800033c <createQueue>:
#include <circular_queue.h>

// function to create a queue
// of given capacity.
// It initializes size of queue as 0
queue* createQueue(unsigned capacity) {
 800033c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000340:	b089      	sub	sp, #36	; 0x24
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
 8000346:	466b      	mov	r3, sp
 8000348:	4618      	mov	r0, r3
	queue aux[1];
	queue *Queue = aux;
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	61fb      	str	r3, [r7, #28]
	Queue->capacity = capacity;
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	605a      	str	r2, [r3, #4]
	Queue->front = Queue->size = 0;
 8000356:	69fb      	ldr	r3, [r7, #28]
 8000358:	2200      	movs	r2, #0
 800035a:	709a      	strb	r2, [r3, #2]
 800035c:	69fb      	ldr	r3, [r7, #28]
 800035e:	789a      	ldrb	r2, [r3, #2]
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	701a      	strb	r2, [r3, #0]

	// This is important, see the enQueue
	Queue->rear = capacity - 1;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	3b01      	subs	r3, #1
 800036a:	b2da      	uxtb	r2, r3
 800036c:	69fb      	ldr	r3, [r7, #28]
 800036e:	705a      	strb	r2, [r3, #1]
	uint8_t pl[Queue->capacity];
 8000370:	69fb      	ldr	r3, [r7, #28]
 8000372:	6859      	ldr	r1, [r3, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	3b01      	subs	r3, #1
 8000378:	61bb      	str	r3, [r7, #24]
 800037a:	2300      	movs	r3, #0
 800037c:	4688      	mov	r8, r1
 800037e:	4699      	mov	r9, r3
 8000380:	f04f 0200 	mov.w	r2, #0
 8000384:	f04f 0300 	mov.w	r3, #0
 8000388:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800038c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000390:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000394:	2300      	movs	r3, #0
 8000396:	460c      	mov	r4, r1
 8000398:	461d      	mov	r5, r3
 800039a:	f04f 0200 	mov.w	r2, #0
 800039e:	f04f 0300 	mov.w	r3, #0
 80003a2:	00eb      	lsls	r3, r5, #3
 80003a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80003a8:	00e2      	lsls	r2, r4, #3
 80003aa:	1dcb      	adds	r3, r1, #7
 80003ac:	08db      	lsrs	r3, r3, #3
 80003ae:	00db      	lsls	r3, r3, #3
 80003b0:	ebad 0d03 	sub.w	sp, sp, r3
 80003b4:	466b      	mov	r3, sp
 80003b6:	3300      	adds	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]
	Queue->array = pl;
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	697a      	ldr	r2, [r7, #20]
 80003be:	609a      	str	r2, [r3, #8]
	return Queue;
 80003c0:	69fb      	ldr	r3, [r7, #28]
 80003c2:	4685      	mov	sp, r0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3724      	adds	r7, #36	; 0x24
 80003c8:	46bd      	mov	sp, r7
 80003ca:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80003ce:	4770      	bx	lr

080003d0 <isFull>:

// Queue is full when size becomes
// equal to the capacity
uint8_t isFull(queue *Queue) {
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	return (Queue->size == Queue->capacity);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	789b      	ldrb	r3, [r3, #2]
 80003dc:	461a      	mov	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	bf0c      	ite	eq
 80003e6:	2301      	moveq	r3, #1
 80003e8:	2300      	movne	r3, #0
 80003ea:	b2db      	uxtb	r3, r3
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr

080003f6 <enQueue>:
	return (Queue->size == 0);
}

// Function to add an item to the queue.
// It changes rear and size
void enQueue(queue *Queue, uint8_t item) {
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	460b      	mov	r3, r1
 8000400:	70fb      	strb	r3, [r7, #3]
	if (isFull(Queue))
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f7ff ffe4 	bl	80003d0 <isFull>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d11b      	bne.n	8000446 <enQueue+0x50>
		return;
	Queue->rear = (Queue->rear + 1) % Queue->capacity;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	785b      	ldrb	r3, [r3, #1]
 8000412:	3301      	adds	r3, #1
 8000414:	461a      	mov	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	fbb2 f1f3 	udiv	r1, r2, r3
 800041e:	fb01 f303 	mul.w	r3, r1, r3
 8000422:	1ad3      	subs	r3, r2, r3
 8000424:	b2da      	uxtb	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	705a      	strb	r2, [r3, #1]
	Queue->array[Queue->rear] = item;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	7852      	ldrb	r2, [r2, #1]
 8000432:	4413      	add	r3, r2
 8000434:	78fa      	ldrb	r2, [r7, #3]
 8000436:	701a      	strb	r2, [r3, #0]
	Queue->size = Queue->size + 1;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	789b      	ldrb	r3, [r3, #2]
 800043c:	3301      	adds	r3, #1
 800043e:	b2da      	uxtb	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	709a      	strb	r2, [r3, #2]
 8000444:	e000      	b.n	8000448 <enQueue+0x52>
		return;
 8000446:	bf00      	nop
}
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 800045a:	4a04      	ldr	r2, [pc, #16]	; (800046c <auto_line_wrap+0x1c>)
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	7013      	strb	r3, [r2, #0]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	20000351 	.word	0x20000351

08000470 <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	460a      	mov	r2, r1
 800047a:	71fb      	strb	r3, [r7, #7]
 800047c:	4613      	mov	r3, r2
 800047e:	71bb      	strb	r3, [r7, #6]
	//x do cursor
	//y do cursor
	cursor[0] = col - '0';
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	3b30      	subs	r3, #48	; 0x30
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <text_insertion_point+0x30>)
 8000488:	701a      	strb	r2, [r3, #0]
	cursor[1] = row - '0';
 800048a:	79bb      	ldrb	r3, [r7, #6]
 800048c:	3b30      	subs	r3, #48	; 0x30
 800048e:	b2da      	uxtb	r2, r3
 8000490:	4b03      	ldr	r3, [pc, #12]	; (80004a0 <text_insertion_point+0x30>)
 8000492:	705a      	strb	r2, [r3, #1]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	20000354 	.word	0x20000354

080004a4 <inverse_text>:
 *	desativa a inversão de texto
 *		FE 67 FD
 *		254 103 253
 *		254 `g` 253
 */
void inverse_text(bool state) {
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 80004ae:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <inverse_text+0x1c>)
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	7013      	strb	r3, [r2, #0]
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000350 	.word	0x20000350

080004c4 <def_thick_v_bar>:
 *	Define a barra vertical como com 5px de largura
 *	FE 76 FD
 *	254 118 253
 *	254 `v` 253
 */
void def_thick_v_bar(void) {
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	vertical_bar_width = 5;
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <def_thick_v_bar+0x14>)
 80004ca:	2205      	movs	r2, #5
 80004cc:	701a      	strb	r2, [r3, #0]
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	20000228 	.word	0x20000228

080004dc <def_thin_v_bar>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_thin_v_bar(void) {
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	vertical_bar_width = 2;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <def_thin_v_bar+0x14>)
 80004e2:	2202      	movs	r2, #2
 80004e4:	701a      	strb	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20000228 	.word	0x20000228

080004f4 <draw_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_v_bar_graph(uint8_t col, uint8_t height) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	71bb      	strb	r3, [r7, #6]
	cursor[0] = (col - '0') * u8g2_GetMaxCharWidth(&u8g2);
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	3b30      	subs	r3, #48	; 0x30
 8000508:	b2db      	uxtb	r3, r3
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <draw_v_bar_graph+0x5c>)
 800050c:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	fb02 f303 	mul.w	r3, r2, r3
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <draw_v_bar_graph+0x60>)
 800051a:	701a      	strb	r2, [r3, #0]

	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height - '0');
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <draw_v_bar_graph+0x60>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	b299      	uxth	r1, r3
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <draw_v_bar_graph+0x60>)
 8000524:	785b      	ldrb	r3, [r3, #1]
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <draw_v_bar_graph+0x64>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b298      	uxth	r0, r3
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	b29b      	uxth	r3, r3
 8000532:	3b30      	subs	r3, #48	; 0x30
 8000534:	b29b      	uxth	r3, r3
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	4603      	mov	r3, r0
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <draw_v_bar_graph+0x5c>)
 800053c:	f001 f8b6 	bl	80016ac <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <draw_v_bar_graph+0x5c>)
 8000542:	f001 f9b9 	bl	80018b8 <u8g2_SendBuffer>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200002bc 	.word	0x200002bc
 8000554:	20000354 	.word	0x20000354
 8000558:	20000228 	.word	0x20000228

0800055c <erase_v_bar_graph>:
 *	com height	variando [[0x00] a [0x20]] (0 a 32)
 *	FE 2D [col] [height] FD
 * 	254 45 [col] [height] 253
 *	254 `-` [col] [height] 253
 */
void erase_v_bar_graph(uint8_t col, uint8_t height) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af02      	add	r7, sp, #8
 8000562:	4603      	mov	r3, r0
 8000564:	460a      	mov	r2, r1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	4613      	mov	r3, r2
 800056a:	71bb      	strb	r3, [r7, #6]
	cursor[0] = (col - '0') * u8g2_GetMaxCharWidth(&u8g2);
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	3b30      	subs	r3, #48	; 0x30
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <erase_v_bar_graph+0x5c>)
 8000574:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000578:	b2d2      	uxtb	r2, r2
 800057a:	fb02 f303 	mul.w	r3, r2, r3
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <erase_v_bar_graph+0x60>)
 8000582:	701a      	strb	r2, [r3, #0]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height - '0');
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <erase_v_bar_graph+0x60>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b299      	uxth	r1, r3
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <erase_v_bar_graph+0x60>)
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <erase_v_bar_graph+0x64>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b298      	uxth	r0, r3
 8000596:	79bb      	ldrb	r3, [r7, #6]
 8000598:	b29b      	uxth	r3, r3
 800059a:	3b30      	subs	r3, #48	; 0x30
 800059c:	b29b      	uxth	r3, r3
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	4603      	mov	r3, r0
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <erase_v_bar_graph+0x5c>)
 80005a4:	f001 f882 	bl	80016ac <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <erase_v_bar_graph+0x5c>)
 80005aa:	f001 f985 	bl	80018b8 <u8g2_SendBuffer>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200002bc 	.word	0x200002bc
 80005bc:	20000354 	.word	0x20000354
 80005c0:	20000228 	.word	0x20000228

080005c4 <draw_h_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 7C [cc] [height] FD
 *	254 124 [cc] [height] 253
 *	254 `|` [cc] [height] 253
 */
void draw_h_bar_graph(uint8_t col, uint8_t row, uint8_t lenght) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
 80005ce:	460b      	mov	r3, r1
 80005d0:	71bb      	strb	r3, [r7, #6]
 80005d2:	4613      	mov	r3, r2
 80005d4:	717b      	strb	r3, [r7, #5]
	cursor[0] = (col - '0') * u8g2_GetMaxCharHeight(&u8g2);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	3b30      	subs	r3, #48	; 0x30
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4a17      	ldr	r2, [pc, #92]	; (800063c <draw_h_bar_graph+0x78>)
 80005de:	f992 207e 	ldrsb.w	r2, [r2, #126]	; 0x7e
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	fb02 f303 	mul.w	r3, r2, r3
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <draw_h_bar_graph+0x7c>)
 80005ec:	701a      	strb	r2, [r3, #0]
	cursor[1] = (row - '0') * u8g2_GetMaxCharWidth(&u8g2);
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	3b30      	subs	r3, #48	; 0x30
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4a11      	ldr	r2, [pc, #68]	; (800063c <draw_h_bar_graph+0x78>)
 80005f6:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 80005fa:	b2d2      	uxtb	r2, r2
 80005fc:	fb02 f303 	mul.w	r3, r2, r3
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <draw_h_bar_graph+0x7c>)
 8000604:	705a      	strb	r2, [r3, #1]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght - '0',
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <draw_h_bar_graph+0x7c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b299      	uxth	r1, r3
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <draw_h_bar_graph+0x7c>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	b29a      	uxth	r2, r3
 8000612:	797b      	ldrb	r3, [r7, #5]
 8000614:	b29b      	uxth	r3, r3
 8000616:	3b30      	subs	r3, #48	; 0x30
 8000618:	b298      	uxth	r0, r3
			u8g2_GetMaxCharHeight(&u8g2));
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <draw_h_bar_graph+0x78>)
 800061c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght - '0',
 8000620:	b29b      	uxth	r3, r3
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	4603      	mov	r3, r0
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <draw_h_bar_graph+0x78>)
 8000628:	f001 f840 	bl	80016ac <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <draw_h_bar_graph+0x78>)
 800062e:	f001 f943 	bl	80018b8 <u8g2_SendBuffer>
	//u8g2_DrawVLine(&u8g2, col, u8g2_uint_t y, u8g2_uint_t h);
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200002bc 	.word	0x200002bc
 8000640:	20000354 	.word	0x20000354

08000644 <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 8000654:	2101      	movs	r1, #1
 8000656:	480b      	ldr	r0, [pc, #44]	; (8000684 <put_pixel+0x40>)
 8000658:	f002 fb1c 	bl	8002c94 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x - '0', y - '0');
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	b29b      	uxth	r3, r3
 8000660:	3b30      	subs	r3, #48	; 0x30
 8000662:	b299      	uxth	r1, r3
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	b29b      	uxth	r3, r3
 8000668:	3b30      	subs	r3, #48	; 0x30
 800066a:	b29b      	uxth	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <put_pixel+0x40>)
 8000670:	f002 fadd 	bl	8002c2e <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <put_pixel+0x40>)
 8000676:	f001 f91f 	bl	80018b8 <u8g2_SendBuffer>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200002bc 	.word	0x200002bc

08000688 <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 8000698:	2100      	movs	r1, #0
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <erase_pixel+0x40>)
 800069c:	f002 fafa 	bl	8002c94 <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x - '0', y - '0');
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	3b30      	subs	r3, #48	; 0x30
 80006a6:	b299      	uxth	r1, r3
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	3b30      	subs	r3, #48	; 0x30
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <erase_pixel+0x40>)
 80006b4:	f002 fabb 	bl	8002c2e <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <erase_pixel+0x40>)
 80006ba:	f001 f8fd 	bl	80018b8 <u8g2_SendBuffer>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200002bc 	.word	0x200002bc

080006cc <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	u8g2_SendF(&u8g2, "c", 0x0e2);
 80006d0:	22e2      	movs	r2, #226	; 0xe2
 80006d2:	4904      	ldr	r1, [pc, #16]	; (80006e4 <lcd_soft_reset+0x18>)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <lcd_soft_reset+0x1c>)
 80006d6:	f002 fc4e 	bl	8002f76 <u8g2_SendF>
	disp_splash();
 80006da:	f000 f83d 	bl	8000758 <disp_splash>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	080063e0 	.word	0x080063e0
 80006e8:	200002bc 	.word	0x200002bc

080006ec <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	text_insertion_point(0 + '0', 0 + '0');
 80006f0:	2130      	movs	r1, #48	; 0x30
 80006f2:	2030      	movs	r0, #48	; 0x30
 80006f4:	f7ff febc 	bl	8000470 <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <clear_display+0x18>)
 80006fa:	f001 fa8b 	bl	8001c14 <u8g2_ClearDisplay>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200002bc 	.word	0x200002bc

08000708 <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	461a      	mov	r2, r3
 8000716:	2110      	movs	r1, #16
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <enable_backlight+0x20>)
 800071a:	f003 fceb 	bl	80040f4 <HAL_GPIO_WritePin>
			enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40010800 	.word	0x40010800

0800072c <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast - '0') * 9);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	461a      	mov	r2, r3
 800073a:	00d2      	lsls	r2, r2, #3
 800073c:	4413      	add	r3, r2
 800073e:	b2db      	uxtb	r3, r3
 8000740:	3350      	adds	r3, #80	; 0x50
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	4803      	ldr	r0, [pc, #12]	; (8000754 <set_contrast+0x28>)
 8000748:	f003 f8b1 	bl	80038ae <u8x8_SetContrast>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200002bc 	.word	0x200002bc

08000758 <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <disp_splash+0x28>)
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	2318      	movs	r3, #24
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	23b4      	movs	r3, #180	; 0xb4
 8000768:	2214      	movs	r2, #20
 800076a:	2106      	movs	r1, #6
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <disp_splash+0x2c>)
 800076e:	f000 ff5a 	bl	8001626 <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <disp_splash+0x2c>)
 8000774:	f001 f8a0 	bl	80018b8 <u8g2_SendBuffer>

}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000
 8000784:	200002bc 	.word	0x200002bc

08000788 <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap *wrap, uint8_t *txt) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux = 1;
 8000792:	2300      	movs	r3, #0
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	2301      	movs	r3, #1
 8000798:	73bb      	strb	r3, [r7, #14]

	for (index = 0; txt[index] != '\0'; index++)
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
 800079e:	e002      	b.n	80007a6 <str_warper+0x1e>
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	3301      	adds	r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	683a      	ldr	r2, [r7, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f6      	bne.n	80007a0 <str_warper+0x18>
		;
	index++;
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	3301      	adds	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
	wrap->wrap_times = index
			/ (u8g2_GetDisplayWidth(&u8g2) / u8g2_GetMaxCharWidth(&u8g2));
 80007b8:	7bfa      	ldrb	r2, [r7, #15]
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <str_warper+0x90>)
 80007bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80007c0:	4619      	mov	r1, r3
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <str_warper+0x90>)
 80007c4:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 80007c8:	fb91 f3f3 	sdiv	r3, r1, r3
 80007cc:	fb92 f3f3 	sdiv	r3, r2, r3
	wrap->wrap_times = index
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	751a      	strb	r2, [r3, #20]
	do {
		wrap->wrap_str[aux] = &txt[aux
				* (u8g2_GetDisplayWidth(&u8g2) / u8g2_GetMaxCharWidth(&u8g2))];
 80007d6:	7bbb      	ldrb	r3, [r7, #14]
 80007d8:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <str_warper+0x90>)
 80007da:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80007de:	4611      	mov	r1, r2
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <str_warper+0x90>)
 80007e2:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 80007e6:	fb91 f2f2 	sdiv	r2, r1, r2
 80007ea:	fb02 f303 	mul.w	r3, r2, r3
 80007ee:	4619      	mov	r1, r3
		wrap->wrap_str[aux] = &txt[aux
 80007f0:	7bba      	ldrb	r2, [r7, #14]
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	4419      	add	r1, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		aux++;
 80007fc:	7bbb      	ldrb	r3, [r7, #14]
 80007fe:	3301      	adds	r3, #1
 8000800:	73bb      	strb	r3, [r7, #14]
	} while (aux != wrap->wrap_times);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	7d1b      	ldrb	r3, [r3, #20]
 8000806:	7bba      	ldrb	r2, [r7, #14]
 8000808:	429a      	cmp	r2, r3
 800080a:	d1e4      	bne.n	80007d6 <str_warper+0x4e>
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	200002bc 	.word	0x200002bc

0800081c <put_cursor>:
void put_cursor(void){
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
	lcd_print("_ A");
 8000820:	4803      	ldr	r0, [pc, #12]	; (8000830 <put_cursor+0x14>)
 8000822:	f000 f817 	bl	8000854 <lcd_print>
	u8g2_SendBuffer(&u8g2);
 8000826:	4803      	ldr	r0, [pc, #12]	; (8000834 <put_cursor+0x18>)
 8000828:	f001 f846 	bl	80018b8 <u8g2_SendBuffer>
}
 800082c:	bf00      	nop
 800082e:	bd80      	pop	{r7, pc}
 8000830:	080063e4 	.word	0x080063e4
 8000834:	200002bc 	.word	0x200002bc

08000838 <test_font>:
void test_font(void){
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
	lcd_print("    XCoder v3.0");
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <test_font+0x14>)
 800083e:	f000 f809 	bl	8000854 <lcd_print>
	u8g2_SendBuffer(&u8g2);
 8000842:	4803      	ldr	r0, [pc, #12]	; (8000850 <test_font+0x18>)
 8000844:	f001 f838 	bl	80018b8 <u8g2_SendBuffer>
}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	080063e8 	.word	0x080063e8
 8000850:	200002bc 	.word	0x200002bc

08000854 <lcd_print>:

void lcd_print(uint8_t *txt) {
 8000854:	b580      	push	{r7, lr}
 8000856:	b08e      	sub	sp, #56	; 0x38
 8000858:	af04      	add	r7, sp, #16
 800085a:	6078      	str	r0, [r7, #4]
	txt_wrap wrap;
	wrap.wrap_str[0] = txt;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	60fb      	str	r3, [r7, #12]
	wrap.wrap_times = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t aux = 0;
 8000866:	2300      	movs	r3, #0
 8000868:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (text_invertion) {
 800086c:	4b95      	ldr	r3, [pc, #596]	; (8000ac4 <lcd_print+0x270>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b00      	cmp	r3, #0
 8000872:	f000 809a 	beq.w	80009aa <lcd_print+0x156>
		if (text_wrap) {
 8000876:	4b94      	ldr	r3, [pc, #592]	; (8000ac8 <lcd_print+0x274>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b00      	cmp	r3, #0
 800087c:	d072      	beq.n	8000964 <lcd_print+0x110>
			str_warper(&wrap, txt);
 800087e:	f107 030c 	add.w	r3, r7, #12
 8000882:	6879      	ldr	r1, [r7, #4]
 8000884:	4618      	mov	r0, r3
 8000886:	f7ff ff7f 	bl	8000788 <str_warper>
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 800088a:	2300      	movs	r3, #0
 800088c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000890:	e061      	b.n	8000956 <lcd_print+0x102>
				cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 8000892:	4b8e      	ldr	r3, [pc, #568]	; (8000acc <lcd_print+0x278>)
 8000894:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000898:	b2db      	uxtb	r3, r3
 800089a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800089e:	fb02 f303 	mul.w	r3, r2, r3
 80008a2:	b2da      	uxtb	r2, r3
 80008a4:	4b8a      	ldr	r3, [pc, #552]	; (8000ad0 <lcd_print+0x27c>)
 80008a6:	705a      	strb	r2, [r3, #1]
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 80008a8:	4b89      	ldr	r3, [pc, #548]	; (8000ad0 <lcd_print+0x27c>)
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	b299      	uxth	r1, r3
 80008ae:	4b88      	ldr	r3, [pc, #544]	; (8000ad0 <lcd_print+0x27c>)
 80008b0:	785b      	ldrb	r3, [r3, #1]
 80008b2:	b29a      	uxth	r2, r3
 80008b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
						0, 0, 0, wrap.wrap_str[aux]);
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	3328      	adds	r3, #40	; 0x28
 80008bc:	443b      	add	r3, r7
 80008be:	f853 3c1c 	ldr.w	r3, [r3, #-28]
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 80008c2:	9303      	str	r3, [sp, #12]
 80008c4:	2300      	movs	r3, #0
 80008c6:	9302      	str	r3, [sp, #8]
 80008c8:	2300      	movs	r3, #0
 80008ca:	9301      	str	r3, [sp, #4]
 80008cc:	2300      	movs	r3, #0
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2320      	movs	r3, #32
 80008d2:	487e      	ldr	r0, [pc, #504]	; (8000acc <lcd_print+0x278>)
 80008d4:	f001 f94a 	bl	8001b6c <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 80008d8:	487c      	ldr	r0, [pc, #496]	; (8000acc <lcd_print+0x278>)
 80008da:	f000 ffed 	bl	80018b8 <u8g2_SendBuffer>

				if (u8g2_GetStrWidth(&u8g2,
						wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 80008de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008e2:	3b01      	subs	r3, #1
 80008e4:	009b      	lsls	r3, r3, #2
 80008e6:	3328      	adds	r3, #40	; 0x28
 80008e8:	443b      	add	r3, r7
 80008ea:	f853 3c1c 	ldr.w	r3, [r3, #-28]
				if (u8g2_GetStrWidth(&u8g2,
 80008ee:	4619      	mov	r1, r3
 80008f0:	4876      	ldr	r0, [pc, #472]	; (8000acc <lcd_print+0x278>)
 80008f2:	f002 f849 	bl	8002988 <u8g2_GetStrWidth>
 80008f6:	4603      	mov	r3, r0
 80008f8:	461a      	mov	r2, r3
						wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 80008fa:	4b74      	ldr	r3, [pc, #464]	; (8000acc <lcd_print+0x278>)
 80008fc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
				if (u8g2_GetStrWidth(&u8g2,
 8000900:	429a      	cmp	r2, r3
 8000902:	d90e      	bls.n	8000922 <lcd_print+0xce>
					cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 8000904:	4b71      	ldr	r3, [pc, #452]	; (8000acc <lcd_print+0x278>)
 8000906:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 800090a:	b2db      	uxtb	r3, r3
 800090c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000910:	fb02 f303 	mul.w	r3, r2, r3
 8000914:	b2da      	uxtb	r2, r3
 8000916:	4b6e      	ldr	r3, [pc, #440]	; (8000ad0 <lcd_print+0x27c>)
 8000918:	705a      	strb	r2, [r3, #1]
					cursor[0] = 0;
 800091a:	4b6d      	ldr	r3, [pc, #436]	; (8000ad0 <lcd_print+0x27c>)
 800091c:	2200      	movs	r2, #0
 800091e:	701a      	strb	r2, [r3, #0]
 8000920:	e014      	b.n	800094c <lcd_print+0xf8>
				} else {
					cursor[0] += u8g2_GetStrWidth(&u8g2,
							wrap.wrap_str[aux - 1]);
 8000922:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000926:	3b01      	subs	r3, #1
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	3328      	adds	r3, #40	; 0x28
 800092c:	443b      	add	r3, r7
 800092e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
					cursor[0] += u8g2_GetStrWidth(&u8g2,
 8000932:	4619      	mov	r1, r3
 8000934:	4865      	ldr	r0, [pc, #404]	; (8000acc <lcd_print+0x278>)
 8000936:	f002 f827 	bl	8002988 <u8g2_GetStrWidth>
 800093a:	4603      	mov	r3, r0
 800093c:	4619      	mov	r1, r3
 800093e:	4b64      	ldr	r3, [pc, #400]	; (8000ad0 <lcd_print+0x27c>)
 8000940:	781a      	ldrb	r2, [r3, #0]
 8000942:	b2cb      	uxtb	r3, r1
 8000944:	4413      	add	r3, r2
 8000946:	b2da      	uxtb	r2, r3
 8000948:	4b61      	ldr	r3, [pc, #388]	; (8000ad0 <lcd_print+0x27c>)
 800094a:	701a      	strb	r2, [r3, #0]
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 800094c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000950:	3301      	adds	r3, #1
 8000952:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000956:	f897 3020 	ldrb.w	r3, [r7, #32]
 800095a:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800095e:	429a      	cmp	r2, r3
 8000960:	d397      	bcc.n	8000892 <lcd_print+0x3e>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
		}
	}

}
 8000962:	e0ab      	b.n	8000abc <lcd_print+0x268>
			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 8000964:	4b5a      	ldr	r3, [pc, #360]	; (8000ad0 <lcd_print+0x27c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	b299      	uxth	r1, r3
 800096a:	4b59      	ldr	r3, [pc, #356]	; (8000ad0 <lcd_print+0x27c>)
 800096c:	785b      	ldrb	r3, [r3, #1]
 800096e:	b29a      	uxth	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	9303      	str	r3, [sp, #12]
 8000974:	2300      	movs	r3, #0
 8000976:	9302      	str	r3, [sp, #8]
 8000978:	2300      	movs	r3, #0
 800097a:	9301      	str	r3, [sp, #4]
 800097c:	2300      	movs	r3, #0
 800097e:	9300      	str	r3, [sp, #0]
 8000980:	2320      	movs	r3, #32
 8000982:	4852      	ldr	r0, [pc, #328]	; (8000acc <lcd_print+0x278>)
 8000984:	f001 f8f2 	bl	8001b6c <u8g2_DrawButtonUTF8>
			u8g2_SendBuffer(&u8g2);
 8000988:	4850      	ldr	r0, [pc, #320]	; (8000acc <lcd_print+0x278>)
 800098a:	f000 ff95 	bl	80018b8 <u8g2_SendBuffer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 800098e:	6879      	ldr	r1, [r7, #4]
 8000990:	484e      	ldr	r0, [pc, #312]	; (8000acc <lcd_print+0x278>)
 8000992:	f001 fff9 	bl	8002988 <u8g2_GetStrWidth>
 8000996:	4603      	mov	r3, r0
 8000998:	4619      	mov	r1, r3
 800099a:	4b4d      	ldr	r3, [pc, #308]	; (8000ad0 <lcd_print+0x27c>)
 800099c:	781a      	ldrb	r2, [r3, #0]
 800099e:	b2cb      	uxtb	r3, r1
 80009a0:	4413      	add	r3, r2
 80009a2:	b2da      	uxtb	r2, r3
 80009a4:	4b4a      	ldr	r3, [pc, #296]	; (8000ad0 <lcd_print+0x27c>)
 80009a6:	701a      	strb	r2, [r3, #0]
}
 80009a8:	e088      	b.n	8000abc <lcd_print+0x268>
		if (text_wrap) {
 80009aa:	4b47      	ldr	r3, [pc, #284]	; (8000ac8 <lcd_print+0x274>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d06a      	beq.n	8000a88 <lcd_print+0x234>
			str_warper(&wrap, txt);
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	6879      	ldr	r1, [r7, #4]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fee5 	bl	8000788 <str_warper>
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 80009be:	2300      	movs	r3, #0
 80009c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009c4:	e022      	b.n	8000a0c <lcd_print+0x1b8>
				cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 80009c6:	4b41      	ldr	r3, [pc, #260]	; (8000acc <lcd_print+0x278>)
 80009c8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80009cc:	b2db      	uxtb	r3, r3
 80009ce:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80009d2:	fb02 f303 	mul.w	r3, r2, r3
 80009d6:	b2da      	uxtb	r2, r3
 80009d8:	4b3d      	ldr	r3, [pc, #244]	; (8000ad0 <lcd_print+0x27c>)
 80009da:	705a      	strb	r2, [r3, #1]
				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], wrap.wrap_str[aux]);
 80009dc:	4b3c      	ldr	r3, [pc, #240]	; (8000ad0 <lcd_print+0x27c>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	b299      	uxth	r1, r3
 80009e2:	4b3b      	ldr	r3, [pc, #236]	; (8000ad0 <lcd_print+0x27c>)
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	b29a      	uxth	r2, r3
 80009e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ec:	009b      	lsls	r3, r3, #2
 80009ee:	3328      	adds	r3, #40	; 0x28
 80009f0:	443b      	add	r3, r7
 80009f2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80009f6:	4835      	ldr	r0, [pc, #212]	; (8000acc <lcd_print+0x278>)
 80009f8:	f001 fe8a 	bl	8002710 <u8g2_DrawUTF8>
				u8g2_SendBuffer(&u8g2);
 80009fc:	4833      	ldr	r0, [pc, #204]	; (8000acc <lcd_print+0x278>)
 80009fe:	f000 ff5b 	bl	80018b8 <u8g2_SendBuffer>
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 8000a02:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a06:	3301      	adds	r3, #1
 8000a08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000a0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000a10:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d3d6      	bcc.n	80009c6 <lcd_print+0x172>
					wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 8000a18:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a1c:	3b01      	subs	r3, #1
 8000a1e:	009b      	lsls	r3, r3, #2
 8000a20:	3328      	adds	r3, #40	; 0x28
 8000a22:	443b      	add	r3, r7
 8000a24:	f853 3c1c 	ldr.w	r3, [r3, #-28]
			if (u8g2_GetStrWidth(&u8g2,
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4828      	ldr	r0, [pc, #160]	; (8000acc <lcd_print+0x278>)
 8000a2c:	f001 ffac 	bl	8002988 <u8g2_GetStrWidth>
 8000a30:	4603      	mov	r3, r0
 8000a32:	461a      	mov	r2, r3
					wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 8000a34:	4b25      	ldr	r3, [pc, #148]	; (8000acc <lcd_print+0x278>)
 8000a36:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
			if (u8g2_GetStrWidth(&u8g2,
 8000a3a:	429a      	cmp	r2, r3
 8000a3c:	d90e      	bls.n	8000a5c <lcd_print+0x208>
				cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 8000a3e:	4b23      	ldr	r3, [pc, #140]	; (8000acc <lcd_print+0x278>)
 8000a40:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000a44:	b2db      	uxtb	r3, r3
 8000a46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a4a:	fb02 f303 	mul.w	r3, r2, r3
 8000a4e:	b2da      	uxtb	r2, r3
 8000a50:	4b1f      	ldr	r3, [pc, #124]	; (8000ad0 <lcd_print+0x27c>)
 8000a52:	705a      	strb	r2, [r3, #1]
				cursor[0] = 0;
 8000a54:	4b1e      	ldr	r3, [pc, #120]	; (8000ad0 <lcd_print+0x27c>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	701a      	strb	r2, [r3, #0]
}
 8000a5a:	e02f      	b.n	8000abc <lcd_print+0x268>
				cursor[0] += u8g2_GetStrWidth(&u8g2, wrap.wrap_str[aux - 1]);
 8000a5c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a60:	3b01      	subs	r3, #1
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	3328      	adds	r3, #40	; 0x28
 8000a66:	443b      	add	r3, r7
 8000a68:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4817      	ldr	r0, [pc, #92]	; (8000acc <lcd_print+0x278>)
 8000a70:	f001 ff8a 	bl	8002988 <u8g2_GetStrWidth>
 8000a74:	4603      	mov	r3, r0
 8000a76:	4619      	mov	r1, r3
 8000a78:	4b15      	ldr	r3, [pc, #84]	; (8000ad0 <lcd_print+0x27c>)
 8000a7a:	781a      	ldrb	r2, [r3, #0]
 8000a7c:	b2cb      	uxtb	r3, r1
 8000a7e:	4413      	add	r3, r2
 8000a80:	b2da      	uxtb	r2, r3
 8000a82:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <lcd_print+0x27c>)
 8000a84:	701a      	strb	r2, [r3, #0]
}
 8000a86:	e019      	b.n	8000abc <lcd_print+0x268>
			u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <lcd_print+0x27c>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	b299      	uxth	r1, r3
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <lcd_print+0x27c>)
 8000a90:	785b      	ldrb	r3, [r3, #1]
 8000a92:	b29a      	uxth	r2, r3
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	480d      	ldr	r0, [pc, #52]	; (8000acc <lcd_print+0x278>)
 8000a98:	f001 fe3a 	bl	8002710 <u8g2_DrawUTF8>
			u8g2_SendBuffer(&u8g2);
 8000a9c:	480b      	ldr	r0, [pc, #44]	; (8000acc <lcd_print+0x278>)
 8000a9e:	f000 ff0b 	bl	80018b8 <u8g2_SendBuffer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000aa2:	6879      	ldr	r1, [r7, #4]
 8000aa4:	4809      	ldr	r0, [pc, #36]	; (8000acc <lcd_print+0x278>)
 8000aa6:	f001 ff6f 	bl	8002988 <u8g2_GetStrWidth>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4619      	mov	r1, r3
 8000aae:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <lcd_print+0x27c>)
 8000ab0:	781a      	ldrb	r2, [r3, #0]
 8000ab2:	b2cb      	uxtb	r3, r1
 8000ab4:	4413      	add	r3, r2
 8000ab6:	b2da      	uxtb	r2, r3
 8000ab8:	4b05      	ldr	r3, [pc, #20]	; (8000ad0 <lcd_print+0x27c>)
 8000aba:	701a      	strb	r2, [r3, #0]
}
 8000abc:	bf00      	nop
 8000abe:	3728      	adds	r7, #40	; 0x28
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	20000350 	.word	0x20000350
 8000ac8:	20000351 	.word	0x20000351
 8000acc:	200002bc 	.word	0x200002bc
 8000ad0:	20000354 	.word	0x20000354

08000ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ad8:	f002 ff9e 	bl	8003a18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000adc:	f000 f80c 	bl	8000af8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae0:	f000 f8fe 	bl	8000ce0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ae4:	f000 f84e 	bl	8000b84 <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ae8:	f000 f8d0 	bl	8000c8c <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000aec:	f000 f880 	bl	8000bf0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  start();
 8000af0:	f7ff fbea 	bl	80002c8 <start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  __WFI();
 8000af4:	bf30      	wfi
 8000af6:	e7fd      	b.n	8000af4 <main+0x20>

08000af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b090      	sub	sp, #64	; 0x40
 8000afc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afe:	f107 0318 	add.w	r3, r7, #24
 8000b02:	2228      	movs	r2, #40	; 0x28
 8000b04:	2100      	movs	r1, #0
 8000b06:	4618      	mov	r0, r3
 8000b08:	f004 ffb2 	bl	8005a70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	601a      	str	r2, [r3, #0]
 8000b12:	605a      	str	r2, [r3, #4]
 8000b14:	609a      	str	r2, [r3, #8]
 8000b16:	60da      	str	r2, [r3, #12]
 8000b18:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b1a:	2301      	movs	r3, #1
 8000b1c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b1e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b22:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000b24:	2300      	movs	r3, #0
 8000b26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b28:	2301      	movs	r3, #1
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b34:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000b36:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3c:	f107 0318 	add.w	r3, r7, #24
 8000b40:	4618      	mov	r0, r3
 8000b42:	f003 fb21 	bl	8004188 <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b4c:	f000 f964 	bl	8000e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b50:	230f      	movs	r3, #15
 8000b52:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b54:	2302      	movs	r3, #2
 8000b56:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b60:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b62:	2300      	movs	r3, #0
 8000b64:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b66:	1d3b      	adds	r3, r7, #4
 8000b68:	2102      	movs	r1, #2
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f003 fd8e 	bl	800468c <HAL_RCC_ClockConfig>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b76:	f000 f94f 	bl	8000e18 <Error_Handler>
  }
}
 8000b7a:	bf00      	nop
 8000b7c:	3740      	adds	r7, #64	; 0x40
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
	...

08000b84 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b88:	4b17      	ldr	r3, [pc, #92]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b8a:	4a18      	ldr	r2, [pc, #96]	; (8000bec <MX_SPI1_Init+0x68>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b8e:	4b16      	ldr	r3, [pc, #88]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b90:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b94:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b96:	4b14      	ldr	r3, [pc, #80]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b9c:	4b12      	ldr	r3, [pc, #72]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ba2:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ba8:	4b0f      	ldr	r3, [pc, #60]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bae:	4b0e      	ldr	r3, [pc, #56]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000bb4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bb8:	2208      	movs	r2, #8
 8000bba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000bc2:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000bc8:	4b07      	ldr	r3, [pc, #28]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000bce:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bd0:	220a      	movs	r2, #10
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000bd4:	4804      	ldr	r0, [pc, #16]	; (8000be8 <MX_SPI1_Init+0x64>)
 8000bd6:	f003 fef1 	bl	80049bc <HAL_SPI_Init>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000be0:	f000 f91a 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000358 	.word	0x20000358
 8000bec:	40013000 	.word	0x40013000

08000bf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b086      	sub	sp, #24
 8000bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bf6:	f107 0308 	add.w	r3, r7, #8
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	601a      	str	r2, [r3, #0]
 8000bfe:	605a      	str	r2, [r3, #4]
 8000c00:	609a      	str	r2, [r3, #8]
 8000c02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c04:	463b      	mov	r3, r7
 8000c06:	2200      	movs	r2, #0
 8000c08:	601a      	str	r2, [r3, #0]
 8000c0a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c0c:	4b1e      	ldr	r3, [pc, #120]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c0e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c12:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 685;
 8000c14:	4b1c      	ldr	r3, [pc, #112]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c16:	f240 22ad 	movw	r2, #685	; 0x2ad
 8000c1a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 52499;
 8000c22:	4b19      	ldr	r3, [pc, #100]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c24:	f64c 5213 	movw	r2, #52499	; 0xcd13
 8000c28:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c2a:	4b17      	ldr	r3, [pc, #92]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c30:	4b15      	ldr	r3, [pc, #84]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c36:	4814      	ldr	r0, [pc, #80]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c38:	f004 f926 	bl	8004e88 <HAL_TIM_Base_Init>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c42:	f000 f8e9 	bl	8000e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c46:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c4a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c4c:	f107 0308 	add.w	r3, r7, #8
 8000c50:	4619      	mov	r1, r3
 8000c52:	480d      	ldr	r0, [pc, #52]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c54:	f004 faea 	bl	800522c <HAL_TIM_ConfigClockSource>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c5e:	f000 f8db 	bl	8000e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c62:	2300      	movs	r3, #0
 8000c64:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c66:	2300      	movs	r3, #0
 8000c68:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4806      	ldr	r0, [pc, #24]	; (8000c88 <MX_TIM2_Init+0x98>)
 8000c70:	f004 fcb2 	bl	80055d8 <HAL_TIMEx_MasterConfigSynchronization>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c7a:	f000 f8cd 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c7e:	bf00      	nop
 8000c80:	3718      	adds	r7, #24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	bd80      	pop	{r7, pc}
 8000c86:	bf00      	nop
 8000c88:	200003b0 	.word	0x200003b0

08000c8c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c90:	4b11      	ldr	r3, [pc, #68]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000c92:	4a12      	ldr	r2, [pc, #72]	; (8000cdc <MX_USART1_UART_Init+0x50>)
 8000c94:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19500;
 8000c96:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000c98:	f644 422c 	movw	r2, #19500	; 0x4c2c
 8000c9c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c9e:	4b0e      	ldr	r3, [pc, #56]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ca4:	4b0c      	ldr	r3, [pc, #48]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000cb0:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000cb2:	220c      	movs	r2, #12
 8000cb4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cb6:	4b08      	ldr	r3, [pc, #32]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000cc2:	4805      	ldr	r0, [pc, #20]	; (8000cd8 <MX_USART1_UART_Init+0x4c>)
 8000cc4:	f004 fcf2 	bl	80056ac <HAL_UART_Init>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000cce:	f000 f8a3 	bl	8000e18 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200003f8 	.word	0x200003f8
 8000cdc:	40013800 	.word	0x40013800

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b088      	sub	sp, #32
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	f107 0310 	add.w	r3, r7, #16
 8000cea:	2200      	movs	r2, #0
 8000cec:	601a      	str	r2, [r3, #0]
 8000cee:	605a      	str	r2, [r3, #4]
 8000cf0:	609a      	str	r2, [r3, #8]
 8000cf2:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cf4:	4b43      	ldr	r3, [pc, #268]	; (8000e04 <MX_GPIO_Init+0x124>)
 8000cf6:	699b      	ldr	r3, [r3, #24]
 8000cf8:	4a42      	ldr	r2, [pc, #264]	; (8000e04 <MX_GPIO_Init+0x124>)
 8000cfa:	f043 0310 	orr.w	r3, r3, #16
 8000cfe:	6193      	str	r3, [r2, #24]
 8000d00:	4b40      	ldr	r3, [pc, #256]	; (8000e04 <MX_GPIO_Init+0x124>)
 8000d02:	699b      	ldr	r3, [r3, #24]
 8000d04:	f003 0310 	and.w	r3, r3, #16
 8000d08:	60fb      	str	r3, [r7, #12]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d0c:	4b3d      	ldr	r3, [pc, #244]	; (8000e04 <MX_GPIO_Init+0x124>)
 8000d0e:	699b      	ldr	r3, [r3, #24]
 8000d10:	4a3c      	ldr	r2, [pc, #240]	; (8000e04 <MX_GPIO_Init+0x124>)
 8000d12:	f043 0320 	orr.w	r3, r3, #32
 8000d16:	6193      	str	r3, [r2, #24]
 8000d18:	4b3a      	ldr	r3, [pc, #232]	; (8000e04 <MX_GPIO_Init+0x124>)
 8000d1a:	699b      	ldr	r3, [r3, #24]
 8000d1c:	f003 0320 	and.w	r3, r3, #32
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d24:	4b37      	ldr	r3, [pc, #220]	; (8000e04 <MX_GPIO_Init+0x124>)
 8000d26:	699b      	ldr	r3, [r3, #24]
 8000d28:	4a36      	ldr	r2, [pc, #216]	; (8000e04 <MX_GPIO_Init+0x124>)
 8000d2a:	f043 0304 	orr.w	r3, r3, #4
 8000d2e:	6193      	str	r3, [r2, #24]
 8000d30:	4b34      	ldr	r3, [pc, #208]	; (8000e04 <MX_GPIO_Init+0x124>)
 8000d32:	699b      	ldr	r3, [r3, #24]
 8000d34:	f003 0304 	and.w	r3, r3, #4
 8000d38:	607b      	str	r3, [r7, #4]
 8000d3a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d3c:	4b31      	ldr	r3, [pc, #196]	; (8000e04 <MX_GPIO_Init+0x124>)
 8000d3e:	699b      	ldr	r3, [r3, #24]
 8000d40:	4a30      	ldr	r2, [pc, #192]	; (8000e04 <MX_GPIO_Init+0x124>)
 8000d42:	f043 0308 	orr.w	r3, r3, #8
 8000d46:	6193      	str	r3, [r2, #24]
 8000d48:	4b2e      	ldr	r3, [pc, #184]	; (8000e04 <MX_GPIO_Init+0x124>)
 8000d4a:	699b      	ldr	r3, [r3, #24]
 8000d4c:	f003 0308 	and.w	r3, r3, #8
 8000d50:	603b      	str	r3, [r7, #0]
 8000d52:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d54:	2200      	movs	r2, #0
 8000d56:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d5a:	482b      	ldr	r0, [pc, #172]	; (8000e08 <MX_GPIO_Init+0x128>)
 8000d5c:	f003 f9ca 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000d60:	2201      	movs	r2, #1
 8000d62:	2110      	movs	r1, #16
 8000d64:	4829      	ldr	r0, [pc, #164]	; (8000e0c <MX_GPIO_Init+0x12c>)
 8000d66:	f003 f9c5 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2140      	movs	r1, #64	; 0x40
 8000d6e:	4827      	ldr	r0, [pc, #156]	; (8000e0c <MX_GPIO_Init+0x12c>)
 8000d70:	f003 f9c0 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000d74:	2200      	movs	r2, #0
 8000d76:	2103      	movs	r1, #3
 8000d78:	4825      	ldr	r0, [pc, #148]	; (8000e10 <MX_GPIO_Init+0x130>)
 8000d7a:	f003 f9bb 	bl	80040f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d7e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	481c      	ldr	r0, [pc, #112]	; (8000e08 <MX_GPIO_Init+0x128>)
 8000d98:	f003 f830 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000d9c:	2350      	movs	r3, #80	; 0x50
 8000d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000da0:	2301      	movs	r3, #1
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000da4:	2300      	movs	r3, #0
 8000da6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000da8:	2302      	movs	r3, #2
 8000daa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dac:	f107 0310 	add.w	r3, r7, #16
 8000db0:	4619      	mov	r1, r3
 8000db2:	4816      	ldr	r0, [pc, #88]	; (8000e0c <MX_GPIO_Init+0x12c>)
 8000db4:	f003 f822 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000db8:	2303      	movs	r3, #3
 8000dba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc0:	2300      	movs	r3, #0
 8000dc2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4810      	ldr	r0, [pc, #64]	; (8000e10 <MX_GPIO_Init+0x130>)
 8000dd0:	f003 f814 	bl	8003dfc <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000dd8:	4b0e      	ldr	r3, [pc, #56]	; (8000e14 <MX_GPIO_Init+0x134>)
 8000dda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	4619      	mov	r1, r3
 8000de6:	480a      	ldr	r0, [pc, #40]	; (8000e10 <MX_GPIO_Init+0x130>)
 8000de8:	f003 f808 	bl	8003dfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000dec:	2200      	movs	r2, #0
 8000dee:	2100      	movs	r1, #0
 8000df0:	200a      	movs	r0, #10
 8000df2:	f002 ffb0 	bl	8003d56 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000df6:	200a      	movs	r0, #10
 8000df8:	f002 ffc9 	bl	8003d8e <HAL_NVIC_EnableIRQ>

}
 8000dfc:	bf00      	nop
 8000dfe:	3720      	adds	r7, #32
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40011000 	.word	0x40011000
 8000e0c:	40010800 	.word	0x40010800
 8000e10:	40010c00 	.word	0x40010c00
 8000e14:	10210000 	.word	0x10210000

08000e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e18:	b480      	push	{r7}
 8000e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e1c:	b672      	cpsid	i
}
 8000e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <Error_Handler+0x8>
	...

08000e24 <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];
queue * Queue;
uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *data) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) data, strlen(data), 100);
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff f98d 	bl	800014c <strlen>
 8000e32:	4603      	mov	r3, r0
 8000e34:	b29a      	uxth	r2, r3
 8000e36:	2364      	movs	r3, #100	; 0x64
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	4803      	ldr	r0, [pc, #12]	; (8000e48 <monitor_send_string+0x24>)
 8000e3c:	f004 fc83 	bl	8005746 <HAL_UART_Transmit>

}
 8000e40:	bf00      	nop
 8000e42:	3708      	adds	r7, #8
 8000e44:	46bd      	mov	sp, r7
 8000e46:	bd80      	pop	{r7, pc}
 8000e48:	200003f8 	.word	0x200003f8

08000e4c <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af02      	add	r7, sp, #8
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 8000e56:	2204      	movs	r2, #4
 8000e58:	498e      	ldr	r1, [pc, #568]	; (8001094 <monitor_check_cmd+0x248>)
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f004 fe44 	bl	8005ae8 <strncmp>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d108      	bne.n	8000e78 <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 8000e66:	4a8c      	ldr	r2, [pc, #560]	; (8001098 <monitor_check_cmd+0x24c>)
 8000e68:	2164      	movs	r1, #100	; 0x64
 8000e6a:	488c      	ldr	r0, [pc, #560]	; (800109c <monitor_check_cmd+0x250>)
 8000e6c:	f004 fe08 	bl	8005a80 <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 8000e70:	488a      	ldr	r0, [pc, #552]	; (800109c <monitor_check_cmd+0x250>)
 8000e72:	f7ff ffd7 	bl	8000e24 <monitor_send_string>
	}
	//se não era comando, tenta escrever na tela
	else {
		lcd_print(cmd);
	}
}
 8000e76:	e109      	b.n	800108c <monitor_check_cmd+0x240>
	else if (cmd[0] == 254) {
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2bfe      	cmp	r3, #254	; 0xfe
 8000e7e:	f040 8102 	bne.w	8001086 <monitor_check_cmd+0x23a>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	3301      	adds	r3, #1
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	2b31      	cmp	r3, #49	; 0x31
 8000e8a:	d109      	bne.n	8000ea0 <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 8000e8c:	4b84      	ldr	r3, [pc, #528]	; (80010a0 <monitor_check_cmd+0x254>)
 8000e8e:	4a85      	ldr	r2, [pc, #532]	; (80010a4 <monitor_check_cmd+0x258>)
 8000e90:	2164      	movs	r1, #100	; 0x64
 8000e92:	4882      	ldr	r0, [pc, #520]	; (800109c <monitor_check_cmd+0x250>)
 8000e94:	f004 fdf4 	bl	8005a80 <sniprintf>
			monitor_send_string(ans);
 8000e98:	4880      	ldr	r0, [pc, #512]	; (800109c <monitor_check_cmd+0x250>)
 8000e9a:	f7ff ffc3 	bl	8000e24 <monitor_send_string>
}
 8000e9e:	e0f5      	b.n	800108c <monitor_check_cmd+0x240>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3301      	adds	r3, #1
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b30      	cmp	r3, #48	; 0x30
 8000ea8:	d109      	bne.n	8000ebe <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 8000eaa:	4b7d      	ldr	r3, [pc, #500]	; (80010a0 <monitor_check_cmd+0x254>)
 8000eac:	4a7e      	ldr	r2, [pc, #504]	; (80010a8 <monitor_check_cmd+0x25c>)
 8000eae:	2164      	movs	r1, #100	; 0x64
 8000eb0:	487a      	ldr	r0, [pc, #488]	; (800109c <monitor_check_cmd+0x250>)
 8000eb2:	f004 fde5 	bl	8005a80 <sniprintf>
			monitor_send_string(ans);
 8000eb6:	4879      	ldr	r0, [pc, #484]	; (800109c <monitor_check_cmd+0x250>)
 8000eb8:	f7ff ffb4 	bl	8000e24 <monitor_send_string>
}
 8000ebc:	e0e6      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_SOFT_RESET) {
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	3301      	adds	r3, #1
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b56      	cmp	r3, #86	; 0x56
 8000ec6:	d102      	bne.n	8000ece <monitor_check_cmd+0x82>
			lcd_soft_reset();
 8000ec8:	f7ff fc00 	bl	80006cc <lcd_soft_reset>
}
 8000ecc:	e0de      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	3301      	adds	r3, #1
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	2b42      	cmp	r3, #66	; 0x42
 8000ed6:	d103      	bne.n	8000ee0 <monitor_check_cmd+0x94>
			enable_backlight(true);
 8000ed8:	2001      	movs	r0, #1
 8000eda:	f7ff fc15 	bl	8000708 <enable_backlight>
}
 8000ede:	e0d5      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b46      	cmp	r3, #70	; 0x46
 8000ee8:	d103      	bne.n	8000ef2 <monitor_check_cmd+0xa6>
			enable_backlight(false);
 8000eea:	2000      	movs	r0, #0
 8000eec:	f7ff fc0c 	bl	8000708 <enable_backlight>
}
 8000ef0:	e0cc      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3301      	adds	r3, #1
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2b66      	cmp	r3, #102	; 0x66
 8000efa:	d103      	bne.n	8000f04 <monitor_check_cmd+0xb8>
			inverse_text(true);
 8000efc:	2001      	movs	r0, #1
 8000efe:	f7ff fad1 	bl	80004a4 <inverse_text>
}
 8000f02:	e0c3      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	3301      	adds	r3, #1
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b67      	cmp	r3, #103	; 0x67
 8000f0c:	d103      	bne.n	8000f16 <monitor_check_cmd+0xca>
			inverse_text(false);
 8000f0e:	2000      	movs	r0, #0
 8000f10:	f7ff fac8 	bl	80004a4 <inverse_text>
}
 8000f14:	e0ba      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_CLEAR) {
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	3301      	adds	r3, #1
 8000f1a:	781b      	ldrb	r3, [r3, #0]
 8000f1c:	2b58      	cmp	r3, #88	; 0x58
 8000f1e:	d102      	bne.n	8000f26 <monitor_check_cmd+0xda>
			clear_display();
 8000f20:	f7ff fbe4 	bl	80006ec <clear_display>
}
 8000f24:	e0b2      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3301      	adds	r3, #1
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b70      	cmp	r3, #112	; 0x70
 8000f2e:	d10a      	bne.n	8000f46 <monitor_check_cmd+0xfa>
			put_pixel(cmd[3], cmd[2]);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	3303      	adds	r3, #3
 8000f34:	781a      	ldrb	r2, [r3, #0]
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	3302      	adds	r3, #2
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	4610      	mov	r0, r2
 8000f40:	f7ff fb80 	bl	8000644 <put_pixel>
}
 8000f44:	e0a2      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	3301      	adds	r3, #1
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b71      	cmp	r3, #113	; 0x71
 8000f4e:	d10a      	bne.n	8000f66 <monitor_check_cmd+0x11a>
			erase_pixel(cmd[3], cmd[2]);
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	3303      	adds	r3, #3
 8000f54:	781a      	ldrb	r2, [r3, #0]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	3302      	adds	r3, #2
 8000f5a:	781b      	ldrb	r3, [r3, #0]
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4610      	mov	r0, r2
 8000f60:	f7ff fb92 	bl	8000688 <erase_pixel>
}
 8000f64:	e092      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	3301      	adds	r3, #1
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	2b43      	cmp	r3, #67	; 0x43
 8000f6e:	d103      	bne.n	8000f78 <monitor_check_cmd+0x12c>
				auto_line_wrap(true);
 8000f70:	2001      	movs	r0, #1
 8000f72:	f7ff fa6d 	bl	8000450 <auto_line_wrap>
}
 8000f76:	e089      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	781b      	ldrb	r3, [r3, #0]
 8000f7e:	2b44      	cmp	r3, #68	; 0x44
 8000f80:	d103      	bne.n	8000f8a <monitor_check_cmd+0x13e>
				auto_line_wrap(false);
 8000f82:	2000      	movs	r0, #0
 8000f84:	f7ff fa64 	bl	8000450 <auto_line_wrap>
}
 8000f88:	e080      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_SET_INSERT) {
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b47      	cmp	r3, #71	; 0x47
 8000f92:	d10a      	bne.n	8000faa <monitor_check_cmd+0x15e>
			text_insertion_point(cmd[2], cmd[3]);
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	3302      	adds	r3, #2
 8000f98:	781a      	ldrb	r2, [r3, #0]
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	3303      	adds	r3, #3
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4610      	mov	r0, r2
 8000fa4:	f7ff fa64 	bl	8000470 <text_insertion_point>
}
 8000fa8:	e070      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_HOME_INSERT) {
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3301      	adds	r3, #1
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b48      	cmp	r3, #72	; 0x48
 8000fb2:	d104      	bne.n	8000fbe <monitor_check_cmd+0x172>
			text_insertion_point(0, 0);
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	2000      	movs	r0, #0
 8000fb8:	f7ff fa5a 	bl	8000470 <text_insertion_point>
}
 8000fbc:	e066      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_READ_GPI) {
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	2b65      	cmp	r3, #101	; 0x65
 8000fc6:	d114      	bne.n	8000ff2 <monitor_check_cmd+0x1a6>
			if(cmd[2] == '0'){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	3302      	adds	r3, #2
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	2b30      	cmp	r3, #48	; 0x30
 8000fd0:	d15c      	bne.n	800108c <monitor_check_cmd+0x240>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n",ddp[0],ddp[1]);
 8000fd2:	4b36      	ldr	r3, [pc, #216]	; (80010ac <monitor_check_cmd+0x260>)
 8000fd4:	781b      	ldrb	r3, [r3, #0]
 8000fd6:	461a      	mov	r2, r3
 8000fd8:	4b34      	ldr	r3, [pc, #208]	; (80010ac <monitor_check_cmd+0x260>)
 8000fda:	785b      	ldrb	r3, [r3, #1]
 8000fdc:	9300      	str	r3, [sp, #0]
 8000fde:	4613      	mov	r3, r2
 8000fe0:	4a33      	ldr	r2, [pc, #204]	; (80010b0 <monitor_check_cmd+0x264>)
 8000fe2:	2164      	movs	r1, #100	; 0x64
 8000fe4:	482d      	ldr	r0, [pc, #180]	; (800109c <monitor_check_cmd+0x250>)
 8000fe6:	f004 fd4b 	bl	8005a80 <sniprintf>
				monitor_send_string(ans);
 8000fea:	482c      	ldr	r0, [pc, #176]	; (800109c <monitor_check_cmd+0x250>)
 8000fec:	f7ff ff1a 	bl	8000e24 <monitor_send_string>
}
 8000ff0:	e04c      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	781b      	ldrb	r3, [r3, #0]
 8000ff8:	2b69      	cmp	r3, #105	; 0x69
 8000ffa:	d102      	bne.n	8001002 <monitor_check_cmd+0x1b6>
				disp_splash();
 8000ffc:	f7ff fbac 	bl	8000758 <disp_splash>
}
 8001000:	e044      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	3301      	adds	r3, #1
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	2b76      	cmp	r3, #118	; 0x76
 800100a:	d102      	bne.n	8001012 <monitor_check_cmd+0x1c6>
			 def_thick_v_bar();
 800100c:	f7ff fa5a 	bl	80004c4 <def_thick_v_bar>
}
 8001010:	e03c      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	3301      	adds	r3, #1
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b73      	cmp	r3, #115	; 0x73
 800101a:	d102      	bne.n	8001022 <monitor_check_cmd+0x1d6>
			 def_thin_v_bar();
 800101c:	f7ff fa5e 	bl	80004dc <def_thin_v_bar>
}
 8001020:	e034      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3301      	adds	r3, #1
 8001026:	781b      	ldrb	r3, [r3, #0]
 8001028:	2b3d      	cmp	r3, #61	; 0x3d
 800102a:	d10a      	bne.n	8001042 <monitor_check_cmd+0x1f6>
			 draw_v_bar_graph(cmd[2], cmd[3]);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	3302      	adds	r3, #2
 8001030:	781a      	ldrb	r2, [r3, #0]
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3303      	adds	r3, #3
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4619      	mov	r1, r3
 800103a:	4610      	mov	r0, r2
 800103c:	f7ff fa5a 	bl	80004f4 <draw_v_bar_graph>
}
 8001040:	e024      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	3301      	adds	r3, #1
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b3d      	cmp	r3, #61	; 0x3d
 800104a:	d10a      	bne.n	8001062 <monitor_check_cmd+0x216>
			erase_v_bar_graph(cmd[2], cmd[3]);
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	3302      	adds	r3, #2
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	3303      	adds	r3, #3
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	4619      	mov	r1, r3
 800105a:	4610      	mov	r0, r2
 800105c:	f7ff fa7e 	bl	800055c <erase_v_bar_graph>
}
 8001060:	e014      	b.n	800108c <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH ) {
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	3301      	adds	r3, #1
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	2b7c      	cmp	r3, #124	; 0x7c
 800106a:	d10f      	bne.n	800108c <monitor_check_cmd+0x240>
			 draw_h_bar_graph(cmd[2], cmd[3] ,cmd[4]);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3302      	adds	r3, #2
 8001070:	7818      	ldrb	r0, [r3, #0]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	3303      	adds	r3, #3
 8001076:	7819      	ldrb	r1, [r3, #0]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	3304      	adds	r3, #4
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	461a      	mov	r2, r3
 8001080:	f7ff faa0 	bl	80005c4 <draw_h_bar_graph>
}
 8001084:	e002      	b.n	800108c <monitor_check_cmd+0x240>
		lcd_print(cmd);
 8001086:	6878      	ldr	r0, [r7, #4]
 8001088:	f7ff fbe4 	bl	8000854 <lcd_print>
}
 800108c:	bf00      	nop
 800108e:	3708      	adds	r7, #8
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	080063f8 	.word	0x080063f8
 8001098:	08006400 	.word	0x08006400
 800109c:	200004a0 	.word	0x200004a0
 80010a0:	08006438 	.word	0x08006438
 80010a4:	0800643c 	.word	0x0800643c
 80010a8:	08006454 	.word	0x08006454
 80010ac:	2000022c 	.word	0x2000022c
 80010b0:	08006468 	.word	0x08006468

080010b4 <monitor_irq_handler>:

void monitor_irq_handler(void) {
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b084      	sub	sp, #16
 80010b8:	af00      	add	r7, sp, #0
	uint8_t c;
	uint32_t sr;
	USART_TypeDef *h = USART_PORT;
 80010ba:	4b29      	ldr	r3, [pc, #164]	; (8001160 <monitor_irq_handler+0xac>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	60bb      	str	r3, [r7, #8]

	sr = h->SR;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	60fb      	str	r3, [r7, #12]
	while (sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)) {
 80010c6:	e005      	b.n	80010d4 <monitor_irq_handler+0x20>
		sr = h->SR;
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	60fb      	str	r3, [r7, #12]
		c = h->DR;
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	685b      	ldr	r3, [r3, #4]
 80010d2:	71fb      	strb	r3, [r7, #7]
	while (sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)) {
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 030f 	and.w	r3, r3, #15
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d1f4      	bne.n	80010c8 <monitor_irq_handler+0x14>
	}

	if (sr & UART_FLAG_RXNE) {
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f003 0320 	and.w	r3, r3, #32
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d034      	beq.n	8001152 <monitor_irq_handler+0x9e>
		c = h->DR;
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	685b      	ldr	r3, [r3, #4]
 80010ec:	71fb      	strb	r3, [r7, #7]

		if (c == 253) {
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2bfd      	cmp	r3, #253	; 0xfd
 80010f2:	d10f      	bne.n	8001114 <monitor_irq_handler+0x60>
			cmd[size] = 253;
 80010f4:	4b1b      	ldr	r3, [pc, #108]	; (8001164 <monitor_irq_handler+0xb0>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a1b      	ldr	r2, [pc, #108]	; (8001168 <monitor_irq_handler+0xb4>)
 80010fa:	21fd      	movs	r1, #253	; 0xfd
 80010fc:	54d1      	strb	r1, [r2, r3]
			enQueue(Queue, c);
 80010fe:	4b1b      	ldr	r3, [pc, #108]	; (800116c <monitor_irq_handler+0xb8>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	79fa      	ldrb	r2, [r7, #7]
 8001104:	4611      	mov	r1, r2
 8001106:	4618      	mov	r0, r3
 8001108:	f7ff f975 	bl	80003f6 <enQueue>
			new_cmd = true;
 800110c:	4b18      	ldr	r3, [pc, #96]	; (8001170 <monitor_irq_handler+0xbc>)
 800110e:	2201      	movs	r2, #1
 8001110:	701a      	strb	r2, [r3, #0]
 8001112:	e01e      	b.n	8001152 <monitor_irq_handler+0x9e>
		}

		else if (!new_cmd) {
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <monitor_irq_handler+0xbc>)
 8001116:	781b      	ldrb	r3, [r3, #0]
 8001118:	f083 0301 	eor.w	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	2b00      	cmp	r3, #0
 8001120:	d017      	beq.n	8001152 <monitor_irq_handler+0x9e>
			cmd[size] = c;
 8001122:	4b10      	ldr	r3, [pc, #64]	; (8001164 <monitor_irq_handler+0xb0>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	4910      	ldr	r1, [pc, #64]	; (8001168 <monitor_irq_handler+0xb4>)
 8001128:	79fa      	ldrb	r2, [r7, #7]
 800112a:	54ca      	strb	r2, [r1, r3]
			enQueue(Queue, c);
 800112c:	4b0f      	ldr	r3, [pc, #60]	; (800116c <monitor_irq_handler+0xb8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	79fa      	ldrb	r2, [r7, #7]
 8001132:	4611      	mov	r1, r2
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff f95e 	bl	80003f6 <enQueue>
			size++;
 800113a:	4b0a      	ldr	r3, [pc, #40]	; (8001164 <monitor_irq_handler+0xb0>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	3301      	adds	r3, #1
 8001140:	4a08      	ldr	r2, [pc, #32]	; (8001164 <monitor_irq_handler+0xb0>)
 8001142:	6013      	str	r3, [r2, #0]

			if (size >= CMD_BUF_SIZE)
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <monitor_irq_handler+0xb0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b63      	cmp	r3, #99	; 0x63
 800114a:	d902      	bls.n	8001152 <monitor_irq_handler+0x9e>
				size = 0;
 800114c:	4b05      	ldr	r3, [pc, #20]	; (8001164 <monitor_irq_handler+0xb0>)
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
		}
	}
	monitor_interrupt();
 8001152:	f000 f80f 	bl	8001174 <monitor_interrupt>
}
 8001156:	bf00      	nop
 8001158:	3710      	adds	r7, #16
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	200003f8 	.word	0x200003f8
 8001164:	20000508 	.word	0x20000508
 8001168:	2000043c 	.word	0x2000043c
 800116c:	20000504 	.word	0x20000504
 8001170:	2000050c 	.word	0x2000050c

08001174 <monitor_interrupt>:

monitor_interrupt(){
 8001174:	b580      	push	{r7, lr}
 8001176:	af00      	add	r7, sp, #0
	if (new_cmd) {
 8001178:	4b08      	ldr	r3, [pc, #32]	; (800119c <monitor_interrupt+0x28>)
 800117a:	781b      	ldrb	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d00b      	beq.n	8001198 <monitor_interrupt+0x24>
		monitor_check_cmd((char*) cmd, size);
 8001180:	4b07      	ldr	r3, [pc, #28]	; (80011a0 <monitor_interrupt+0x2c>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4619      	mov	r1, r3
 8001186:	4807      	ldr	r0, [pc, #28]	; (80011a4 <monitor_interrupt+0x30>)
 8001188:	f7ff fe60 	bl	8000e4c <monitor_check_cmd>
		size = 0;
 800118c:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <monitor_interrupt+0x2c>)
 800118e:	2200      	movs	r2, #0
 8001190:	601a      	str	r2, [r3, #0]
		new_cmd = false;
 8001192:	4b02      	ldr	r3, [pc, #8]	; (800119c <monitor_interrupt+0x28>)
 8001194:	2200      	movs	r2, #0
 8001196:	701a      	strb	r2, [r3, #0]
	}
}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	2000050c 	.word	0x2000050c
 80011a0:	20000508 	.word	0x20000508
 80011a4:	2000043c 	.word	0x2000043c

080011a8 <serial_begin>:

void serial_begin(void) {
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
	size = 0;
 80011ac:	4b1d      	ldr	r3, [pc, #116]	; (8001224 <serial_begin+0x7c>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 80011b2:	4b1d      	ldr	r3, [pc, #116]	; (8001228 <serial_begin+0x80>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
	Queue =  createQueue(CMD_BUF_SIZE);
 80011b8:	2064      	movs	r0, #100	; 0x64
 80011ba:	f7ff f8bf 	bl	800033c <createQueue>
 80011be:	4603      	mov	r3, r0
 80011c0:	4a1a      	ldr	r2, [pc, #104]	; (800122c <serial_begin+0x84>)
 80011c2:	6013      	str	r3, [r2, #0]

	clear_display();
 80011c4:	f7ff fa92 	bl	80006ec <clear_display>
	test_font();
 80011c8:	f7ff fb36 	bl	8000838 <test_font>
	clear_display();
 80011cc:	f7ff fa8e 	bl	80006ec <clear_display>
	put_cursor();
 80011d0:	f7ff fb24 	bl	800081c <put_cursor>

	// enabling interrupts for errors
	//   (Frame error, noise error, overrun error)
	huart1.Instance->CR3 |= USART_CR3_EIE;
 80011d4:	4b16      	ldr	r3, [pc, #88]	; (8001230 <serial_begin+0x88>)
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	695a      	ldr	r2, [r3, #20]
 80011da:	4b15      	ldr	r3, [pc, #84]	; (8001230 <serial_begin+0x88>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f042 0201 	orr.w	r2, r2, #1
 80011e2:	615a      	str	r2, [r3, #20]
	// enabling interrupt for parity errors and rx
	huart1.Instance->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 80011e4:	4b12      	ldr	r3, [pc, #72]	; (8001230 <serial_begin+0x88>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	68da      	ldr	r2, [r3, #12]
 80011ea:	4b11      	ldr	r3, [pc, #68]	; (8001230 <serial_begin+0x88>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80011f2:	60da      	str	r2, [r3, #12]

	HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2102      	movs	r1, #2
 80011f8:	2025      	movs	r0, #37	; 0x25
 80011fa:	f002 fdac 	bl	8003d56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011fe:	2025      	movs	r0, #37	; 0x25
 8001200:	f002 fdc5 	bl	8003d8e <HAL_NVIC_EnableIRQ>
	HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 8001204:	2025      	movs	r0, #37	; 0x25
 8001206:	f002 fdea 	bl	8003dde <HAL_NVIC_ClearPendingIRQ>

	//mensagem de inicialização
	snprintf((char*) ans, CMD_BUF_SIZE, "hora do show!\r\n");
 800120a:	4a0a      	ldr	r2, [pc, #40]	; (8001234 <serial_begin+0x8c>)
 800120c:	2164      	movs	r1, #100	; 0x64
 800120e:	480a      	ldr	r0, [pc, #40]	; (8001238 <serial_begin+0x90>)
 8001210:	f004 fc36 	bl	8005a80 <sniprintf>
	monitor_send_string(ans);
 8001214:	4808      	ldr	r0, [pc, #32]	; (8001238 <serial_begin+0x90>)
 8001216:	f7ff fe05 	bl	8000e24 <monitor_send_string>

	monitor_interrupt();
 800121a:	f7ff ffab 	bl	8001174 <monitor_interrupt>
}
 800121e:	bf00      	nop
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	20000508 	.word	0x20000508
 8001228:	2000050c 	.word	0x2000050c
 800122c:	20000504 	.word	0x20000504
 8001230:	200003f8 	.word	0x200003f8
 8001234:	08006474 	.word	0x08006474
 8001238:	200004a0 	.word	0x200004a0

0800123c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b084      	sub	sp, #16
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001242:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_MspInit+0x7c>)
 8001244:	699b      	ldr	r3, [r3, #24]
 8001246:	4a1c      	ldr	r2, [pc, #112]	; (80012b8 <HAL_MspInit+0x7c>)
 8001248:	f043 0301 	orr.w	r3, r3, #1
 800124c:	6193      	str	r3, [r2, #24]
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <HAL_MspInit+0x7c>)
 8001250:	699b      	ldr	r3, [r3, #24]
 8001252:	f003 0301 	and.w	r3, r3, #1
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800125a:	4b17      	ldr	r3, [pc, #92]	; (80012b8 <HAL_MspInit+0x7c>)
 800125c:	69db      	ldr	r3, [r3, #28]
 800125e:	4a16      	ldr	r2, [pc, #88]	; (80012b8 <HAL_MspInit+0x7c>)
 8001260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001264:	61d3      	str	r3, [r2, #28]
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <HAL_MspInit+0x7c>)
 8001268:	69db      	ldr	r3, [r3, #28]
 800126a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800126e:	607b      	str	r3, [r7, #4]
 8001270:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001272:	2200      	movs	r2, #0
 8001274:	2100      	movs	r1, #0
 8001276:	2005      	movs	r0, #5
 8001278:	f002 fd6d 	bl	8003d56 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800127c:	2005      	movs	r0, #5
 800127e:	f002 fd86 	bl	8003d8e <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001282:	2200      	movs	r2, #0
 8001284:	2100      	movs	r1, #0
 8001286:	2005      	movs	r0, #5
 8001288:	f002 fd65 	bl	8003d56 <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800128c:	2005      	movs	r0, #5
 800128e:	f002 fd7e 	bl	8003d8e <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001292:	4b0a      	ldr	r3, [pc, #40]	; (80012bc <HAL_MspInit+0x80>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	60fb      	str	r3, [r7, #12]
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800129e:	60fb      	str	r3, [r7, #12]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012a6:	60fb      	str	r3, [r7, #12]
 80012a8:	4a04      	ldr	r2, [pc, #16]	; (80012bc <HAL_MspInit+0x80>)
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80012ae:	bf00      	nop
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	40021000 	.word	0x40021000
 80012bc:	40010000 	.word	0x40010000

080012c0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b088      	sub	sp, #32
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c8:	f107 0310 	add.w	r3, r7, #16
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
 80012d2:	609a      	str	r2, [r3, #8]
 80012d4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a15      	ldr	r2, [pc, #84]	; (8001330 <HAL_SPI_MspInit+0x70>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d123      	bne.n	8001328 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e0:	4b14      	ldr	r3, [pc, #80]	; (8001334 <HAL_SPI_MspInit+0x74>)
 80012e2:	699b      	ldr	r3, [r3, #24]
 80012e4:	4a13      	ldr	r2, [pc, #76]	; (8001334 <HAL_SPI_MspInit+0x74>)
 80012e6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012ea:	6193      	str	r3, [r2, #24]
 80012ec:	4b11      	ldr	r3, [pc, #68]	; (8001334 <HAL_SPI_MspInit+0x74>)
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f8:	4b0e      	ldr	r3, [pc, #56]	; (8001334 <HAL_SPI_MspInit+0x74>)
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	4a0d      	ldr	r2, [pc, #52]	; (8001334 <HAL_SPI_MspInit+0x74>)
 80012fe:	f043 0304 	orr.w	r3, r3, #4
 8001302:	6193      	str	r3, [r2, #24]
 8001304:	4b0b      	ldr	r3, [pc, #44]	; (8001334 <HAL_SPI_MspInit+0x74>)
 8001306:	699b      	ldr	r3, [r3, #24]
 8001308:	f003 0304 	and.w	r3, r3, #4
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001310:	23a0      	movs	r3, #160	; 0xa0
 8001312:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800131c:	f107 0310 	add.w	r3, r7, #16
 8001320:	4619      	mov	r1, r3
 8001322:	4805      	ldr	r0, [pc, #20]	; (8001338 <HAL_SPI_MspInit+0x78>)
 8001324:	f002 fd6a 	bl	8003dfc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001328:	bf00      	nop
 800132a:	3720      	adds	r7, #32
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40013000 	.word	0x40013000
 8001334:	40021000 	.word	0x40021000
 8001338:	40010800 	.word	0x40010800

0800133c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b084      	sub	sp, #16
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800134c:	d113      	bne.n	8001376 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800134e:	4b0c      	ldr	r3, [pc, #48]	; (8001380 <HAL_TIM_Base_MspInit+0x44>)
 8001350:	69db      	ldr	r3, [r3, #28]
 8001352:	4a0b      	ldr	r2, [pc, #44]	; (8001380 <HAL_TIM_Base_MspInit+0x44>)
 8001354:	f043 0301 	orr.w	r3, r3, #1
 8001358:	61d3      	str	r3, [r2, #28]
 800135a:	4b09      	ldr	r3, [pc, #36]	; (8001380 <HAL_TIM_Base_MspInit+0x44>)
 800135c:	69db      	ldr	r3, [r3, #28]
 800135e:	f003 0301 	and.w	r3, r3, #1
 8001362:	60fb      	str	r3, [r7, #12]
 8001364:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001366:	2200      	movs	r2, #0
 8001368:	2100      	movs	r1, #0
 800136a:	201c      	movs	r0, #28
 800136c:	f002 fcf3 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001370:	201c      	movs	r0, #28
 8001372:	f002 fd0c 	bl	8003d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001376:	bf00      	nop
 8001378:	3710      	adds	r7, #16
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	40021000 	.word	0x40021000

08001384 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b088      	sub	sp, #32
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	f107 0310 	add.w	r3, r7, #16
 8001390:	2200      	movs	r2, #0
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	605a      	str	r2, [r3, #4]
 8001396:	609a      	str	r2, [r3, #8]
 8001398:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a20      	ldr	r2, [pc, #128]	; (8001420 <HAL_UART_MspInit+0x9c>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d139      	bne.n	8001418 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80013a4:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <HAL_UART_MspInit+0xa0>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <HAL_UART_MspInit+0xa0>)
 80013aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <HAL_UART_MspInit+0xa0>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013b8:	60fb      	str	r3, [r7, #12]
 80013ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013bc:	4b19      	ldr	r3, [pc, #100]	; (8001424 <HAL_UART_MspInit+0xa0>)
 80013be:	699b      	ldr	r3, [r3, #24]
 80013c0:	4a18      	ldr	r2, [pc, #96]	; (8001424 <HAL_UART_MspInit+0xa0>)
 80013c2:	f043 0304 	orr.w	r3, r3, #4
 80013c6:	6193      	str	r3, [r2, #24]
 80013c8:	4b16      	ldr	r3, [pc, #88]	; (8001424 <HAL_UART_MspInit+0xa0>)
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	f003 0304 	and.w	r3, r3, #4
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80013d4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013da:	2302      	movs	r3, #2
 80013dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80013de:	2303      	movs	r3, #3
 80013e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	4619      	mov	r1, r3
 80013e8:	480f      	ldr	r0, [pc, #60]	; (8001428 <HAL_UART_MspInit+0xa4>)
 80013ea:	f002 fd07 	bl	8003dfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013f2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f8:	2300      	movs	r3, #0
 80013fa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013fc:	f107 0310 	add.w	r3, r7, #16
 8001400:	4619      	mov	r1, r3
 8001402:	4809      	ldr	r0, [pc, #36]	; (8001428 <HAL_UART_MspInit+0xa4>)
 8001404:	f002 fcfa 	bl	8003dfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001408:	2200      	movs	r2, #0
 800140a:	2100      	movs	r1, #0
 800140c:	2025      	movs	r0, #37	; 0x25
 800140e:	f002 fca2 	bl	8003d56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001412:	2025      	movs	r0, #37	; 0x25
 8001414:	f002 fcbb 	bl	8003d8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001418:	bf00      	nop
 800141a:	3720      	adds	r7, #32
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	40013800 	.word	0x40013800
 8001424:	40021000 	.word	0x40021000
 8001428:	40010800 	.word	0x40010800

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <NMI_Handler+0x4>

08001432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <MemManage_Handler+0x4>

0800143e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <BusFault_Handler+0x4>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <UsageFault_Handler+0x4>

0800144a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	bc80      	pop	{r7}
 8001454:	4770      	bx	lr

08001456 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	bc80      	pop	{r7}
 8001460:	4770      	bx	lr

08001462 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001466:	bf00      	nop
 8001468:	46bd      	mov	sp, r7
 800146a:	bc80      	pop	{r7}
 800146c:	4770      	bx	lr

0800146e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//SystickCallback();
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001472:	f002 fb17 	bl	8003aa4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001476:	bf00      	nop
 8001478:	bd80      	pop	{r7, pc}

0800147a <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	bc80      	pop	{r7}
 8001484:	4770      	bx	lr

08001486 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8001486:	b580      	push	{r7, lr}
 8001488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 800148a:	2010      	movs	r0, #16
 800148c:	f002 fe64 	bl	8004158 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001490:	bf00      	nop
 8001492:	bd80      	pop	{r7, pc}

08001494 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001498:	4802      	ldr	r0, [pc, #8]	; (80014a4 <TIM2_IRQHandler+0x10>)
 800149a:	f003 fdbf 	bl	800501c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800149e:	bf00      	nop
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	200003b0 	.word	0x200003b0

080014a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	af00      	add	r7, sp, #0
if(0){
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
}
  monitor_irq_handler();
 80014ac:	f7ff fe02 	bl	80010b4 <monitor_irq_handler>
  /* USER CODE END USART1_IRQn 1 */
}
 80014b0:	bf00      	nop
 80014b2:	bd80      	pop	{r7, pc}

080014b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b086      	sub	sp, #24
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80014bc:	4a14      	ldr	r2, [pc, #80]	; (8001510 <_sbrk+0x5c>)
 80014be:	4b15      	ldr	r3, [pc, #84]	; (8001514 <_sbrk+0x60>)
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014c8:	4b13      	ldr	r3, [pc, #76]	; (8001518 <_sbrk+0x64>)
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d102      	bne.n	80014d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014d0:	4b11      	ldr	r3, [pc, #68]	; (8001518 <_sbrk+0x64>)
 80014d2:	4a12      	ldr	r2, [pc, #72]	; (800151c <_sbrk+0x68>)
 80014d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014d6:	4b10      	ldr	r3, [pc, #64]	; (8001518 <_sbrk+0x64>)
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	4413      	add	r3, r2
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d207      	bcs.n	80014f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014e4:	f004 fa9a 	bl	8005a1c <__errno>
 80014e8:	4603      	mov	r3, r0
 80014ea:	220c      	movs	r2, #12
 80014ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014f2:	e009      	b.n	8001508 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014f4:	4b08      	ldr	r3, [pc, #32]	; (8001518 <_sbrk+0x64>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014fa:	4b07      	ldr	r3, [pc, #28]	; (8001518 <_sbrk+0x64>)
 80014fc:	681a      	ldr	r2, [r3, #0]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	4413      	add	r3, r2
 8001502:	4a05      	ldr	r2, [pc, #20]	; (8001518 <_sbrk+0x64>)
 8001504:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001506:	68fb      	ldr	r3, [r7, #12]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}
 8001510:	20002800 	.word	0x20002800
 8001514:	00000400 	.word	0x00000400
 8001518:	20000510 	.word	0x20000510
 800151c:	20000b28 	.word	0x20000b28

08001520 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001524:	bf00      	nop
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr

0800152c <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	460b      	mov	r3, r1
 8001536:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	78fa      	ldrb	r2, [r7, #3]
 800153c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	bc80      	pop	{r7}
 8001548:	4770      	bx	lr

0800154a <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	b088      	sub	sp, #32
 800154e:	af02      	add	r7, sp, #8
 8001550:	60f8      	str	r0, [r7, #12]
 8001552:	4608      	mov	r0, r1
 8001554:	4611      	mov	r1, r2
 8001556:	461a      	mov	r2, r3
 8001558:	4603      	mov	r3, r0
 800155a:	817b      	strh	r3, [r7, #10]
 800155c:	460b      	mov	r3, r1
 800155e:	813b      	strh	r3, [r7, #8]
 8001560:	4613      	mov	r3, r2
 8001562:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800156a:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 800156c:	7dbb      	ldrb	r3, [r7, #22]
 800156e:	2b00      	cmp	r3, #0
 8001570:	bf0c      	ite	eq
 8001572:	2301      	moveq	r3, #1
 8001574:	2300      	movne	r3, #0
 8001576:	b2db      	uxtb	r3, r3
 8001578:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 800157a:	897a      	ldrh	r2, [r7, #10]
 800157c:	88fb      	ldrh	r3, [r7, #6]
 800157e:	4413      	add	r3, r2
 8001580:	b298      	uxth	r0, r3
 8001582:	893b      	ldrh	r3, [r7, #8]
 8001584:	3301      	adds	r3, #1
 8001586:	b29b      	uxth	r3, r3
 8001588:	893a      	ldrh	r2, [r7, #8]
 800158a:	8979      	ldrh	r1, [r7, #10]
 800158c:	9300      	str	r3, [sp, #0]
 800158e:	4603      	mov	r3, r0
 8001590:	68f8      	ldr	r0, [r7, #12]
 8001592:	f001 fbc8 	bl	8002d26 <u8g2_IsIntersection>
 8001596:	4603      	mov	r3, r0
 8001598:	2b00      	cmp	r3, #0
 800159a:	d040      	beq.n	800161e <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 800159c:	2301      	movs	r3, #1
 800159e:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 80015a0:	e035      	b.n	800160e <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 80015a2:	6a3b      	ldr	r3, [r7, #32]
 80015a4:	781a      	ldrb	r2, [r3, #0]
 80015a6:	7dfb      	ldrb	r3, [r7, #23]
 80015a8:	4013      	ands	r3, r2
 80015aa:	b2db      	uxtb	r3, r3
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d00c      	beq.n	80015ca <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	7dba      	ldrb	r2, [r7, #22]
 80015b4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80015b8:	893a      	ldrh	r2, [r7, #8]
 80015ba:	8979      	ldrh	r1, [r7, #10]
 80015bc:	2300      	movs	r3, #0
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	2301      	movs	r3, #1
 80015c2:	68f8      	ldr	r0, [r7, #12]
 80015c4:	f001 fa76 	bl	8002ab4 <u8g2_DrawHVLine>
 80015c8:	e010      	b.n	80015ec <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10b      	bne.n	80015ec <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	7d7a      	ldrb	r2, [r7, #21]
 80015d8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 80015dc:	893a      	ldrh	r2, [r7, #8]
 80015de:	8979      	ldrh	r1, [r7, #10]
 80015e0:	2300      	movs	r3, #0
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2301      	movs	r3, #1
 80015e6:	68f8      	ldr	r0, [r7, #12]
 80015e8:	f001 fa64 	bl	8002ab4 <u8g2_DrawHVLine>
    }
    x++;
 80015ec:	897b      	ldrh	r3, [r7, #10]
 80015ee:	3301      	adds	r3, #1
 80015f0:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 80015f2:	7dfb      	ldrb	r3, [r7, #23]
 80015f4:	005b      	lsls	r3, r3, #1
 80015f6:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 80015f8:	7dfb      	ldrb	r3, [r7, #23]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d104      	bne.n	8001608 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 80015fe:	2301      	movs	r3, #1
 8001600:	75fb      	strb	r3, [r7, #23]
      b++;
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	3301      	adds	r3, #1
 8001606:	623b      	str	r3, [r7, #32]
    }
    len--;
 8001608:	88fb      	ldrh	r3, [r7, #6]
 800160a:	3b01      	subs	r3, #1
 800160c:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 800160e:	88fb      	ldrh	r3, [r7, #6]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1c6      	bne.n	80015a2 <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	7dba      	ldrb	r2, [r7, #22]
 8001618:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 800161c:	e000      	b.n	8001620 <u8g2_DrawHXBM+0xd6>
    return;
 800161e:	bf00      	nop
}
 8001620:	3718      	adds	r7, #24
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b088      	sub	sp, #32
 800162a:	af02      	add	r7, sp, #8
 800162c:	60f8      	str	r0, [r7, #12]
 800162e:	4608      	mov	r0, r1
 8001630:	4611      	mov	r1, r2
 8001632:	461a      	mov	r2, r3
 8001634:	4603      	mov	r3, r0
 8001636:	817b      	strh	r3, [r7, #10]
 8001638:	460b      	mov	r3, r1
 800163a:	813b      	strh	r3, [r7, #8]
 800163c:	4613      	mov	r3, r2
 800163e:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 8001640:	88fb      	ldrh	r3, [r7, #6]
 8001642:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 8001644:	8afb      	ldrh	r3, [r7, #22]
 8001646:	3307      	adds	r3, #7
 8001648:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 800164a:	8afb      	ldrh	r3, [r7, #22]
 800164c:	08db      	lsrs	r3, r3, #3
 800164e:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001650:	897a      	ldrh	r2, [r7, #10]
 8001652:	88fb      	ldrh	r3, [r7, #6]
 8001654:	4413      	add	r3, r2
 8001656:	b298      	uxth	r0, r3
 8001658:	893a      	ldrh	r2, [r7, #8]
 800165a:	8c3b      	ldrh	r3, [r7, #32]
 800165c:	4413      	add	r3, r2
 800165e:	b29b      	uxth	r3, r3
 8001660:	893a      	ldrh	r2, [r7, #8]
 8001662:	8979      	ldrh	r1, [r7, #10]
 8001664:	9300      	str	r3, [sp, #0]
 8001666:	4603      	mov	r3, r0
 8001668:	68f8      	ldr	r0, [r7, #12]
 800166a:	f001 fb5c 	bl	8002d26 <u8g2_IsIntersection>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d017      	beq.n	80016a4 <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 8001674:	e012      	b.n	800169c <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 8001676:	88f8      	ldrh	r0, [r7, #6]
 8001678:	893a      	ldrh	r2, [r7, #8]
 800167a:	8979      	ldrh	r1, [r7, #10]
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	4603      	mov	r3, r0
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f7ff ff61 	bl	800154a <u8g2_DrawHXBM>
    bitmap += blen;
 8001688:	8afb      	ldrh	r3, [r7, #22]
 800168a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800168c:	4413      	add	r3, r2
 800168e:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8001690:	893b      	ldrh	r3, [r7, #8]
 8001692:	3301      	adds	r3, #1
 8001694:	813b      	strh	r3, [r7, #8]
    h--;
 8001696:	8c3b      	ldrh	r3, [r7, #32]
 8001698:	3b01      	subs	r3, #1
 800169a:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 800169c:	8c3b      	ldrh	r3, [r7, #32]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d1e9      	bne.n	8001676 <u8g2_DrawXBM+0x50>
 80016a2:	e000      	b.n	80016a6 <u8g2_DrawXBM+0x80>
    return;
 80016a4:	bf00      	nop
  }
}
 80016a6:	3718      	adds	r7, #24
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}

080016ac <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b086      	sub	sp, #24
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	4608      	mov	r0, r1
 80016b6:	4611      	mov	r1, r2
 80016b8:	461a      	mov	r2, r3
 80016ba:	4603      	mov	r3, r0
 80016bc:	817b      	strh	r3, [r7, #10]
 80016be:	460b      	mov	r3, r1
 80016c0:	813b      	strh	r3, [r7, #8]
 80016c2:	4613      	mov	r3, r2
 80016c4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80016c6:	897a      	ldrh	r2, [r7, #10]
 80016c8:	88fb      	ldrh	r3, [r7, #6]
 80016ca:	4413      	add	r3, r2
 80016cc:	b298      	uxth	r0, r3
 80016ce:	893a      	ldrh	r2, [r7, #8]
 80016d0:	8b3b      	ldrh	r3, [r7, #24]
 80016d2:	4413      	add	r3, r2
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	893a      	ldrh	r2, [r7, #8]
 80016d8:	8979      	ldrh	r1, [r7, #10]
 80016da:	9300      	str	r3, [sp, #0]
 80016dc:	4603      	mov	r3, r0
 80016de:	68f8      	ldr	r0, [r7, #12]
 80016e0:	f001 fb21 	bl	8002d26 <u8g2_IsIntersection>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d012      	beq.n	8001710 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80016ea:	e00d      	b.n	8001708 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80016ec:	88fb      	ldrh	r3, [r7, #6]
 80016ee:	893a      	ldrh	r2, [r7, #8]
 80016f0:	8979      	ldrh	r1, [r7, #10]
 80016f2:	2000      	movs	r0, #0
 80016f4:	9000      	str	r0, [sp, #0]
 80016f6:	68f8      	ldr	r0, [r7, #12]
 80016f8:	f001 f9dc 	bl	8002ab4 <u8g2_DrawHVLine>
    y++;    
 80016fc:	893b      	ldrh	r3, [r7, #8]
 80016fe:	3301      	adds	r3, #1
 8001700:	813b      	strh	r3, [r7, #8]
    h--;
 8001702:	8b3b      	ldrh	r3, [r7, #24]
 8001704:	3b01      	subs	r3, #1
 8001706:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8001708:	8b3b      	ldrh	r3, [r7, #24]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d1ee      	bne.n	80016ec <u8g2_DrawBox+0x40>
 800170e:	e000      	b.n	8001712 <u8g2_DrawBox+0x66>
    return;
 8001710:	bf00      	nop
  }
}
 8001712:	3710      	adds	r7, #16
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}

08001718 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	b088      	sub	sp, #32
 800171c:	af02      	add	r7, sp, #8
 800171e:	60f8      	str	r0, [r7, #12]
 8001720:	4608      	mov	r0, r1
 8001722:	4611      	mov	r1, r2
 8001724:	461a      	mov	r2, r3
 8001726:	4603      	mov	r3, r0
 8001728:	817b      	strh	r3, [r7, #10]
 800172a:	460b      	mov	r3, r1
 800172c:	813b      	strh	r3, [r7, #8]
 800172e:	4613      	mov	r3, r2
 8001730:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8001732:	897b      	ldrh	r3, [r7, #10]
 8001734:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001736:	897a      	ldrh	r2, [r7, #10]
 8001738:	88fb      	ldrh	r3, [r7, #6]
 800173a:	4413      	add	r3, r2
 800173c:	b298      	uxth	r0, r3
 800173e:	893a      	ldrh	r2, [r7, #8]
 8001740:	8c3b      	ldrh	r3, [r7, #32]
 8001742:	4413      	add	r3, r2
 8001744:	b29b      	uxth	r3, r3
 8001746:	893a      	ldrh	r2, [r7, #8]
 8001748:	8979      	ldrh	r1, [r7, #10]
 800174a:	9300      	str	r3, [sp, #0]
 800174c:	4603      	mov	r3, r0
 800174e:	68f8      	ldr	r0, [r7, #12]
 8001750:	f001 fae9 	bl	8002d26 <u8g2_IsIntersection>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d037      	beq.n	80017ca <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800175a:	88fb      	ldrh	r3, [r7, #6]
 800175c:	893a      	ldrh	r2, [r7, #8]
 800175e:	8979      	ldrh	r1, [r7, #10]
 8001760:	2000      	movs	r0, #0
 8001762:	9000      	str	r0, [sp, #0]
 8001764:	68f8      	ldr	r0, [r7, #12]
 8001766:	f001 f9a5 	bl	8002ab4 <u8g2_DrawHVLine>
  if (h >= 2) {
 800176a:	8c3b      	ldrh	r3, [r7, #32]
 800176c:	2b01      	cmp	r3, #1
 800176e:	d92d      	bls.n	80017cc <u8g2_DrawFrame+0xb4>
    h-=2;
 8001770:	8c3b      	ldrh	r3, [r7, #32]
 8001772:	3b02      	subs	r3, #2
 8001774:	843b      	strh	r3, [r7, #32]
    y++;
 8001776:	893b      	ldrh	r3, [r7, #8]
 8001778:	3301      	adds	r3, #1
 800177a:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 800177c:	8c3b      	ldrh	r3, [r7, #32]
 800177e:	2b00      	cmp	r3, #0
 8001780:	d01a      	beq.n	80017b8 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001782:	8c3b      	ldrh	r3, [r7, #32]
 8001784:	893a      	ldrh	r2, [r7, #8]
 8001786:	8979      	ldrh	r1, [r7, #10]
 8001788:	2001      	movs	r0, #1
 800178a:	9000      	str	r0, [sp, #0]
 800178c:	68f8      	ldr	r0, [r7, #12]
 800178e:	f001 f991 	bl	8002ab4 <u8g2_DrawHVLine>
      x+=w;
 8001792:	897a      	ldrh	r2, [r7, #10]
 8001794:	88fb      	ldrh	r3, [r7, #6]
 8001796:	4413      	add	r3, r2
 8001798:	817b      	strh	r3, [r7, #10]
      x--;
 800179a:	897b      	ldrh	r3, [r7, #10]
 800179c:	3b01      	subs	r3, #1
 800179e:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80017a0:	8c3b      	ldrh	r3, [r7, #32]
 80017a2:	893a      	ldrh	r2, [r7, #8]
 80017a4:	8979      	ldrh	r1, [r7, #10]
 80017a6:	2001      	movs	r0, #1
 80017a8:	9000      	str	r0, [sp, #0]
 80017aa:	68f8      	ldr	r0, [r7, #12]
 80017ac:	f001 f982 	bl	8002ab4 <u8g2_DrawHVLine>
      y+=h;
 80017b0:	893a      	ldrh	r2, [r7, #8]
 80017b2:	8c3b      	ldrh	r3, [r7, #32]
 80017b4:	4413      	add	r3, r2
 80017b6:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80017b8:	88fb      	ldrh	r3, [r7, #6]
 80017ba:	893a      	ldrh	r2, [r7, #8]
 80017bc:	8af9      	ldrh	r1, [r7, #22]
 80017be:	2000      	movs	r0, #0
 80017c0:	9000      	str	r0, [sp, #0]
 80017c2:	68f8      	ldr	r0, [r7, #12]
 80017c4:	f001 f976 	bl	8002ab4 <u8g2_DrawHVLine>
 80017c8:	e000      	b.n	80017cc <u8g2_DrawFrame+0xb4>
    return;
 80017ca:	bf00      	nop
  }
}
 80017cc:	3718      	adds	r7, #24
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}

080017d2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80017d2:	b580      	push	{r7, lr}
 80017d4:	b084      	sub	sp, #16
 80017d6:	af00      	add	r7, sp, #0
 80017d8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	7c1b      	ldrb	r3, [r3, #16]
 80017e0:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017e8:	461a      	mov	r2, r3
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	fb02 f303 	mul.w	r3, r2, r3
 80017f0:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	00db      	lsls	r3, r3, #3
 80017f6:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	2100      	movs	r1, #0
 8001800:	4618      	mov	r0, r3
 8001802:	f004 f935 	bl	8005a70 <memset>
}
 8001806:	bf00      	nop
 8001808:	3710      	adds	r7, #16
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800180e:	b580      	push	{r7, lr}
 8001810:	b086      	sub	sp, #24
 8001812:	af02      	add	r7, sp, #8
 8001814:	6078      	str	r0, [r7, #4]
 8001816:	460b      	mov	r3, r1
 8001818:	70fb      	strb	r3, [r7, #3]
 800181a:	4613      	mov	r3, r2
 800181c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	7c1b      	ldrb	r3, [r3, #16]
 8001824:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001826:	78fb      	ldrb	r3, [r7, #3]
 8001828:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800182e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001830:	7bfb      	ldrb	r3, [r7, #15]
 8001832:	b29b      	uxth	r3, r3
 8001834:	89ba      	ldrh	r2, [r7, #12]
 8001836:	fb02 f303 	mul.w	r3, r2, r3
 800183a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800183c:	89bb      	ldrh	r3, [r7, #12]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001842:	89bb      	ldrh	r3, [r7, #12]
 8001844:	68ba      	ldr	r2, [r7, #8]
 8001846:	4413      	add	r3, r2
 8001848:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800184a:	7bf9      	ldrb	r1, [r7, #15]
 800184c:	78ba      	ldrb	r2, [r7, #2]
 800184e:	68bb      	ldr	r3, [r7, #8]
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	460b      	mov	r3, r1
 8001854:	2100      	movs	r1, #0
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f001 ffd8 	bl	800380c <u8x8_DrawTile>
}
 800185c:	bf00      	nop
 800185e:	3710      	adds	r7, #16
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b084      	sub	sp, #16
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800186c:	2300      	movs	r3, #0
 800186e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001876:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800187e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	7c5b      	ldrb	r3, [r3, #17]
 8001886:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001888:	7bba      	ldrb	r2, [r7, #14]
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	4619      	mov	r1, r3
 800188e:	6878      	ldr	r0, [r7, #4]
 8001890:	f7ff ffbd 	bl	800180e <u8g2_send_tile_row>
    src_row++;
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	3301      	adds	r3, #1
 8001898:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800189a:	7bbb      	ldrb	r3, [r7, #14]
 800189c:	3301      	adds	r3, #1
 800189e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	7b7b      	ldrb	r3, [r7, #13]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d203      	bcs.n	80018b0 <u8g2_send_buffer+0x4c>
 80018a8:	7bba      	ldrb	r2, [r7, #14]
 80018aa:	7b3b      	ldrb	r3, [r7, #12]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d3eb      	bcc.n	8001888 <u8g2_send_buffer+0x24>
}
 80018b0:	bf00      	nop
 80018b2:	3710      	adds	r7, #16
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80018c0:	6878      	ldr	r0, [r7, #4]
 80018c2:	f7ff ffcf 	bl	8001864 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80018c6:	6878      	ldr	r0, [r7, #4]
 80018c8:	f002 f802 	bl	80038d0 <u8x8_RefreshDisplay>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	460b      	mov	r3, r1
 80018de:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	78fa      	ldrb	r2, [r7, #3]
 80018e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	6878      	ldr	r0, [r7, #4]
 80018f0:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	6878      	ldr	r0, [r7, #4]
 80018fa:	4798      	blx	r3
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001912:	2b00      	cmp	r3, #0
 8001914:	d002      	beq.n	800191c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001916:	6878      	ldr	r0, [r7, #4]
 8001918:	f7ff ff5b 	bl	80017d2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800191c:	2100      	movs	r1, #0
 800191e:	6878      	ldr	r0, [r7, #4]
 8001920:	f7ff ffd8 	bl	80018d4 <u8g2_SetBufferCurrTileRow>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b084      	sub	sp, #16
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001934:	6878      	ldr	r0, [r7, #4]
 8001936:	f7ff ff95 	bl	8001864 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001940:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001948:	7bfb      	ldrb	r3, [r7, #15]
 800194a:	4413      	add	r3, r2
 800194c:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	7c5b      	ldrb	r3, [r3, #17]
 8001954:	7bfa      	ldrb	r2, [r7, #15]
 8001956:	429a      	cmp	r2, r3
 8001958:	d304      	bcc.n	8001964 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	f001 ffb8 	bl	80038d0 <u8x8_RefreshDisplay>
    return 0;
 8001960:	2300      	movs	r3, #0
 8001962:	e00d      	b.n	8001980 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800196a:	2b00      	cmp	r3, #0
 800196c:	d002      	beq.n	8001974 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f7ff ff2f 	bl	80017d2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001974:	7bfb      	ldrb	r3, [r7, #15]
 8001976:	4619      	mov	r1, r3
 8001978:	6878      	ldr	r0, [r7, #4]
 800197a:	f7ff ffab 	bl	80018d4 <u8g2_SetBufferCurrTileRow>
  return 1;
 800197e:	2301      	movs	r3, #1
}
 8001980:	4618      	mov	r0, r3
 8001982:	3710      	adds	r7, #16
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b08c      	sub	sp, #48	; 0x30
 800198c:	af02      	add	r7, sp, #8
 800198e:	60f8      	str	r0, [r7, #12]
 8001990:	4608      	mov	r0, r1
 8001992:	4611      	mov	r1, r2
 8001994:	461a      	mov	r2, r3
 8001996:	4603      	mov	r3, r0
 8001998:	817b      	strh	r3, [r7, #10]
 800199a:	460b      	mov	r3, r1
 800199c:	813b      	strh	r3, [r7, #8]
 800199e:	4613      	mov	r3, r2
 80019a0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 80019a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80019a4:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 80019a6:	2308      	movs	r3, #8
 80019a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 80019aa:	88fb      	ldrh	r3, [r7, #6]
 80019ac:	f003 0307 	and.w	r3, r3, #7
 80019b0:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80019b8:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80019c0:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80019c8:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 80019ca:	88fb      	ldrh	r3, [r7, #6]
 80019cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d007      	beq.n	80019e4 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 80019d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019d6:	3301      	adds	r3, #1
 80019d8:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 80019da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019dc:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 80019de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019e0:	3301      	adds	r3, #1
 80019e2:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 80019e4:	897b      	ldrh	r3, [r7, #10]
 80019e6:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 80019e8:	8b7a      	ldrh	r2, [r7, #26]
 80019ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019ec:	1ad3      	subs	r3, r2, r3
 80019ee:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 80019f0:	8b7a      	ldrh	r2, [r7, #26]
 80019f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 80019f8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019fc:	4413      	add	r3, r2
 80019fe:	b29b      	uxth	r3, r3
 8001a00:	005b      	lsls	r3, r3, #1
 8001a02:	b29a      	uxth	r2, r3
 8001a04:	8c3b      	ldrh	r3, [r7, #32]
 8001a06:	4413      	add	r3, r2
 8001a08:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 8001a0a:	893b      	ldrh	r3, [r7, #8]
 8001a0c:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	4798      	blx	r3
 8001a16:	4603      	mov	r3, r0
 8001a18:	461a      	mov	r2, r3
 8001a1a:	8afb      	ldrh	r3, [r7, #22]
 8001a1c:	4413      	add	r3, r2
 8001a1e:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8001a20:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a24:	b29b      	uxth	r3, r3
 8001a26:	8afa      	ldrh	r2, [r7, #22]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 8001a2c:	8afa      	ldrh	r2, [r7, #22]
 8001a2e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 8001a34:	8afa      	ldrh	r2, [r7, #22]
 8001a36:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 8001a3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	b21b      	sxth	r3, r3
 8001a4c:	b29a      	uxth	r2, r3
 8001a4e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001a50:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a52:	440b      	add	r3, r1
 8001a54:	b29b      	uxth	r3, r3
 8001a56:	005b      	lsls	r3, r3, #1
 8001a58:	b29b      	uxth	r3, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 8001a5e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d067      	beq.n	8001b34 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 8001a64:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a66:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d109      	bne.n	8001a80 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 8001a6c:	7f7b      	ldrb	r3, [r7, #29]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	bf0c      	ite	eq
 8001a72:	2301      	moveq	r3, #1
 8001a74:	2300      	movne	r3, #0
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4619      	mov	r1, r3
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f001 f90a 	bl	8002c94 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 8001a80:	8b38      	ldrh	r0, [r7, #24]
 8001a82:	8afa      	ldrh	r2, [r7, #22]
 8001a84:	8b79      	ldrh	r1, [r7, #26]
 8001a86:	8abb      	ldrh	r3, [r7, #20]
 8001a88:	9300      	str	r3, [sp, #0]
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	68f8      	ldr	r0, [r7, #12]
 8001a8e:	f7ff fe43 	bl	8001718 <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001a92:	7f7b      	ldrb	r3, [r7, #29]
 8001a94:	4619      	mov	r1, r3
 8001a96:	68f8      	ldr	r0, [r7, #12]
 8001a98:	f001 f8fc 	bl	8002c94 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 8001a9c:	88fb      	ldrh	r3, [r7, #6]
 8001a9e:	f003 0318 	and.w	r3, r3, #24
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d042      	beq.n	8001b2c <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 8001aa6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001aa8:	88fb      	ldrh	r3, [r7, #6]
 8001aaa:	f003 0307 	and.w	r3, r3, #7
 8001aae:	429a      	cmp	r2, r3
 8001ab0:	d13c      	bne.n	8001b2c <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 8001ab2:	88fb      	ldrh	r3, [r7, #6]
 8001ab4:	10db      	asrs	r3, r3, #3
 8001ab6:	b29b      	uxth	r3, r3
 8001ab8:	f003 0303 	and.w	r3, r3, #3
 8001abc:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 8001abe:	8a7b      	ldrh	r3, [r7, #18]
 8001ac0:	3b01      	subs	r3, #1
 8001ac2:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	847b      	strh	r3, [r7, #34]	; 0x22
 8001ac8:	e02c      	b.n	8001b24 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 8001aca:	8b7a      	ldrh	r2, [r7, #26]
 8001acc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ace:	4413      	add	r3, r2
 8001ad0:	b29a      	uxth	r2, r3
 8001ad2:	8a7b      	ldrh	r3, [r7, #18]
 8001ad4:	4413      	add	r3, r2
 8001ad6:	b299      	uxth	r1, r3
 8001ad8:	8afa      	ldrh	r2, [r7, #22]
 8001ada:	8abb      	ldrh	r3, [r7, #20]
 8001adc:	4413      	add	r3, r2
 8001ade:	b29a      	uxth	r2, r3
 8001ae0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ae2:	4413      	add	r3, r2
 8001ae4:	b29a      	uxth	r2, r3
 8001ae6:	8a7b      	ldrh	r3, [r7, #18]
 8001ae8:	4413      	add	r3, r2
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	8b3b      	ldrh	r3, [r7, #24]
 8001aee:	68f8      	ldr	r0, [r7, #12]
 8001af0:	f001 f86b 	bl	8002bca <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 8001af4:	8b7a      	ldrh	r2, [r7, #26]
 8001af6:	8b3b      	ldrh	r3, [r7, #24]
 8001af8:	4413      	add	r3, r2
 8001afa:	b29a      	uxth	r2, r3
 8001afc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001afe:	4413      	add	r3, r2
 8001b00:	b29a      	uxth	r2, r3
 8001b02:	8a7b      	ldrh	r3, [r7, #18]
 8001b04:	4413      	add	r3, r2
 8001b06:	b299      	uxth	r1, r3
 8001b08:	8afa      	ldrh	r2, [r7, #22]
 8001b0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b0c:	4413      	add	r3, r2
 8001b0e:	b29a      	uxth	r2, r3
 8001b10:	8a7b      	ldrh	r3, [r7, #18]
 8001b12:	4413      	add	r3, r2
 8001b14:	b29a      	uxth	r2, r3
 8001b16:	8abb      	ldrh	r3, [r7, #20]
 8001b18:	68f8      	ldr	r0, [r7, #12]
 8001b1a:	f001 f86f 	bl	8002bfc <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 8001b1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001b20:	3301      	adds	r3, #1
 8001b22:	847b      	strh	r3, [r7, #34]	; 0x22
 8001b24:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001b26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d3ce      	bcc.n	8001aca <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 8001b2c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001b2e:	3b01      	subs	r3, #1
 8001b30:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 8001b32:	e757      	b.n	80019e4 <u8g2_DrawButtonFrame+0x5c>
      break;
 8001b34:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 8001b36:	88fb      	ldrh	r3, [r7, #6]
 8001b38:	f003 0320 	and.w	r3, r3, #32
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d011      	beq.n	8001b64 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 8001b40:	2102      	movs	r1, #2
 8001b42:	68f8      	ldr	r0, [r7, #12]
 8001b44:	f001 f8a6 	bl	8002c94 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 8001b48:	8b38      	ldrh	r0, [r7, #24]
 8001b4a:	8afa      	ldrh	r2, [r7, #22]
 8001b4c:	8b79      	ldrh	r1, [r7, #26]
 8001b4e:	8abb      	ldrh	r3, [r7, #20]
 8001b50:	9300      	str	r3, [sp, #0]
 8001b52:	4603      	mov	r3, r0
 8001b54:	68f8      	ldr	r0, [r7, #12]
 8001b56:	f7ff fda9 	bl	80016ac <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001b5a:	7f7b      	ldrb	r3, [r7, #29]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f001 f898 	bl	8002c94 <u8g2_SetDrawColor>
  }
}
 8001b64:	bf00      	nop
 8001b66:	3728      	adds	r7, #40	; 0x28
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}

08001b6c <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b08a      	sub	sp, #40	; 0x28
 8001b70:	af04      	add	r7, sp, #16
 8001b72:	60f8      	str	r0, [r7, #12]
 8001b74:	4608      	mov	r0, r1
 8001b76:	4611      	mov	r1, r2
 8001b78:	461a      	mov	r2, r3
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	817b      	strh	r3, [r7, #10]
 8001b7e:	460b      	mov	r3, r1
 8001b80:	813b      	strh	r3, [r7, #8]
 8001b82:	4613      	mov	r3, r2
 8001b84:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 8001b86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b88:	68f8      	ldr	r0, [r7, #12]
 8001b8a:	f000 ff11 	bl	80029b0 <u8g2_GetUTF8Width>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8001b92:	2300      	movs	r3, #0
 8001b94:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 8001b96:	88fb      	ldrh	r3, [r7, #6]
 8001b98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d009      	beq.n	8001bb4 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 8001ba0:	8afb      	ldrh	r3, [r7, #22]
 8001ba2:	3301      	adds	r3, #1
 8001ba4:	0fda      	lsrs	r2, r3, #31
 8001ba6:	4413      	add	r3, r2
 8001ba8:	105b      	asrs	r3, r3, #1
 8001baa:	425b      	negs	r3, r3
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	897b      	ldrh	r3, [r7, #10]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 8001bb4:	8afa      	ldrh	r2, [r7, #22]
 8001bb6:	8c3b      	ldrh	r3, [r7, #32]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d20d      	bcs.n	8001bd8 <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d006      	beq.n	8001bd4 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 8001bc6:	8c3a      	ldrh	r2, [r7, #32]
 8001bc8:	8afb      	ldrh	r3, [r7, #22]
 8001bca:	1ad3      	subs	r3, r2, r3
 8001bcc:	0fda      	lsrs	r2, r3, #31
 8001bce:	4413      	add	r3, r2
 8001bd0:	105b      	asrs	r3, r3, #1
 8001bd2:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 8001bd4:	8c3b      	ldrh	r3, [r7, #32]
 8001bd6:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 8001bd8:	2101      	movs	r1, #1
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f000 fcda 	bl	8002594 <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8001be0:	893a      	ldrh	r2, [r7, #8]
 8001be2:	8979      	ldrh	r1, [r7, #10]
 8001be4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001be6:	68f8      	ldr	r0, [r7, #12]
 8001be8:	f000 fd92 	bl	8002710 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 8001bec:	897a      	ldrh	r2, [r7, #10]
 8001bee:	8abb      	ldrh	r3, [r7, #20]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	b299      	uxth	r1, r3
 8001bf4:	88f8      	ldrh	r0, [r7, #6]
 8001bf6:	893a      	ldrh	r2, [r7, #8]
 8001bf8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bfa:	9302      	str	r3, [sp, #8]
 8001bfc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bfe:	9301      	str	r3, [sp, #4]
 8001c00:	8afb      	ldrh	r3, [r7, #22]
 8001c02:	9300      	str	r3, [sp, #0]
 8001c04:	4603      	mov	r3, r0
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff febe 	bl	8001988 <u8g2_DrawButtonFrame>
  
}
 8001c0c:	bf00      	nop
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff fe71 	bl	8001904 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001c22:	6878      	ldr	r0, [r7, #4]
 8001c24:	f7ff fe82 	bl	800192c <u8g2_NextPage>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d1f9      	bne.n	8001c22 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001c2e:	2100      	movs	r1, #0
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7ff fe4f 	bl	80018d4 <u8g2_SetBufferCurrTileRow>
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
	...

08001c40 <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2208      	movs	r2, #8
 8001c4c:	701a      	strb	r2, [r3, #0]
  return buf;
 8001c4e:	4b03      	ldr	r3, [pc, #12]	; (8001c5c <u8g2_m_24_8_f+0x1c>)
  #endif
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	370c      	adds	r7, #12
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bc80      	pop	{r7}
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20000514 	.word	0x20000514

08001c60 <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b088      	sub	sp, #32
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	9300      	str	r3, [sp, #0]
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a0b      	ldr	r2, [pc, #44]	; (8001ca4 <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 8001c76:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 8001c78:	68f8      	ldr	r0, [r7, #12]
 8001c7a:	f001 fe89 	bl	8003990 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 8001c7e:	f107 0313 	add.w	r3, r7, #19
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ffdc 	bl	8001c40 <u8g2_m_24_8_f>
 8001c88:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001c8a:	7cfa      	ldrb	r2, [r7, #19]
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	9300      	str	r3, [sp, #0]
 8001c90:	4b06      	ldr	r3, [pc, #24]	; (8001cac <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 8001c92:	6979      	ldr	r1, [r7, #20]
 8001c94:	68f8      	ldr	r0, [r7, #12]
 8001c96:	f001 f92f 	bl	8002ef8 <u8g2_SetupBuffer>
}
 8001c9a:	bf00      	nop
 8001c9c:	3718      	adds	r7, #24
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	08003529 	.word	0x08003529
 8001ca8:	08003709 	.word	0x08003709
 8001cac:	08002d7d 	.word	0x08002d7d

08001cb0 <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	460b      	mov	r3, r1
 8001cba:	70fb      	strb	r3, [r7, #3]
	font += offset;
 8001cbc:	78fb      	ldrb	r3, [r7, #3]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	4413      	add	r3, r2
 8001cc2:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	781b      	ldrb	r3, [r3, #0]
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bc80      	pop	{r7}
 8001cd0:	4770      	bx	lr

08001cd2 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 8001cd2:	b480      	push	{r7}
 8001cd4:	b085      	sub	sp, #20
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
 8001cda:	460b      	mov	r3, r1
 8001cdc:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 8001cde:	78fb      	ldrb	r3, [r7, #3]
 8001ce0:	687a      	ldr	r2, [r7, #4]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	781b      	ldrb	r3, [r3, #0]
 8001cea:	81fb      	strh	r3, [r7, #14]
	font++;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	3301      	adds	r3, #1
 8001cf0:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 8001cf2:	89fb      	ldrh	r3, [r7, #14]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	89fb      	ldrh	r3, [r7, #14]
 8001d00:	4413      	add	r3, r2
 8001d02:	81fb      	strh	r3, [r7, #14]
	return pos;
 8001d04:	89fb      	ldrh	r3, [r7, #14]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bc80      	pop	{r7}
 8001d0e:	4770      	bx	lr

08001d10 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b082      	sub	sp, #8
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001d1a:	2100      	movs	r1, #0
 8001d1c:	6838      	ldr	r0, [r7, #0]
 8001d1e:	f7ff ffc7 	bl	8001cb0 <u8g2_font_get_byte>
 8001d22:	4603      	mov	r3, r0
 8001d24:	461a      	mov	r2, r3
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001d2a:	2101      	movs	r1, #1
 8001d2c:	6838      	ldr	r0, [r7, #0]
 8001d2e:	f7ff ffbf 	bl	8001cb0 <u8g2_font_get_byte>
 8001d32:	4603      	mov	r3, r0
 8001d34:	461a      	mov	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001d3a:	2102      	movs	r1, #2
 8001d3c:	6838      	ldr	r0, [r7, #0]
 8001d3e:	f7ff ffb7 	bl	8001cb0 <u8g2_font_get_byte>
 8001d42:	4603      	mov	r3, r0
 8001d44:	461a      	mov	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001d4a:	2103      	movs	r1, #3
 8001d4c:	6838      	ldr	r0, [r7, #0]
 8001d4e:	f7ff ffaf 	bl	8001cb0 <u8g2_font_get_byte>
 8001d52:	4603      	mov	r3, r0
 8001d54:	461a      	mov	r2, r3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001d5a:	2104      	movs	r1, #4
 8001d5c:	6838      	ldr	r0, [r7, #0]
 8001d5e:	f7ff ffa7 	bl	8001cb0 <u8g2_font_get_byte>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461a      	mov	r2, r3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001d6a:	2105      	movs	r1, #5
 8001d6c:	6838      	ldr	r0, [r7, #0]
 8001d6e:	f7ff ff9f 	bl	8001cb0 <u8g2_font_get_byte>
 8001d72:	4603      	mov	r3, r0
 8001d74:	461a      	mov	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001d7a:	2106      	movs	r1, #6
 8001d7c:	6838      	ldr	r0, [r7, #0]
 8001d7e:	f7ff ff97 	bl	8001cb0 <u8g2_font_get_byte>
 8001d82:	4603      	mov	r3, r0
 8001d84:	461a      	mov	r2, r3
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001d8a:	2107      	movs	r1, #7
 8001d8c:	6838      	ldr	r0, [r7, #0]
 8001d8e:	f7ff ff8f 	bl	8001cb0 <u8g2_font_get_byte>
 8001d92:	4603      	mov	r3, r0
 8001d94:	461a      	mov	r2, r3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001d9a:	2108      	movs	r1, #8
 8001d9c:	6838      	ldr	r0, [r7, #0]
 8001d9e:	f7ff ff87 	bl	8001cb0 <u8g2_font_get_byte>
 8001da2:	4603      	mov	r3, r0
 8001da4:	461a      	mov	r2, r3
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001daa:	2109      	movs	r1, #9
 8001dac:	6838      	ldr	r0, [r7, #0]
 8001dae:	f7ff ff7f 	bl	8001cb0 <u8g2_font_get_byte>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b25a      	sxtb	r2, r3
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001dba:	210a      	movs	r1, #10
 8001dbc:	6838      	ldr	r0, [r7, #0]
 8001dbe:	f7ff ff77 	bl	8001cb0 <u8g2_font_get_byte>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b25a      	sxtb	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001dca:	210b      	movs	r1, #11
 8001dcc:	6838      	ldr	r0, [r7, #0]
 8001dce:	f7ff ff6f 	bl	8001cb0 <u8g2_font_get_byte>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	b25a      	sxtb	r2, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001dda:	210c      	movs	r1, #12
 8001ddc:	6838      	ldr	r0, [r7, #0]
 8001dde:	f7ff ff67 	bl	8001cb0 <u8g2_font_get_byte>
 8001de2:	4603      	mov	r3, r0
 8001de4:	b25a      	sxtb	r2, r3
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001dea:	210d      	movs	r1, #13
 8001dec:	6838      	ldr	r0, [r7, #0]
 8001dee:	f7ff ff5f 	bl	8001cb0 <u8g2_font_get_byte>
 8001df2:	4603      	mov	r3, r0
 8001df4:	b25a      	sxtb	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001dfa:	210e      	movs	r1, #14
 8001dfc:	6838      	ldr	r0, [r7, #0]
 8001dfe:	f7ff ff57 	bl	8001cb0 <u8g2_font_get_byte>
 8001e02:	4603      	mov	r3, r0
 8001e04:	b25a      	sxtb	r2, r3
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001e0a:	210f      	movs	r1, #15
 8001e0c:	6838      	ldr	r0, [r7, #0]
 8001e0e:	f7ff ff4f 	bl	8001cb0 <u8g2_font_get_byte>
 8001e12:	4603      	mov	r3, r0
 8001e14:	b25a      	sxtb	r2, r3
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001e1a:	2110      	movs	r1, #16
 8001e1c:	6838      	ldr	r0, [r7, #0]
 8001e1e:	f7ff ff47 	bl	8001cb0 <u8g2_font_get_byte>
 8001e22:	4603      	mov	r3, r0
 8001e24:	b25a      	sxtb	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001e2a:	2111      	movs	r1, #17
 8001e2c:	6838      	ldr	r0, [r7, #0]
 8001e2e:	f7ff ff50 	bl	8001cd2 <u8g2_font_get_word>
 8001e32:	4603      	mov	r3, r0
 8001e34:	461a      	mov	r2, r3
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 8001e3a:	2113      	movs	r1, #19
 8001e3c:	6838      	ldr	r0, [r7, #0]
 8001e3e:	f7ff ff48 	bl	8001cd2 <u8g2_font_get_word>
 8001e42:	4603      	mov	r3, r0
 8001e44:	461a      	mov	r2, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 8001e4a:	2115      	movs	r1, #21
 8001e4c:	6838      	ldr	r0, [r7, #0]
 8001e4e:	f7ff ff40 	bl	8001cd2 <u8g2_font_get_word>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	82da      	strh	r2, [r3, #22]
#endif
}
 8001e5a:	bf00      	nop
 8001e5c:	3708      	adds	r7, #8
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd80      	pop	{r7, pc}

08001e62 <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001e62:	b480      	push	{r7}
 8001e64:	b085      	sub	sp, #20
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	6078      	str	r0, [r7, #4]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	7b1b      	ldrb	r3, [r3, #12]
 8001e72:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 8001e7c:	7bfa      	ldrb	r2, [r7, #15]
 8001e7e:	7b7b      	ldrb	r3, [r7, #13]
 8001e80:	fa42 f303 	asr.w	r3, r2, r3
 8001e84:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 8001e86:	7b7b      	ldrb	r3, [r7, #13]
 8001e88:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 8001e8a:	7bba      	ldrb	r2, [r7, #14]
 8001e8c:	78fb      	ldrb	r3, [r7, #3]
 8001e8e:	4413      	add	r3, r2
 8001e90:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 8001e92:	7bbb      	ldrb	r3, [r7, #14]
 8001e94:	2b07      	cmp	r3, #7
 8001e96:	d91a      	bls.n	8001ece <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 8001e98:	2308      	movs	r3, #8
 8001e9a:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 8001e9c:	7b3a      	ldrb	r2, [r7, #12]
 8001e9e:	7b7b      	ldrb	r3, [r7, #13]
 8001ea0:	1ad3      	subs	r3, r2, r3
 8001ea2:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	1c5a      	adds	r2, r3, #1
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	7b3b      	ldrb	r3, [r7, #12]
 8001eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ebc:	b25a      	sxtb	r2, r3
 8001ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	b25b      	sxtb	r3, r3
 8001ec6:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 8001ec8:	7bbb      	ldrb	r3, [r7, #14]
 8001eca:	3b08      	subs	r3, #8
 8001ecc:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 8001ece:	78fb      	ldrb	r3, [r7, #3]
 8001ed0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	43db      	mvns	r3, r3
 8001edc:	b2da      	uxtb	r2, r3
 8001ede:	7bfb      	ldrb	r3, [r7, #15]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	7bba      	ldrb	r2, [r7, #14]
 8001ee8:	731a      	strb	r2, [r3, #12]
	return val;
 8001eea:	7bfb      	ldrb	r3, [r7, #15]
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3714      	adds	r7, #20
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bc80      	pop	{r7}
 8001ef4:	4770      	bx	lr

08001ef6 <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	4619      	mov	r1, r3
 8001f06:	6878      	ldr	r0, [r7, #4]
 8001f08:	f7ff ffab 	bl	8001e62 <u8g2_font_decode_get_unsigned_bits>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	73fb      	strb	r3, [r7, #15]
	d = 1;
 8001f10:	2301      	movs	r3, #1
 8001f12:	73bb      	strb	r3, [r7, #14]
	cnt--;
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	3b01      	subs	r3, #1
 8001f18:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 8001f1a:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001f1e:	78fb      	ldrb	r3, [r7, #3]
 8001f20:	fa02 f303 	lsl.w	r3, r2, r3
 8001f24:	73bb      	strb	r3, [r7, #14]
	v -= d;
 8001f26:	7bfa      	ldrb	r2, [r7, #15]
 8001f28:	7bbb      	ldrb	r3, [r7, #14]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	73fb      	strb	r3, [r7, #15]
	return v;
 8001f30:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001f34:	4618      	mov	r0, r3
 8001f36:	3710      	adds	r7, #16
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	bd80      	pop	{r7, pc}

08001f3c <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 8001f3c:	b490      	push	{r4, r7}
 8001f3e:	b082      	sub	sp, #8
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	4604      	mov	r4, r0
 8001f44:	4608      	mov	r0, r1
 8001f46:	4611      	mov	r1, r2
 8001f48:	461a      	mov	r2, r3
 8001f4a:	4623      	mov	r3, r4
 8001f4c:	80fb      	strh	r3, [r7, #6]
 8001f4e:	4603      	mov	r3, r0
 8001f50:	717b      	strb	r3, [r7, #5]
 8001f52:	460b      	mov	r3, r1
 8001f54:	713b      	strb	r3, [r7, #4]
 8001f56:	4613      	mov	r3, r2
 8001f58:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	2b02      	cmp	r3, #2
 8001f5e:	d014      	beq.n	8001f8a <u8g2_add_vector_y+0x4e>
 8001f60:	2b02      	cmp	r3, #2
 8001f62:	dc19      	bgt.n	8001f98 <u8g2_add_vector_y+0x5c>
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d002      	beq.n	8001f6e <u8g2_add_vector_y+0x32>
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d007      	beq.n	8001f7c <u8g2_add_vector_y+0x40>
 8001f6c:	e014      	b.n	8001f98 <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 8001f6e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001f72:	b29a      	uxth	r2, r3
 8001f74:	88fb      	ldrh	r3, [r7, #6]
 8001f76:	4413      	add	r3, r2
 8001f78:	80fb      	strh	r3, [r7, #6]
		break;
 8001f7a:	e014      	b.n	8001fa6 <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 8001f7c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f80:	b29a      	uxth	r2, r3
 8001f82:	88fb      	ldrh	r3, [r7, #6]
 8001f84:	4413      	add	r3, r2
 8001f86:	80fb      	strh	r3, [r7, #6]
		break;
 8001f88:	e00d      	b.n	8001fa6 <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 8001f8a:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001f8e:	b29b      	uxth	r3, r3
 8001f90:	88fa      	ldrh	r2, [r7, #6]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	80fb      	strh	r3, [r7, #6]
		break;
 8001f96:	e006      	b.n	8001fa6 <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 8001f98:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f9c:	b29b      	uxth	r3, r3
 8001f9e:	88fa      	ldrh	r2, [r7, #6]
 8001fa0:	1ad3      	subs	r3, r2, r3
 8001fa2:	80fb      	strh	r3, [r7, #6]
		break;
 8001fa4:	bf00      	nop
	}
	return dy;
 8001fa6:	88fb      	ldrh	r3, [r7, #6]
}
 8001fa8:	4618      	mov	r0, r3
 8001faa:	3708      	adds	r7, #8
 8001fac:	46bd      	mov	sp, r7
 8001fae:	bc90      	pop	{r4, r7}
 8001fb0:	4770      	bx	lr

08001fb2 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 8001fb2:	b490      	push	{r4, r7}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4604      	mov	r4, r0
 8001fba:	4608      	mov	r0, r1
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	461a      	mov	r2, r3
 8001fc0:	4623      	mov	r3, r4
 8001fc2:	80fb      	strh	r3, [r7, #6]
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	717b      	strb	r3, [r7, #5]
 8001fc8:	460b      	mov	r3, r1
 8001fca:	713b      	strb	r3, [r7, #4]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d014      	beq.n	8002000 <u8g2_add_vector_x+0x4e>
 8001fd6:	2b02      	cmp	r3, #2
 8001fd8:	dc19      	bgt.n	800200e <u8g2_add_vector_x+0x5c>
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d002      	beq.n	8001fe4 <u8g2_add_vector_x+0x32>
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d007      	beq.n	8001ff2 <u8g2_add_vector_x+0x40>
 8001fe2:	e014      	b.n	800200e <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 8001fe4:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001fe8:	b29a      	uxth	r2, r3
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	4413      	add	r3, r2
 8001fee:	80fb      	strh	r3, [r7, #6]
		break;
 8001ff0:	e014      	b.n	800201c <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 8001ff2:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	80fb      	strh	r3, [r7, #6]
		break;
 8001ffe:	e00d      	b.n	800201c <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 8002000:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8002004:	b29b      	uxth	r3, r3
 8002006:	88fa      	ldrh	r2, [r7, #6]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	80fb      	strh	r3, [r7, #6]
		break;
 800200c:	e006      	b.n	800201c <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 800200e:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8002012:	b29a      	uxth	r2, r3
 8002014:	88fb      	ldrh	r3, [r7, #6]
 8002016:	4413      	add	r3, r2
 8002018:	80fb      	strh	r3, [r7, #6]
		break;
 800201a:	bf00      	nop
	}
	return dx;
 800201c:	88fb      	ldrh	r3, [r7, #6]
}
 800201e:	4618      	mov	r0, r3
 8002020:	3708      	adds	r7, #8
 8002022:	46bd      	mov	sp, r7
 8002024:	bc90      	pop	{r4, r7}
 8002026:	4770      	bx	lr

08002028 <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af02      	add	r7, sp, #8
 800202e:	6078      	str	r0, [r7, #4]
 8002030:	460b      	mov	r3, r1
 8002032:	70fb      	strb	r3, [r7, #3]
 8002034:	4613      	mov	r3, r2
 8002036:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	3360      	adds	r3, #96	; 0x60
 800203c:	613b      	str	r3, [r7, #16]

	cnt = len;
 800203e:	78fb      	ldrb	r3, [r7, #3]
 8002040:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002048:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002050:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002058:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 800205a:	7bfa      	ldrb	r2, [r7, #15]
 800205c:	7d7b      	ldrb	r3, [r7, #21]
 800205e:	1ad3      	subs	r3, r2, r3
 8002060:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 8002062:	7bfb      	ldrb	r3, [r7, #15]
 8002064:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 8002066:	7dfa      	ldrb	r2, [r7, #23]
 8002068:	7bfb      	ldrb	r3, [r7, #15]
 800206a:	429a      	cmp	r2, r3
 800206c:	d201      	bcs.n	8002072 <u8g2_font_decode_len+0x4a>
			current = cnt;
 800206e:	7dfb      	ldrb	r3, [r7, #23]
 8002070:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	889b      	ldrh	r3, [r3, #4]
 8002076:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	88db      	ldrh	r3, [r3, #6]
 800207c:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 800207e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002082:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	7c1b      	ldrb	r3, [r3, #16]
 800208a:	89b8      	ldrh	r0, [r7, #12]
 800208c:	f7ff ff91 	bl	8001fb2 <u8g2_add_vector_x>
 8002090:	4603      	mov	r3, r0
 8002092:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8002094:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002098:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800209c:	693b      	ldr	r3, [r7, #16]
 800209e:	7c1b      	ldrb	r3, [r3, #16]
 80020a0:	8978      	ldrh	r0, [r7, #10]
 80020a2:	f7ff ff4b 	bl	8001f3c <u8g2_add_vector_y>
 80020a6:	4603      	mov	r3, r0
 80020a8:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 80020aa:	78bb      	ldrb	r3, [r7, #2]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d010      	beq.n	80020d2 <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	7b9a      	ldrb	r2, [r3, #14]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 80020ba:	7dbb      	ldrb	r3, [r7, #22]
 80020bc:	b298      	uxth	r0, r3
 80020be:	693b      	ldr	r3, [r7, #16]
 80020c0:	7c1b      	ldrb	r3, [r3, #16]
 80020c2:	897a      	ldrh	r2, [r7, #10]
 80020c4:	89b9      	ldrh	r1, [r7, #12]
 80020c6:	9300      	str	r3, [sp, #0]
 80020c8:	4603      	mov	r3, r0
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fcf2 	bl	8002ab4 <u8g2_DrawHVLine>
 80020d0:	e013      	b.n	80020fa <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	7b5b      	ldrb	r3, [r3, #13]
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d10f      	bne.n	80020fa <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	7bda      	ldrb	r2, [r3, #15]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 80020e4:	7dbb      	ldrb	r3, [r7, #22]
 80020e6:	b298      	uxth	r0, r3
 80020e8:	693b      	ldr	r3, [r7, #16]
 80020ea:	7c1b      	ldrb	r3, [r3, #16]
 80020ec:	897a      	ldrh	r2, [r7, #10]
 80020ee:	89b9      	ldrh	r1, [r7, #12]
 80020f0:	9300      	str	r3, [sp, #0]
 80020f2:	4603      	mov	r3, r0
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f000 fcdd 	bl	8002ab4 <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 80020fa:	7dfa      	ldrb	r2, [r7, #23]
 80020fc:	7bfb      	ldrb	r3, [r7, #15]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d309      	bcc.n	8002116 <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 8002102:	7dfa      	ldrb	r2, [r7, #23]
 8002104:	7bfb      	ldrb	r3, [r7, #15]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 800210a:	2300      	movs	r3, #0
 800210c:	757b      	strb	r3, [r7, #21]
		ly++;
 800210e:	7d3b      	ldrb	r3, [r7, #20]
 8002110:	3301      	adds	r3, #1
 8002112:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 8002114:	e79d      	b.n	8002052 <u8g2_font_decode_len+0x2a>
			break;
 8002116:	bf00      	nop
	}
	lx += cnt;
 8002118:	7d7a      	ldrb	r2, [r7, #21]
 800211a:	7dfb      	ldrb	r3, [r7, #23]
 800211c:	4413      	add	r3, r2
 800211e:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 8002120:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8002124:	693b      	ldr	r3, [r7, #16]
 8002126:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 8002128:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	725a      	strb	r2, [r3, #9]

}
 8002130:	bf00      	nop
 8002132:	3718      	adds	r7, #24
 8002134:	46bd      	mov	sp, r7
 8002136:	bd80      	pop	{r7, pc}

08002138 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8002138:	b580      	push	{r7, lr}
 800213a:	b084      	sub	sp, #16
 800213c:	af00      	add	r7, sp, #0
 800213e:	6078      	str	r0, [r7, #4]
 8002140:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	3360      	adds	r3, #96	; 0x60
 8002146:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2200      	movs	r2, #0
 8002152:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800215a:	4619      	mov	r1, r3
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f7ff fe80 	bl	8001e62 <u8g2_font_decode_get_unsigned_bits>
 8002162:	4603      	mov	r3, r0
 8002164:	b25a      	sxtb	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002170:	4619      	mov	r1, r3
 8002172:	68f8      	ldr	r0, [r7, #12]
 8002174:	f7ff fe75 	bl	8001e62 <u8g2_font_decode_get_unsigned_bits>
 8002178:	4603      	mov	r3, r0
 800217a:	b25a      	sxtb	r2, r3
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	7b9b      	ldrb	r3, [r3, #14]
 800218e:	2b00      	cmp	r3, #0
 8002190:	bf0c      	ite	eq
 8002192:	2301      	moveq	r3, #1
 8002194:	2300      	movne	r3, #0
 8002196:	b2db      	uxtb	r3, r3
 8002198:	461a      	mov	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	73da      	strb	r2, [r3, #15]
}
 800219e:	bf00      	nop
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
	...

080021a8 <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08a      	sub	sp, #40	; 0x28
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	6078      	str	r0, [r7, #4]
 80021b0:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	3360      	adds	r3, #96	; 0x60
 80021b6:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 80021b8:	6839      	ldr	r1, [r7, #0]
 80021ba:	6878      	ldr	r0, [r7, #4]
 80021bc:	f7ff ffbc 	bl	8002138 <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80021c6:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80021ce:	4619      	mov	r1, r3
 80021d0:	6978      	ldr	r0, [r7, #20]
 80021d2:	f7ff fe90 	bl	8001ef6 <u8g2_font_decode_get_signed_bits>
 80021d6:	4603      	mov	r3, r0
 80021d8:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80021e0:	4619      	mov	r1, r3
 80021e2:	6978      	ldr	r0, [r7, #20]
 80021e4:	f7ff fe87 	bl	8001ef6 <u8g2_font_decode_get_signed_bits>
 80021e8:	4603      	mov	r3, r0
 80021ea:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80021f2:	4619      	mov	r1, r3
 80021f4:	6978      	ldr	r0, [r7, #20]
 80021f6:	f7ff fe7e 	bl	8001ef6 <u8g2_font_decode_get_signed_bits>
 80021fa:	4603      	mov	r3, r0
 80021fc:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002204:	2b00      	cmp	r3, #0
 8002206:	f340 80d7 	ble.w	80023b8 <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	8898      	ldrh	r0, [r3, #4]
 800220e:	7cfa      	ldrb	r2, [r7, #19]
 8002210:	7c7b      	ldrb	r3, [r7, #17]
 8002212:	4413      	add	r3, r2
 8002214:	b2db      	uxtb	r3, r3
 8002216:	425b      	negs	r3, r3
 8002218:	b2db      	uxtb	r3, r3
 800221a:	b25a      	sxtb	r2, r3
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	7c1b      	ldrb	r3, [r3, #16]
 8002220:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002224:	f7ff fec5 	bl	8001fb2 <u8g2_add_vector_x>
 8002228:	4603      	mov	r3, r0
 800222a:	461a      	mov	r2, r3
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	88d8      	ldrh	r0, [r3, #6]
 8002234:	7cfa      	ldrb	r2, [r7, #19]
 8002236:	7c7b      	ldrb	r3, [r7, #17]
 8002238:	4413      	add	r3, r2
 800223a:	b2db      	uxtb	r3, r3
 800223c:	425b      	negs	r3, r3
 800223e:	b2db      	uxtb	r3, r3
 8002240:	b25a      	sxtb	r2, r3
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	7c1b      	ldrb	r3, [r3, #16]
 8002246:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800224a:	f7ff fe77 	bl	8001f3c <u8g2_add_vector_y>
 800224e:	4603      	mov	r3, r0
 8002250:	461a      	mov	r2, r3
 8002252:	697b      	ldr	r3, [r7, #20]
 8002254:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	889b      	ldrh	r3, [r3, #4]
 800225a:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	88db      	ldrh	r3, [r3, #6]
 8002260:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 8002262:	8bfb      	ldrh	r3, [r7, #30]
 8002264:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 8002266:	8b7b      	ldrh	r3, [r7, #26]
 8002268:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 800226a:	697b      	ldr	r3, [r7, #20]
 800226c:	7c1b      	ldrb	r3, [r3, #16]
 800226e:	2b03      	cmp	r3, #3
 8002270:	d85a      	bhi.n	8002328 <u8g2_font_decode_glyph+0x180>
 8002272:	a201      	add	r2, pc, #4	; (adr r2, 8002278 <u8g2_font_decode_glyph+0xd0>)
 8002274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002278:	08002289 	.word	0x08002289
 800227c:	080022a5 	.word	0x080022a5
 8002280:	080022cd 	.word	0x080022cd
 8002284:	08002301 	.word	0x08002301
			case 0:
				x1 += decode->glyph_width;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800228e:	b29a      	uxth	r2, r3
 8002290:	8bbb      	ldrh	r3, [r7, #28]
 8002292:	4413      	add	r3, r2
 8002294:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 8002296:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800229a:	b29a      	uxth	r2, r3
 800229c:	8b3b      	ldrh	r3, [r7, #24]
 800229e:	4413      	add	r3, r2
 80022a0:	833b      	strh	r3, [r7, #24]
				break;
 80022a2:	e041      	b.n	8002328 <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 80022a4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022a8:	b29b      	uxth	r3, r3
 80022aa:	8bfa      	ldrh	r2, [r7, #30]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80022b0:	8bfb      	ldrh	r3, [r7, #30]
 80022b2:	3301      	adds	r3, #1
 80022b4:	83fb      	strh	r3, [r7, #30]
				x1++;
 80022b6:	8bbb      	ldrh	r3, [r7, #28]
 80022b8:	3301      	adds	r3, #1
 80022ba:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 80022bc:	697b      	ldr	r3, [r7, #20]
 80022be:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80022c2:	b29a      	uxth	r2, r3
 80022c4:	8b3b      	ldrh	r3, [r7, #24]
 80022c6:	4413      	add	r3, r2
 80022c8:	833b      	strh	r3, [r7, #24]
				break;
 80022ca:	e02d      	b.n	8002328 <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 80022cc:	697b      	ldr	r3, [r7, #20]
 80022ce:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80022d2:	b29b      	uxth	r3, r3
 80022d4:	8bfa      	ldrh	r2, [r7, #30]
 80022d6:	1ad3      	subs	r3, r2, r3
 80022d8:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80022da:	8bfb      	ldrh	r3, [r7, #30]
 80022dc:	3301      	adds	r3, #1
 80022de:	83fb      	strh	r3, [r7, #30]
				x1++;
 80022e0:	8bbb      	ldrh	r3, [r7, #28]
 80022e2:	3301      	adds	r3, #1
 80022e4:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 80022e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022ea:	b29b      	uxth	r3, r3
 80022ec:	8b7a      	ldrh	r2, [r7, #26]
 80022ee:	1ad3      	subs	r3, r2, r3
 80022f0:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80022f2:	8b7b      	ldrh	r3, [r7, #26]
 80022f4:	3301      	adds	r3, #1
 80022f6:	837b      	strh	r3, [r7, #26]
				y1++;
 80022f8:	8b3b      	ldrh	r3, [r7, #24]
 80022fa:	3301      	adds	r3, #1
 80022fc:	833b      	strh	r3, [r7, #24]
				break;
 80022fe:	e013      	b.n	8002328 <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 8002300:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002304:	b29a      	uxth	r2, r3
 8002306:	8bbb      	ldrh	r3, [r7, #28]
 8002308:	4413      	add	r3, r2
 800230a:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 800230c:	697b      	ldr	r3, [r7, #20]
 800230e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002312:	b29b      	uxth	r3, r3
 8002314:	8b7a      	ldrh	r2, [r7, #26]
 8002316:	1ad3      	subs	r3, r2, r3
 8002318:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 800231a:	8b7b      	ldrh	r3, [r7, #26]
 800231c:	3301      	adds	r3, #1
 800231e:	837b      	strh	r3, [r7, #26]
				y1++;
 8002320:	8b3b      	ldrh	r3, [r7, #24]
 8002322:	3301      	adds	r3, #1
 8002324:	833b      	strh	r3, [r7, #24]
				break;
 8002326:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 8002328:	8bb8      	ldrh	r0, [r7, #28]
 800232a:	8b7a      	ldrh	r2, [r7, #26]
 800232c:	8bf9      	ldrh	r1, [r7, #30]
 800232e:	8b3b      	ldrh	r3, [r7, #24]
 8002330:	9300      	str	r3, [sp, #0]
 8002332:	4603      	mov	r3, r0
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f000 fcf6 	bl	8002d26 <u8g2_IsIntersection>
 800233a:	4603      	mov	r3, r0
 800233c:	2b00      	cmp	r3, #0
 800233e:	d102      	bne.n	8002346 <u8g2_font_decode_glyph+0x19e>
				return d;
 8002340:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8002344:	e03a      	b.n	80023bc <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2200      	movs	r2, #0
 800234a:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 800234c:	697b      	ldr	r3, [r7, #20]
 800234e:	2200      	movs	r2, #0
 8002350:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002358:	4619      	mov	r1, r3
 800235a:	6978      	ldr	r0, [r7, #20]
 800235c:	f7ff fd81 	bl	8001e62 <u8g2_font_decode_get_unsigned_bits>
 8002360:	4603      	mov	r3, r0
 8002362:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800236a:	4619      	mov	r1, r3
 800236c:	6978      	ldr	r0, [r7, #20]
 800236e:	f7ff fd78 	bl	8001e62 <u8g2_font_decode_get_unsigned_bits>
 8002372:	4603      	mov	r3, r0
 8002374:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 8002376:	7bfb      	ldrb	r3, [r7, #15]
 8002378:	2200      	movs	r2, #0
 800237a:	4619      	mov	r1, r3
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f7ff fe53 	bl	8002028 <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 8002382:	7bbb      	ldrb	r3, [r7, #14]
 8002384:	2201      	movs	r2, #1
 8002386:	4619      	mov	r1, r3
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff fe4d 	bl	8002028 <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 800238e:	2101      	movs	r1, #1
 8002390:	6978      	ldr	r0, [r7, #20]
 8002392:	f7ff fd66 	bl	8001e62 <u8g2_font_decode_get_unsigned_bits>
 8002396:	4603      	mov	r3, r0
 8002398:	2b00      	cmp	r3, #0
 800239a:	d1ec      	bne.n	8002376 <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 800239c:	697b      	ldr	r3, [r7, #20]
 800239e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80023a2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80023a6:	429a      	cmp	r2, r3
 80023a8:	dd00      	ble.n	80023ac <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 80023aa:	e7d2      	b.n	8002352 <u8g2_font_decode_glyph+0x1aa>
				break;
 80023ac:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	7b9a      	ldrb	r2, [r3, #14]
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 80023b8:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80023bc:	4618      	mov	r0, r3
 80023be:	3720      	adds	r7, #32
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}

080023c4 <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	460b      	mov	r3, r1
 80023ce:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d4:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	3317      	adds	r3, #23
 80023da:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 80023dc:	887b      	ldrh	r3, [r7, #2]
 80023de:	2bff      	cmp	r3, #255	; 0xff
 80023e0:	d82a      	bhi.n	8002438 <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 80023e2:	887b      	ldrh	r3, [r7, #2]
 80023e4:	2b60      	cmp	r3, #96	; 0x60
 80023e6:	d907      	bls.n	80023f8 <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80023ee:	461a      	mov	r2, r3
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	4413      	add	r3, r2
 80023f4:	617b      	str	r3, [r7, #20]
 80023f6:	e009      	b.n	800240c <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 80023f8:	887b      	ldrh	r3, [r7, #2]
 80023fa:	2b40      	cmp	r3, #64	; 0x40
 80023fc:	d906      	bls.n	800240c <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8002404:	461a      	mov	r2, r3
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	4413      	add	r3, r2
 800240a:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 800240c:	697b      	ldr	r3, [r7, #20]
 800240e:	3301      	adds	r3, #1
 8002410:	781b      	ldrb	r3, [r3, #0]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d04e      	beq.n	80024b4 <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 8002416:	697b      	ldr	r3, [r7, #20]
 8002418:	781b      	ldrb	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	887a      	ldrh	r2, [r7, #2]
 800241e:	429a      	cmp	r2, r3
 8002420:	d102      	bne.n	8002428 <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	3302      	adds	r3, #2
 8002426:	e049      	b.n	80024bc <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 8002428:	697b      	ldr	r3, [r7, #20]
 800242a:	3301      	adds	r3, #1
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	4413      	add	r3, r2
 8002434:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 8002436:	e7e9      	b.n	800240c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800243e:	461a      	mov	r2, r3
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	4413      	add	r3, r2
 8002444:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 800244a:	2100      	movs	r1, #0
 800244c:	6938      	ldr	r0, [r7, #16]
 800244e:	f7ff fc40 	bl	8001cd2 <u8g2_font_get_word>
 8002452:	4603      	mov	r3, r0
 8002454:	461a      	mov	r2, r3
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	4413      	add	r3, r2
 800245a:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 800245c:	2102      	movs	r1, #2
 800245e:	6938      	ldr	r0, [r7, #16]
 8002460:	f7ff fc37 	bl	8001cd2 <u8g2_font_get_word>
 8002464:	4603      	mov	r3, r0
 8002466:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 8002468:	693b      	ldr	r3, [r7, #16]
 800246a:	3304      	adds	r3, #4
 800246c:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 800246e:	89fa      	ldrh	r2, [r7, #14]
 8002470:	887b      	ldrh	r3, [r7, #2]
 8002472:	429a      	cmp	r2, r3
 8002474:	d3e9      	bcc.n	800244a <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	781b      	ldrb	r3, [r3, #0]
 800247a:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 800247c:	89fb      	ldrh	r3, [r7, #14]
 800247e:	021b      	lsls	r3, r3, #8
 8002480:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	3301      	adds	r3, #1
 8002486:	781b      	ldrb	r3, [r3, #0]
 8002488:	b29a      	uxth	r2, r3
 800248a:	89fb      	ldrh	r3, [r7, #14]
 800248c:	4313      	orrs	r3, r2
 800248e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 8002490:	89fb      	ldrh	r3, [r7, #14]
 8002492:	2b00      	cmp	r3, #0
 8002494:	d010      	beq.n	80024b8 <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 8002496:	89fa      	ldrh	r2, [r7, #14]
 8002498:	887b      	ldrh	r3, [r7, #2]
 800249a:	429a      	cmp	r2, r3
 800249c:	d102      	bne.n	80024a4 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 800249e:	697b      	ldr	r3, [r7, #20]
 80024a0:	3303      	adds	r3, #3
 80024a2:	e00b      	b.n	80024bc <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	3302      	adds	r3, #2
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	4413      	add	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 80024b2:	e7e0      	b.n	8002476 <u8g2_font_get_glyph_data+0xb2>
				break;
 80024b4:	bf00      	nop
 80024b6:	e000      	b.n	80024ba <u8g2_font_get_glyph_data+0xf6>
				break;
 80024b8:	bf00      	nop
		}
	}
#endif

	return NULL;
 80024ba:	2300      	movs	r3, #0
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3718      	adds	r7, #24
 80024c0:	46bd      	mov	sp, r7
 80024c2:	bd80      	pop	{r7, pc}

080024c4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b086      	sub	sp, #24
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	60f8      	str	r0, [r7, #12]
 80024cc:	4608      	mov	r0, r1
 80024ce:	4611      	mov	r1, r2
 80024d0:	461a      	mov	r2, r3
 80024d2:	4603      	mov	r3, r0
 80024d4:	817b      	strh	r3, [r7, #10]
 80024d6:	460b      	mov	r3, r1
 80024d8:	813b      	strh	r3, [r7, #8]
 80024da:	4613      	mov	r3, r2
 80024dc:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 80024de:	2300      	movs	r3, #0
 80024e0:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	897a      	ldrh	r2, [r7, #10]
 80024e6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	893a      	ldrh	r2, [r7, #8]
 80024ee:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80024f2:	88fb      	ldrh	r3, [r7, #6]
 80024f4:	4619      	mov	r1, r3
 80024f6:	68f8      	ldr	r0, [r7, #12]
 80024f8:	f7ff ff64 	bl	80023c4 <u8g2_font_get_glyph_data>
 80024fc:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 80024fe:	693b      	ldr	r3, [r7, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d005      	beq.n	8002510 <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8002504:	6939      	ldr	r1, [r7, #16]
 8002506:	68f8      	ldr	r0, [r7, #12]
 8002508:	f7ff fe4e 	bl	80021a8 <u8g2_font_decode_glyph>
 800250c:	4603      	mov	r3, r0
 800250e:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 8002510:	8afb      	ldrh	r3, [r7, #22]
}
 8002512:	4618      	mov	r0, r3
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 800251a:	b580      	push	{r7, lr}
 800251c:	b084      	sub	sp, #16
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
 8002522:	460b      	mov	r3, r1
 8002524:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 8002526:	887b      	ldrh	r3, [r7, #2]
 8002528:	4619      	mov	r1, r3
 800252a:	6878      	ldr	r0, [r7, #4]
 800252c:	f7ff ff4a 	bl	80023c4 <u8g2_font_get_glyph_data>
 8002530:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d101      	bne.n	800253c <u8g2_GetGlyphWidth+0x22>
		return 0;
 8002538:	2300      	movs	r3, #0
 800253a:	e027      	b.n	800258c <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 800253c:	68f9      	ldr	r1, [r7, #12]
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fdfa 	bl	8002138 <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002550:	4619      	mov	r1, r3
 8002552:	4610      	mov	r0, r2
 8002554:	f7ff fccf 	bl	8001ef6 <u8g2_font_decode_get_signed_bits>
 8002558:	4603      	mov	r3, r0
 800255a:	461a      	mov	r2, r3
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 800256e:	4619      	mov	r1, r3
 8002570:	4610      	mov	r0, r2
 8002572:	f7ff fcc0 	bl	8001ef6 <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f103 0260 	add.w	r2, r3, #96	; 0x60
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8002582:	4619      	mov	r1, r3
 8002584:	4610      	mov	r0, r2
 8002586:	f7ff fcb6 	bl	8001ef6 <u8g2_font_decode_get_signed_bits>
 800258a:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}

08002594 <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8002594:	b480      	push	{r7}
 8002596:	b083      	sub	sp, #12
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	460b      	mov	r3, r1
 800259e:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	78fa      	ldrb	r2, [r7, #3]
 80025a4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 80025a8:	bf00      	nop
 80025aa:	370c      	adds	r7, #12
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bc80      	pop	{r7}
 80025b0:	4770      	bx	lr
	...

080025b4 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b084      	sub	sp, #16
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	4608      	mov	r0, r1
 80025be:	4611      	mov	r1, r2
 80025c0:	461a      	mov	r2, r3
 80025c2:	4603      	mov	r3, r0
 80025c4:	817b      	strh	r3, [r7, #10]
 80025c6:	460b      	mov	r3, r1
 80025c8:	813b      	strh	r3, [r7, #8]
 80025ca:	4613      	mov	r3, r2
 80025cc:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d833      	bhi.n	8002640 <u8g2_DrawGlyph+0x8c>
 80025d8:	a201      	add	r2, pc, #4	; (adr r2, 80025e0 <u8g2_DrawGlyph+0x2c>)
 80025da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025de:	bf00      	nop
 80025e0:	080025f1 	.word	0x080025f1
 80025e4:	08002605 	.word	0x08002605
 80025e8:	08002619 	.word	0x08002619
 80025ec:	0800262d 	.word	0x0800262d
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	4798      	blx	r3
 80025f8:	4603      	mov	r3, r0
 80025fa:	461a      	mov	r2, r3
 80025fc:	893b      	ldrh	r3, [r7, #8]
 80025fe:	4413      	add	r3, r2
 8002600:	813b      	strh	r3, [r7, #8]
		break;
 8002602:	e01d      	b.n	8002640 <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002608:	68f8      	ldr	r0, [r7, #12]
 800260a:	4798      	blx	r3
 800260c:	4603      	mov	r3, r0
 800260e:	461a      	mov	r2, r3
 8002610:	897b      	ldrh	r3, [r7, #10]
 8002612:	1a9b      	subs	r3, r3, r2
 8002614:	817b      	strh	r3, [r7, #10]
		break;
 8002616:	e013      	b.n	8002640 <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	4798      	blx	r3
 8002620:	4603      	mov	r3, r0
 8002622:	461a      	mov	r2, r3
 8002624:	893b      	ldrh	r3, [r7, #8]
 8002626:	1a9b      	subs	r3, r3, r2
 8002628:	813b      	strh	r3, [r7, #8]
		break;
 800262a:	e009      	b.n	8002640 <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	4798      	blx	r3
 8002634:	4603      	mov	r3, r0
 8002636:	461a      	mov	r2, r3
 8002638:	897b      	ldrh	r3, [r7, #10]
 800263a:	4413      	add	r3, r2
 800263c:	817b      	strh	r3, [r7, #10]
		break;
 800263e:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8002640:	88fb      	ldrh	r3, [r7, #6]
 8002642:	893a      	ldrh	r2, [r7, #8]
 8002644:	8979      	ldrh	r1, [r7, #10]
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f7ff ff3c 	bl	80024c4 <u8g2_font_draw_glyph>
 800264c:	4603      	mov	r3, r0
}
 800264e:	4618      	mov	r0, r3
 8002650:	3710      	adds	r7, #16
 8002652:	46bd      	mov	sp, r7
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop

08002658 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002658:	b580      	push	{r7, lr}
 800265a:	b086      	sub	sp, #24
 800265c:	af00      	add	r7, sp, #0
 800265e:	60f8      	str	r0, [r7, #12]
 8002660:	607b      	str	r3, [r7, #4]
 8002662:	460b      	mov	r3, r1
 8002664:	817b      	strh	r3, [r7, #10]
 8002666:	4613      	mov	r3, r2
 8002668:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800266a:	68f8      	ldr	r0, [r7, #12]
 800266c:	f000 fd9a 	bl	80031a4 <u8x8_utf8_init>
	sum = 0;
 8002670:	2300      	movs	r3, #0
 8002672:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	687a      	ldr	r2, [r7, #4]
 800267a:	7812      	ldrb	r2, [r2, #0]
 800267c:	4611      	mov	r1, r2
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	4798      	blx	r3
 8002682:	4603      	mov	r3, r0
 8002684:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 8002686:	8abb      	ldrh	r3, [r7, #20]
 8002688:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800268c:	4293      	cmp	r3, r2
 800268e:	d038      	beq.n	8002702 <u8g2_draw_string+0xaa>
			break;
		str++;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	3301      	adds	r3, #1
 8002694:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 8002696:	8abb      	ldrh	r3, [r7, #20]
 8002698:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800269c:	4293      	cmp	r3, r2
 800269e:	d0e9      	beq.n	8002674 <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 80026a0:	8abb      	ldrh	r3, [r7, #20]
 80026a2:	893a      	ldrh	r2, [r7, #8]
 80026a4:	8979      	ldrh	r1, [r7, #10]
 80026a6:	68f8      	ldr	r0, [r7, #12]
 80026a8:	f7ff ff84 	bl	80025b4 <u8g2_DrawGlyph>
 80026ac:	4603      	mov	r3, r0
 80026ae:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80026b6:	2b03      	cmp	r3, #3
 80026b8:	d81e      	bhi.n	80026f8 <u8g2_draw_string+0xa0>
 80026ba:	a201      	add	r2, pc, #4	; (adr r2, 80026c0 <u8g2_draw_string+0x68>)
 80026bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026c0:	080026d1 	.word	0x080026d1
 80026c4:	080026db 	.word	0x080026db
 80026c8:	080026e5 	.word	0x080026e5
 80026cc:	080026ef 	.word	0x080026ef
			case 0:
				x += delta;
 80026d0:	897a      	ldrh	r2, [r7, #10]
 80026d2:	8a7b      	ldrh	r3, [r7, #18]
 80026d4:	4413      	add	r3, r2
 80026d6:	817b      	strh	r3, [r7, #10]
				break;
 80026d8:	e00e      	b.n	80026f8 <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 80026da:	893a      	ldrh	r2, [r7, #8]
 80026dc:	8a7b      	ldrh	r3, [r7, #18]
 80026de:	4413      	add	r3, r2
 80026e0:	813b      	strh	r3, [r7, #8]
				break;
 80026e2:	e009      	b.n	80026f8 <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 80026e4:	897a      	ldrh	r2, [r7, #10]
 80026e6:	8a7b      	ldrh	r3, [r7, #18]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	817b      	strh	r3, [r7, #10]
				break;
 80026ec:	e004      	b.n	80026f8 <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 80026ee:	893a      	ldrh	r2, [r7, #8]
 80026f0:	8a7b      	ldrh	r3, [r7, #18]
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	813b      	strh	r3, [r7, #8]
				break;
 80026f6:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 80026f8:	8afa      	ldrh	r2, [r7, #22]
 80026fa:	8a7b      	ldrh	r3, [r7, #18]
 80026fc:	4413      	add	r3, r2
 80026fe:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002700:	e7b8      	b.n	8002674 <u8g2_draw_string+0x1c>
			break;
 8002702:	bf00      	nop
		}
	}
	return sum;
 8002704:	8afb      	ldrh	r3, [r7, #22]
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop

08002710 <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002710:	b580      	push	{r7, lr}
 8002712:	b084      	sub	sp, #16
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	607b      	str	r3, [r7, #4]
 800271a:	460b      	mov	r3, r1
 800271c:	817b      	strh	r3, [r7, #10]
 800271e:	4613      	mov	r3, r2
 8002720:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	4a06      	ldr	r2, [pc, #24]	; (8002740 <u8g2_DrawUTF8+0x30>)
 8002726:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 8002728:	893a      	ldrh	r2, [r7, #8]
 800272a:	8979      	ldrh	r1, [r7, #10]
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	68f8      	ldr	r0, [r7, #12]
 8002730:	f7ff ff92 	bl	8002658 <u8g2_draw_string>
 8002734:	4603      	mov	r3, r0
}
 8002736:	4618      	mov	r0, r3
 8002738:	3710      	adds	r7, #16
 800273a:	46bd      	mov	sp, r7
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	080031eb 	.word	0x080031eb

08002744 <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 8002744:	b480      	push	{r7}
 8002746:	b083      	sub	sp, #12
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002750:	2b00      	cmp	r3, #0
 8002752:	d05d      	beq.n	8002810 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002772:	2b00      	cmp	r3, #0
 8002774:	d04d      	beq.n	8002812 <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800277c:	2b01      	cmp	r3, #1
 800277e:	d11c      	bne.n	80027ba <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 800278c:	429a      	cmp	r2, r3
 800278e:	da05      	bge.n	800279c <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dd32      	ble.n	8002812 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80027b8:	e02b      	b.n	8002812 <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80027c0:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80027c8:	4619      	mov	r1, r3
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80027d0:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 80027d2:	429a      	cmp	r2, r3
 80027d4:	da0d      	bge.n	80027f2 <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80027dc:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	4413      	add	r3, r2
 80027e8:	b2db      	uxtb	r3, r3
 80027ea:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80027fe:	429a      	cmp	r2, r3
 8002800:	dd07      	ble.n	8002812 <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 800280e:	e000      	b.n	8002812 <u8g2_UpdateRefHeight+0xce>
		return;
 8002810:	bf00      	nop
	}
}
 8002812:	370c      	adds	r7, #12
 8002814:	46bd      	mov	sp, r7
 8002816:	bc80      	pop	{r7}
 8002818:	4770      	bx	lr

0800281a <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
	return 0;
 8002822:	2300      	movs	r3, #0
}
 8002824:	4618      	mov	r0, r3
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	bc80      	pop	{r7}
 800282c:	4770      	bx	lr
	...

08002830 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	4a03      	ldr	r2, [pc, #12]	; (8002848 <u8g2_SetFontPosBaseline+0x18>)
 800283c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800283e:	bf00      	nop
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	bc80      	pop	{r7}
 8002846:	4770      	bx	lr
 8002848:	0800281b 	.word	0x0800281b

0800284c <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 800284c:	b480      	push	{r7}
 800284e:	b085      	sub	sp, #20
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 800285a:	81fb      	strh	r3, [r7, #14]
	tmp++;
 800285c:	89fb      	ldrh	r3, [r7, #14]
 800285e:	3301      	adds	r3, #1
 8002860:	81fb      	strh	r3, [r7, #14]
	return tmp;
 8002862:	89fb      	ldrh	r3, [r7, #14]
}
 8002864:	4618      	mov	r0, r3
 8002866:	3714      	adds	r7, #20
 8002868:	46bd      	mov	sp, r7
 800286a:	bc80      	pop	{r7}
 800286c:	4770      	bx	lr
	...

08002870 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	4a03      	ldr	r2, [pc, #12]	; (8002888 <u8g2_SetFontPosTop+0x18>)
 800287c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800287e:	bf00      	nop
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	bc80      	pop	{r7}
 8002886:	4770      	bx	lr
 8002888:	0800284d 	.word	0x0800284d

0800288c <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	429a      	cmp	r2, r3
 800289e:	d00b      	beq.n	80028b8 <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	3374      	adds	r3, #116	; 0x74
 80028aa:	6839      	ldr	r1, [r7, #0]
 80028ac:	4618      	mov	r0, r3
 80028ae:	f7ff fa2f 	bl	8001d10 <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 80028b2:	6878      	ldr	r0, [r7, #4]
 80028b4:	f7ff ff46 	bl	8002744 <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 80028b8:	bf00      	nop
 80028ba:	3708      	adds	r7, #8
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}

080028c0 <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 80028ca:	23c0      	movs	r3, #192	; 0xc0
 80028cc:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2200      	movs	r2, #0
 80028d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f000 fc64 	bl	80031a4 <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 80028dc:	2300      	movs	r3, #0
 80028de:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 80028e0:	2300      	movs	r3, #0
 80028e2:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	683a      	ldr	r2, [r7, #0]
 80028ea:	7812      	ldrb	r2, [r2, #0]
 80028ec:	4611      	mov	r1, r2
 80028ee:	6878      	ldr	r0, [r7, #4]
 80028f0:	4798      	blx	r3
 80028f2:	4603      	mov	r3, r0
 80028f4:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 80028f6:	893b      	ldrh	r3, [r7, #8]
 80028f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d01c      	beq.n	800293a <u8g2_string_width+0x7a>
			break;
		str++;
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	3301      	adds	r3, #1
 8002904:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 8002906:	893b      	ldrh	r3, [r7, #8]
 8002908:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800290c:	4293      	cmp	r3, r2
 800290e:	d0e9      	beq.n	80028e4 <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 8002910:	893b      	ldrh	r3, [r7, #8]
 8002912:	4619      	mov	r1, r3
 8002914:	6878      	ldr	r0, [r7, #4]
 8002916:	f7ff fe00 	bl	800251a <u8g2_GetGlyphWidth>
 800291a:	4603      	mov	r3, r0
 800291c:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 800291e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002922:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8002926:	d103      	bne.n	8002930 <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800292e:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 8002930:	89fa      	ldrh	r2, [r7, #14]
 8002932:	89bb      	ldrh	r3, [r7, #12]
 8002934:	4413      	add	r3, r2
 8002936:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 8002938:	e7d4      	b.n	80028e4 <u8g2_string_width+0x24>
			break;
 800293a:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002942:	2b00      	cmp	r3, #0
 8002944:	d01b      	beq.n	800297e <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 8002946:	89fa      	ldrh	r2, [r7, #14]
 8002948:	89bb      	ldrh	r3, [r7, #12]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002954:	b29a      	uxth	r2, r3
 8002956:	89fb      	ldrh	r3, [r7, #14]
 8002958:	4413      	add	r3, r2
 800295a:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 8002962:	b29a      	uxth	r2, r3
 8002964:	89fb      	ldrh	r3, [r7, #14]
 8002966:	4413      	add	r3, r2
 8002968:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 800296a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800296e:	2b00      	cmp	r3, #0
 8002970:	dd05      	ble.n	800297e <u8g2_string_width+0xbe>
			w += initial_x_offset;
 8002972:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002976:	b29a      	uxth	r2, r3
 8002978:	89fb      	ldrh	r3, [r7, #14]
 800297a:	4413      	add	r3, r2
 800297c:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 800297e:	89fb      	ldrh	r3, [r7, #14]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3710      	adds	r7, #16
 8002984:	46bd      	mov	sp, r7
 8002986:	bd80      	pop	{r7, pc}

08002988 <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 8002988:	b580      	push	{r7, lr}
 800298a:	b082      	sub	sp, #8
 800298c:	af00      	add	r7, sp, #0
 800298e:	6078      	str	r0, [r7, #4]
 8002990:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a05      	ldr	r2, [pc, #20]	; (80029ac <u8g2_GetStrWidth+0x24>)
 8002996:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 8002998:	6839      	ldr	r1, [r7, #0]
 800299a:	6878      	ldr	r0, [r7, #4]
 800299c:	f7ff ff90 	bl	80028c0 <u8g2_string_width>
 80029a0:	4603      	mov	r3, r0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	3708      	adds	r7, #8
 80029a6:	46bd      	mov	sp, r7
 80029a8:	bd80      	pop	{r7, pc}
 80029aa:	bf00      	nop
 80029ac:	080031bf 	.word	0x080031bf

080029b0 <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	4a05      	ldr	r2, [pc, #20]	; (80029d4 <u8g2_GetUTF8Width+0x24>)
 80029be:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 80029c0:	6839      	ldr	r1, [r7, #0]
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f7ff ff7c 	bl	80028c0 <u8g2_string_width>
 80029c8:	4603      	mov	r3, r0
}
 80029ca:	4618      	mov	r0, r3
 80029cc:	3708      	adds	r7, #8
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	080031eb 	.word	0x080031eb

080029d8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	4611      	mov	r1, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	460b      	mov	r3, r1
 80029e8:	80fb      	strh	r3, [r7, #6]
 80029ea:	4613      	mov	r3, r2
 80029ec:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	881b      	ldrh	r3, [r3, #0]
 80029f2:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80029f4:	8afb      	ldrh	r3, [r7, #22]
 80029f6:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80029f8:	68bb      	ldr	r3, [r7, #8]
 80029fa:	881a      	ldrh	r2, [r3, #0]
 80029fc:	8abb      	ldrh	r3, [r7, #20]
 80029fe:	4413      	add	r3, r2
 8002a00:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002a02:	8afa      	ldrh	r2, [r7, #22]
 8002a04:	8abb      	ldrh	r3, [r7, #20]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d90b      	bls.n	8002a22 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8002a0a:	8afa      	ldrh	r2, [r7, #22]
 8002a0c:	88bb      	ldrh	r3, [r7, #4]
 8002a0e:	429a      	cmp	r2, r3
 8002a10:	d205      	bcs.n	8002a1e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002a12:	88bb      	ldrh	r3, [r7, #4]
 8002a14:	82bb      	strh	r3, [r7, #20]
      b--;
 8002a16:	8abb      	ldrh	r3, [r7, #20]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	82bb      	strh	r3, [r7, #20]
 8002a1c:	e001      	b.n	8002a22 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002a1e:	88fb      	ldrh	r3, [r7, #6]
 8002a20:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002a22:	8afa      	ldrh	r2, [r7, #22]
 8002a24:	88bb      	ldrh	r3, [r7, #4]
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d301      	bcc.n	8002a2e <u8g2_clip_intersection2+0x56>
    return 0;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e01c      	b.n	8002a68 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8002a2e:	8aba      	ldrh	r2, [r7, #20]
 8002a30:	88fb      	ldrh	r3, [r7, #6]
 8002a32:	429a      	cmp	r2, r3
 8002a34:	d801      	bhi.n	8002a3a <u8g2_clip_intersection2+0x62>
    return 0;
 8002a36:	2300      	movs	r3, #0
 8002a38:	e016      	b.n	8002a68 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8002a3a:	8afa      	ldrh	r2, [r7, #22]
 8002a3c:	88fb      	ldrh	r3, [r7, #6]
 8002a3e:	429a      	cmp	r2, r3
 8002a40:	d201      	bcs.n	8002a46 <u8g2_clip_intersection2+0x6e>
    a = c;
 8002a42:	88fb      	ldrh	r3, [r7, #6]
 8002a44:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8002a46:	8aba      	ldrh	r2, [r7, #20]
 8002a48:	88bb      	ldrh	r3, [r7, #4]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d901      	bls.n	8002a52 <u8g2_clip_intersection2+0x7a>
    b = d;
 8002a4e:	88bb      	ldrh	r3, [r7, #4]
 8002a50:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	8afa      	ldrh	r2, [r7, #22]
 8002a56:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002a58:	8aba      	ldrh	r2, [r7, #20]
 8002a5a:	8afb      	ldrh	r3, [r7, #22]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	8aba      	ldrh	r2, [r7, #20]
 8002a64:	801a      	strh	r2, [r3, #0]
  return 1;
 8002a66:	2301      	movs	r3, #1
}
 8002a68:	4618      	mov	r0, r3
 8002a6a:	371c      	adds	r7, #28
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bc80      	pop	{r7}
 8002a70:	4770      	bx	lr

08002a72 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a72:	b590      	push	{r4, r7, lr}
 8002a74:	b087      	sub	sp, #28
 8002a76:	af02      	add	r7, sp, #8
 8002a78:	60f8      	str	r0, [r7, #12]
 8002a7a:	4608      	mov	r0, r1
 8002a7c:	4611      	mov	r1, r2
 8002a7e:	461a      	mov	r2, r3
 8002a80:	4603      	mov	r3, r0
 8002a82:	817b      	strh	r3, [r7, #10]
 8002a84:	460b      	mov	r3, r1
 8002a86:	813b      	strh	r3, [r7, #8]
 8002a88:	4613      	mov	r3, r2
 8002a8a:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a90:	893a      	ldrh	r2, [r7, #8]
 8002a92:	1ad3      	subs	r3, r2, r3
 8002a94:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002a9a:	88f8      	ldrh	r0, [r7, #6]
 8002a9c:	893a      	ldrh	r2, [r7, #8]
 8002a9e:	8979      	ldrh	r1, [r7, #10]
 8002aa0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002aa4:	9300      	str	r3, [sp, #0]
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	68f8      	ldr	r0, [r7, #12]
 8002aaa:	47a0      	blx	r4
}
 8002aac:	bf00      	nop
 8002aae:	3714      	adds	r7, #20
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	bd90      	pop	{r4, r7, pc}

08002ab4 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002ab4:	b590      	push	{r4, r7, lr}
 8002ab6:	b087      	sub	sp, #28
 8002ab8:	af02      	add	r7, sp, #8
 8002aba:	60f8      	str	r0, [r7, #12]
 8002abc:	4608      	mov	r0, r1
 8002abe:	4611      	mov	r1, r2
 8002ac0:	461a      	mov	r2, r3
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	817b      	strh	r3, [r7, #10]
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	813b      	strh	r3, [r7, #8]
 8002aca:	4613      	mov	r3, r2
 8002acc:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d075      	beq.n	8002bc4 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002ad8:	88fb      	ldrh	r3, [r7, #6]
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d072      	beq.n	8002bc4 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002ade:	88fb      	ldrh	r3, [r7, #6]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d91a      	bls.n	8002b1a <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002ae4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d109      	bne.n	8002b00 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002aec:	897a      	ldrh	r2, [r7, #10]
 8002aee:	88fb      	ldrh	r3, [r7, #6]
 8002af0:	1ad3      	subs	r3, r2, r3
 8002af2:	b29b      	uxth	r3, r3
 8002af4:	817b      	strh	r3, [r7, #10]
	  x++;
 8002af6:	897b      	ldrh	r3, [r7, #10]
 8002af8:	3301      	adds	r3, #1
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	817b      	strh	r3, [r7, #10]
 8002afe:	e00c      	b.n	8002b1a <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002b00:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	d108      	bne.n	8002b1a <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8002b08:	893a      	ldrh	r2, [r7, #8]
 8002b0a:	88fb      	ldrh	r3, [r7, #6]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	b29b      	uxth	r3, r3
 8002b10:	813b      	strh	r3, [r7, #8]
	  y++;
 8002b12:	893b      	ldrh	r3, [r7, #8]
 8002b14:	3301      	adds	r3, #1
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002b1a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002b26:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d11a      	bne.n	8002b64 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002b34:	893b      	ldrh	r3, [r7, #8]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d83b      	bhi.n	8002bb2 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002b40:	893b      	ldrh	r3, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d937      	bls.n	8002bb6 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002b52:	1db9      	adds	r1, r7, #6
 8002b54:	f107 000a 	add.w	r0, r7, #10
 8002b58:	f7ff ff3e 	bl	80029d8 <u8g2_clip_intersection2>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d11a      	bne.n	8002b98 <u8g2_DrawHVLine+0xe4>
	  return;
 8002b62:	e02f      	b.n	8002bc4 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002b6a:	897b      	ldrh	r3, [r7, #10]
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d824      	bhi.n	8002bba <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002b76:	897b      	ldrh	r3, [r7, #10]
 8002b78:	429a      	cmp	r2, r3
 8002b7a:	d920      	bls.n	8002bbe <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002b88:	1db9      	adds	r1, r7, #6
 8002b8a:	f107 0008 	add.w	r0, r7, #8
 8002b8e:	f7ff ff23 	bl	80029d8 <u8g2_clip_intersection2>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d014      	beq.n	8002bc2 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9c:	689c      	ldr	r4, [r3, #8]
 8002b9e:	8979      	ldrh	r1, [r7, #10]
 8002ba0:	893a      	ldrh	r2, [r7, #8]
 8002ba2:	88f8      	ldrh	r0, [r7, #6]
 8002ba4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ba8:	9300      	str	r3, [sp, #0]
 8002baa:	4603      	mov	r3, r0
 8002bac:	68f8      	ldr	r0, [r7, #12]
 8002bae:	47a0      	blx	r4
 8002bb0:	e008      	b.n	8002bc4 <u8g2_DrawHVLine+0x110>
	  return;
 8002bb2:	bf00      	nop
 8002bb4:	e006      	b.n	8002bc4 <u8g2_DrawHVLine+0x110>
	  return;
 8002bb6:	bf00      	nop
 8002bb8:	e004      	b.n	8002bc4 <u8g2_DrawHVLine+0x110>
	  return;
 8002bba:	bf00      	nop
 8002bbc:	e002      	b.n	8002bc4 <u8g2_DrawHVLine+0x110>
	  return;
 8002bbe:	bf00      	nop
 8002bc0:	e000      	b.n	8002bc4 <u8g2_DrawHVLine+0x110>
	  return;
 8002bc2:	bf00      	nop
    }
}
 8002bc4:	3714      	adds	r7, #20
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd90      	pop	{r4, r7, pc}

08002bca <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af02      	add	r7, sp, #8
 8002bd0:	60f8      	str	r0, [r7, #12]
 8002bd2:	4608      	mov	r0, r1
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	4603      	mov	r3, r0
 8002bda:	817b      	strh	r3, [r7, #10]
 8002bdc:	460b      	mov	r3, r1
 8002bde:	813b      	strh	r3, [r7, #8]
 8002be0:	4613      	mov	r3, r2
 8002be2:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8002be4:	88fb      	ldrh	r3, [r7, #6]
 8002be6:	893a      	ldrh	r2, [r7, #8]
 8002be8:	8979      	ldrh	r1, [r7, #10]
 8002bea:	2000      	movs	r0, #0
 8002bec:	9000      	str	r0, [sp, #0]
 8002bee:	68f8      	ldr	r0, [r7, #12]
 8002bf0:	f7ff ff60 	bl	8002ab4 <u8g2_DrawHVLine>
}
 8002bf4:	bf00      	nop
 8002bf6:	3710      	adds	r7, #16
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	bd80      	pop	{r7, pc}

08002bfc <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b086      	sub	sp, #24
 8002c00:	af02      	add	r7, sp, #8
 8002c02:	60f8      	str	r0, [r7, #12]
 8002c04:	4608      	mov	r0, r1
 8002c06:	4611      	mov	r1, r2
 8002c08:	461a      	mov	r2, r3
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	817b      	strh	r3, [r7, #10]
 8002c0e:	460b      	mov	r3, r1
 8002c10:	813b      	strh	r3, [r7, #8]
 8002c12:	4613      	mov	r3, r2
 8002c14:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8002c16:	88fb      	ldrh	r3, [r7, #6]
 8002c18:	893a      	ldrh	r2, [r7, #8]
 8002c1a:	8979      	ldrh	r1, [r7, #10]
 8002c1c:	2001      	movs	r0, #1
 8002c1e:	9000      	str	r0, [sp, #0]
 8002c20:	68f8      	ldr	r0, [r7, #12]
 8002c22:	f7ff ff47 	bl	8002ab4 <u8g2_DrawHVLine>
}
 8002c26:	bf00      	nop
 8002c28:	3710      	adds	r7, #16
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b084      	sub	sp, #16
 8002c32:	af02      	add	r7, sp, #8
 8002c34:	6078      	str	r0, [r7, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	807b      	strh	r3, [r7, #2]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8002c44:	883a      	ldrh	r2, [r7, #0]
 8002c46:	429a      	cmp	r2, r3
 8002c48:	d31a      	bcc.n	8002c80 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002c50:	883a      	ldrh	r2, [r7, #0]
 8002c52:	429a      	cmp	r2, r3
 8002c54:	d216      	bcs.n	8002c84 <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8002c5c:	887a      	ldrh	r2, [r7, #2]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d312      	bcc.n	8002c88 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002c68:	887a      	ldrh	r2, [r7, #2]
 8002c6a:	429a      	cmp	r2, r3
 8002c6c:	d20e      	bcs.n	8002c8c <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002c6e:	883a      	ldrh	r2, [r7, #0]
 8002c70:	8879      	ldrh	r1, [r7, #2]
 8002c72:	2300      	movs	r3, #0
 8002c74:	9300      	str	r3, [sp, #0]
 8002c76:	2301      	movs	r3, #1
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f7ff ff1b 	bl	8002ab4 <u8g2_DrawHVLine>
 8002c7e:	e006      	b.n	8002c8e <u8g2_DrawPixel+0x60>
    return;
 8002c80:	bf00      	nop
 8002c82:	e004      	b.n	8002c8e <u8g2_DrawPixel+0x60>
    return;
 8002c84:	bf00      	nop
 8002c86:	e002      	b.n	8002c8e <u8g2_DrawPixel+0x60>
    return;
 8002c88:	bf00      	nop
 8002c8a:	e000      	b.n	8002c8e <u8g2_DrawPixel+0x60>
    return;
 8002c8c:	bf00      	nop
}
 8002c8e:	3708      	adds	r7, #8
 8002c90:	46bd      	mov	sp, r7
 8002c92:	bd80      	pop	{r7, pc}

08002c94 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	78fa      	ldrb	r2, [r7, #3]
 8002ca4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8002ca8:	78fb      	ldrb	r3, [r7, #3]
 8002caa:	2b02      	cmp	r3, #2
 8002cac:	d903      	bls.n	8002cb6 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8002cb6:	bf00      	nop
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bc80      	pop	{r7}
 8002cbe:	4770      	bx	lr

08002cc0 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002cc0:	b490      	push	{r4, r7}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	4604      	mov	r4, r0
 8002cc8:	4608      	mov	r0, r1
 8002cca:	4611      	mov	r1, r2
 8002ccc:	461a      	mov	r2, r3
 8002cce:	4623      	mov	r3, r4
 8002cd0:	80fb      	strh	r3, [r7, #6]
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	80bb      	strh	r3, [r7, #4]
 8002cd6:	460b      	mov	r3, r1
 8002cd8:	807b      	strh	r3, [r7, #2]
 8002cda:	4613      	mov	r3, r2
 8002cdc:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002cde:	887a      	ldrh	r2, [r7, #2]
 8002ce0:	88bb      	ldrh	r3, [r7, #4]
 8002ce2:	429a      	cmp	r2, r3
 8002ce4:	d20d      	bcs.n	8002d02 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002ce6:	883a      	ldrh	r2, [r7, #0]
 8002ce8:	88fb      	ldrh	r3, [r7, #6]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d901      	bls.n	8002cf2 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e014      	b.n	8002d1c <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002cf2:	887a      	ldrh	r2, [r7, #2]
 8002cf4:	883b      	ldrh	r3, [r7, #0]
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d901      	bls.n	8002cfe <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e00e      	b.n	8002d1c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	e00c      	b.n	8002d1c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002d02:	883a      	ldrh	r2, [r7, #0]
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	429a      	cmp	r2, r3
 8002d08:	d907      	bls.n	8002d1a <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002d0a:	887a      	ldrh	r2, [r7, #2]
 8002d0c:	883b      	ldrh	r3, [r7, #0]
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d901      	bls.n	8002d16 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e002      	b.n	8002d1c <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002d16:	2300      	movs	r3, #0
 8002d18:	e000      	b.n	8002d1c <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002d1a:	2300      	movs	r3, #0
    }
  }
}
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	3708      	adds	r7, #8
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc90      	pop	{r4, r7}
 8002d24:	4770      	bx	lr

08002d26 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002d26:	b580      	push	{r7, lr}
 8002d28:	b084      	sub	sp, #16
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	60f8      	str	r0, [r7, #12]
 8002d2e:	4608      	mov	r0, r1
 8002d30:	4611      	mov	r1, r2
 8002d32:	461a      	mov	r2, r3
 8002d34:	4603      	mov	r3, r0
 8002d36:	817b      	strh	r3, [r7, #10]
 8002d38:	460b      	mov	r3, r1
 8002d3a:	813b      	strh	r3, [r7, #8]
 8002d3c:	4613      	mov	r3, r2
 8002d3e:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8002d4c:	8b3b      	ldrh	r3, [r7, #24]
 8002d4e:	893a      	ldrh	r2, [r7, #8]
 8002d50:	f7ff ffb6 	bl	8002cc0 <u8g2_is_intersection_decision_tree>
 8002d54:	4603      	mov	r3, r0
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d101      	bne.n	8002d5e <u8g2_IsIntersection+0x38>
    return 0; 
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e00a      	b.n	8002d74 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8002d6a:	88fb      	ldrh	r3, [r7, #6]
 8002d6c:	897a      	ldrh	r2, [r7, #10]
 8002d6e:	f7ff ffa7 	bl	8002cc0 <u8g2_is_intersection_decision_tree>
 8002d72:	4603      	mov	r3, r0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b089      	sub	sp, #36	; 0x24
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	60f8      	str	r0, [r7, #12]
 8002d84:	4608      	mov	r0, r1
 8002d86:	4611      	mov	r1, r2
 8002d88:	461a      	mov	r2, r3
 8002d8a:	4603      	mov	r3, r0
 8002d8c:	817b      	strh	r3, [r7, #10]
 8002d8e:	460b      	mov	r3, r1
 8002d90:	813b      	strh	r3, [r7, #8]
 8002d92:	4613      	mov	r3, r2
 8002d94:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002d96:	893b      	ldrh	r3, [r7, #8]
 8002d98:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002d9a:	7efb      	ldrb	r3, [r7, #27]
 8002d9c:	f003 0307 	and.w	r3, r3, #7
 8002da0:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002da2:	2301      	movs	r3, #1
 8002da4:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002da6:	7e3a      	ldrb	r2, [r7, #24]
 8002da8:	7efb      	ldrb	r3, [r7, #27]
 8002daa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dae:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002db0:	2300      	movs	r3, #0
 8002db2:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002db4:	2300      	movs	r3, #0
 8002db6:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002dbe:	2b01      	cmp	r3, #1
 8002dc0:	d801      	bhi.n	8002dc6 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002dc2:	7e3b      	ldrb	r3, [r7, #24]
 8002dc4:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d001      	beq.n	8002dd4 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002dd0:	7e3b      	ldrb	r3, [r7, #24]
 8002dd2:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002dd4:	893b      	ldrh	r3, [r7, #8]
 8002dd6:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002dd8:	8afb      	ldrh	r3, [r7, #22]
 8002dda:	f023 0307 	bic.w	r3, r3, #7
 8002dde:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	7c1b      	ldrb	r3, [r3, #16]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	8afa      	ldrh	r2, [r7, #22]
 8002dea:	fb02 f303 	mul.w	r3, r2, r3
 8002dee:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002df4:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002df6:	8afb      	ldrh	r3, [r7, #22]
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	4413      	add	r3, r2
 8002dfc:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002dfe:	897b      	ldrh	r3, [r7, #10]
 8002e00:	69fa      	ldr	r2, [r7, #28]
 8002e02:	4413      	add	r3, r2
 8002e04:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002e06:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d117      	bne.n	8002e3e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	781a      	ldrb	r2, [r3, #0]
 8002e12:	7ebb      	ldrb	r3, [r7, #26]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	b2da      	uxtb	r2, r3
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	781a      	ldrb	r2, [r3, #0]
 8002e20:	7e7b      	ldrb	r3, [r7, #25]
 8002e22:	4053      	eors	r3, r2
 8002e24:	b2da      	uxtb	r2, r3
 8002e26:	69fb      	ldr	r3, [r7, #28]
 8002e28:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	61fb      	str	r3, [r7, #28]
	len--;
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	3b01      	subs	r3, #1
 8002e34:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002e36:	88fb      	ldrh	r3, [r7, #6]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d1e8      	bne.n	8002e0e <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002e3c:	e038      	b.n	8002eb0 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	781a      	ldrb	r2, [r3, #0]
 8002e42:	7ebb      	ldrb	r3, [r7, #26]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	69fb      	ldr	r3, [r7, #28]
 8002e4a:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	781a      	ldrb	r2, [r3, #0]
 8002e50:	7e7b      	ldrb	r3, [r7, #25]
 8002e52:	4053      	eors	r3, r2
 8002e54:	b2da      	uxtb	r2, r3
 8002e56:	69fb      	ldr	r3, [r7, #28]
 8002e58:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002e5a:	7efb      	ldrb	r3, [r7, #27]
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002e60:	7efb      	ldrb	r3, [r7, #27]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	76fb      	strb	r3, [r7, #27]
      len--;
 8002e68:	88fb      	ldrh	r3, [r7, #6]
 8002e6a:	3b01      	subs	r3, #1
 8002e6c:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002e6e:	7efb      	ldrb	r3, [r7, #27]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d114      	bne.n	8002e9e <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002e78:	461a      	mov	r2, r3
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	4413      	add	r3, r2
 8002e7e:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d801      	bhi.n	8002e8e <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002e8a:	2301      	movs	r3, #1
 8002e8c:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d008      	beq.n	8002eaa <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	767b      	strb	r3, [r7, #25]
 8002e9c:	e005      	b.n	8002eaa <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002e9e:	7ebb      	ldrb	r3, [r7, #26]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002ea4:	7e7b      	ldrb	r3, [r7, #25]
 8002ea6:	005b      	lsls	r3, r3, #1
 8002ea8:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002eaa:	88fb      	ldrh	r3, [r7, #6]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d1c6      	bne.n	8002e3e <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002eb0:	bf00      	nop
 8002eb2:	3724      	adds	r7, #36	; 0x24
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	bc80      	pop	{r7}
 8002eb8:	4770      	bx	lr

08002eba <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002eba:	b580      	push	{r7, lr}
 8002ebc:	b082      	sub	sp, #8
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ed8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ee2:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	4798      	blx	r3
}
 8002ef0:	bf00      	nop
 8002ef2:	3708      	adds	r7, #8
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	4613      	mov	r3, r2
 8002f06:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	683a      	ldr	r2, [r7, #0]
 8002f12:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	68ba      	ldr	r2, [r7, #8]
 8002f18:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	79fa      	ldrb	r2, [r7, #7]
 8002f1e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	2200      	movs	r2, #0
 8002f26:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2201      	movs	r2, #1
 8002f3e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2201      	movs	r2, #1
 8002f46:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	69ba      	ldr	r2, [r7, #24]
 8002f4e:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68f8      	ldr	r0, [r7, #12]
 8002f58:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002f5a:	68f8      	ldr	r0, [r7, #12]
 8002f5c:	f7ff ffad 	bl	8002eba <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002f60:	68f8      	ldr	r0, [r7, #12]
 8002f62:	f7ff fc65 	bl	8002830 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	2200      	movs	r2, #0
 8002f6a:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8002f6e:	bf00      	nop
 8002f70:	3710      	adds	r7, #16
 8002f72:	46bd      	mov	sp, r7
 8002f74:	bd80      	pop	{r7, pc}

08002f76 <u8g2_SendF>:
}

/*============================================*/

void u8g2_SendF(u8g2_t * u8g2, const char *fmt, ...)
{
 8002f76:	b40e      	push	{r1, r2, r3}
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b085      	sub	sp, #20
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, fmt);
 8002f80:	f107 0320 	add.w	r3, r7, #32
 8002f84:	60fb      	str	r3, [r7, #12]
  u8x8_cad_vsendf(u8g2_GetU8x8(u8g2), fmt, va);
 8002f86:	68fa      	ldr	r2, [r7, #12]
 8002f88:	69f9      	ldr	r1, [r7, #28]
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa3d 	bl	800340a <u8x8_cad_vsendf>
  va_end(va);
}
 8002f90:	bf00      	nop
 8002f92:	3714      	adds	r7, #20
 8002f94:	46bd      	mov	sp, r7
 8002f96:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f9a:	b003      	add	sp, #12
 8002f9c:	4770      	bx	lr

08002f9e <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b085      	sub	sp, #20
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fb2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002fb4:	89fb      	ldrh	r3, [r7, #14]
 8002fb6:	00db      	lsls	r3, r3, #3
 8002fb8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	89fa      	ldrh	r2, [r7, #14]
 8002fbe:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	7c1b      	ldrb	r3, [r3, #16]
 8002fc4:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002fc6:	89fb      	ldrh	r3, [r7, #14]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	89fa      	ldrh	r2, [r7, #14]
 8002fd0:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fd8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002fda:	89fb      	ldrh	r3, [r7, #14]
 8002fdc:	00db      	lsls	r3, r3, #3
 8002fde:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	89fa      	ldrh	r2, [r7, #14]
 8002fe4:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fec:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002fee:	89fb      	ldrh	r3, [r7, #14]
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002ff6:	4413      	add	r3, r2
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	7c52      	ldrb	r2, [r2, #17]
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	dd08      	ble.n	8003012 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	7c5b      	ldrb	r3, [r3, #17]
 8003004:	b29a      	uxth	r2, r3
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800300c:	b29b      	uxth	r3, r3
 800300e:	1ad3      	subs	r3, r2, r3
 8003010:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8003012:	89fb      	ldrh	r3, [r7, #14]
 8003014:	00db      	lsls	r3, r3, #3
 8003016:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003034:	89fb      	ldrh	r3, [r7, #14]
 8003036:	4413      	add	r3, r2
 8003038:	b29a      	uxth	r2, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	8a9a      	ldrh	r2, [r3, #20]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 800304a:	68bb      	ldr	r3, [r7, #8]
 800304c:	8ada      	ldrh	r2, [r3, #22]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	bc80      	pop	{r7}
 800305c:	4770      	bx	lr

0800305e <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800305e:	b580      	push	{r7, lr}
 8003060:	b084      	sub	sp, #16
 8003062:	af02      	add	r7, sp, #8
 8003064:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800307e:	9300      	str	r3, [sp, #0]
 8003080:	4603      	mov	r3, r0
 8003082:	6878      	ldr	r0, [r7, #4]
 8003084:	f7ff fe4f 	bl	8002d26 <u8g2_IsIntersection>
 8003088:	4603      	mov	r3, r0
 800308a:	2b00      	cmp	r3, #0
 800308c:	d104      	bne.n	8003098 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8003096:	e03b      	b.n	8003110 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d205      	bcs.n	80030bc <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d905      	bls.n	80030d8 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d205      	bcs.n	80030f4 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003100:	429a      	cmp	r2, r3
 8003102:	d905      	bls.n	8003110 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}

08003118 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8003118:	b580      	push	{r7, lr}
 800311a:	b082      	sub	sp, #8
 800311c:	af00      	add	r7, sp, #0
 800311e:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff ff3c 	bl	8002f9e <u8g2_update_dimension_common>
}
 8003126:	bf00      	nop
 8003128:	3708      	adds	r7, #8
 800312a:	46bd      	mov	sp, r7
 800312c:	bd80      	pop	{r7, pc}

0800312e <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800312e:	b580      	push	{r7, lr}
 8003130:	b082      	sub	sp, #8
 8003132:	af00      	add	r7, sp, #0
 8003134:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ff7b 	bl	800305e <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003168:	bf00      	nop
 800316a:	3708      	adds	r7, #8
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b086      	sub	sp, #24
 8003174:	af02      	add	r7, sp, #8
 8003176:	60f8      	str	r0, [r7, #12]
 8003178:	4608      	mov	r0, r1
 800317a:	4611      	mov	r1, r2
 800317c:	461a      	mov	r2, r3
 800317e:	4603      	mov	r3, r0
 8003180:	817b      	strh	r3, [r7, #10]
 8003182:	460b      	mov	r3, r1
 8003184:	813b      	strh	r3, [r7, #8]
 8003186:	4613      	mov	r3, r2
 8003188:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 800318a:	88f8      	ldrh	r0, [r7, #6]
 800318c:	893a      	ldrh	r2, [r7, #8]
 800318e:	8979      	ldrh	r1, [r7, #10]
 8003190:	7e3b      	ldrb	r3, [r7, #24]
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	4603      	mov	r3, r0
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f7ff fc6b 	bl	8002a72 <u8g2_draw_hv_line_2dir>
}
 800319c:	bf00      	nop
 800319e:	3710      	adds	r7, #16
 80031a0:	46bd      	mov	sp, r7
 80031a2:	bd80      	pop	{r7, pc}

080031a4 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	bc80      	pop	{r7}
 80031bc:	4770      	bx	lr

080031be <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80031be:	b480      	push	{r7}
 80031c0:	b083      	sub	sp, #12
 80031c2:	af00      	add	r7, sp, #0
 80031c4:	6078      	str	r0, [r7, #4]
 80031c6:	460b      	mov	r3, r1
 80031c8:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d002      	beq.n	80031d6 <u8x8_ascii_next+0x18>
 80031d0:	78fb      	ldrb	r3, [r7, #3]
 80031d2:	2b0a      	cmp	r3, #10
 80031d4:	d102      	bne.n	80031dc <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80031d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031da:	e001      	b.n	80031e0 <u8x8_ascii_next+0x22>
  return b;
 80031dc:	78fb      	ldrb	r3, [r7, #3]
 80031de:	b29b      	uxth	r3, r3
}
 80031e0:	4618      	mov	r0, r3
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	bc80      	pop	{r7}
 80031e8:	4770      	bx	lr

080031ea <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80031ea:	b480      	push	{r7}
 80031ec:	b083      	sub	sp, #12
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	6078      	str	r0, [r7, #4]
 80031f2:	460b      	mov	r3, r1
 80031f4:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80031f6:	78fb      	ldrb	r3, [r7, #3]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d002      	beq.n	8003202 <u8x8_utf8_next+0x18>
 80031fc:	78fb      	ldrb	r3, [r7, #3]
 80031fe:	2b0a      	cmp	r3, #10
 8003200:	d102      	bne.n	8003208 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8003202:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003206:	e06e      	b.n	80032e6 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800320e:	2b00      	cmp	r3, #0
 8003210:	d145      	bne.n	800329e <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	2bfb      	cmp	r3, #251	; 0xfb
 8003216:	d908      	bls.n	800322a <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2205      	movs	r2, #5
 800321c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	f003 0301 	and.w	r3, r3, #1
 8003226:	70fb      	strb	r3, [r7, #3]
 8003228:	e032      	b.n	8003290 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	2bf7      	cmp	r3, #247	; 0xf7
 800322e:	d908      	bls.n	8003242 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2204      	movs	r2, #4
 8003234:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	f003 0303 	and.w	r3, r3, #3
 800323e:	70fb      	strb	r3, [r7, #3]
 8003240:	e026      	b.n	8003290 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	2bef      	cmp	r3, #239	; 0xef
 8003246:	d908      	bls.n	800325a <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2203      	movs	r2, #3
 800324c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8003250:	78fb      	ldrb	r3, [r7, #3]
 8003252:	f003 0307 	and.w	r3, r3, #7
 8003256:	70fb      	strb	r3, [r7, #3]
 8003258:	e01a      	b.n	8003290 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	2bdf      	cmp	r3, #223	; 0xdf
 800325e:	d908      	bls.n	8003272 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2202      	movs	r2, #2
 8003264:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8003268:	78fb      	ldrb	r3, [r7, #3]
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	70fb      	strb	r3, [r7, #3]
 8003270:	e00e      	b.n	8003290 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	2bbf      	cmp	r3, #191	; 0xbf
 8003276:	d908      	bls.n	800328a <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8003280:	78fb      	ldrb	r3, [r7, #3]
 8003282:	f003 031f 	and.w	r3, r3, #31
 8003286:	70fb      	strb	r3, [r7, #3]
 8003288:	e002      	b.n	8003290 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	b29b      	uxth	r3, r3
 800328e:	e02a      	b.n	80032e6 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	b29a      	uxth	r2, r3
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8003298:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 800329c:	e023      	b.n	80032e6 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80032a4:	3b01      	subs	r3, #1
 80032a6:	b2da      	uxtb	r2, r3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	8c1b      	ldrh	r3, [r3, #32]
 80032b2:	019b      	lsls	r3, r3, #6
 80032b4:	b29a      	uxth	r2, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 80032ba:	78fb      	ldrb	r3, [r7, #3]
 80032bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80032c0:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8c1a      	ldrh	r2, [r3, #32]
 80032c6:	78fb      	ldrb	r3, [r7, #3]
 80032c8:	b29b      	uxth	r3, r3
 80032ca:	4313      	orrs	r3, r2
 80032cc:	b29a      	uxth	r2, r3
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d002      	beq.n	80032e2 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 80032dc:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 80032e0:	e001      	b.n	80032e6 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	8c1b      	ldrh	r3, [r3, #32]
}
 80032e6:	4618      	mov	r0, r3
 80032e8:	370c      	adds	r7, #12
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bc80      	pop	{r7}
 80032ee:	4770      	bx	lr

080032f0 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80032f0:	b590      	push	{r4, r7, lr}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
 80032f8:	460b      	mov	r3, r1
 80032fa:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	691c      	ldr	r4, [r3, #16]
 8003300:	78fa      	ldrb	r2, [r7, #3]
 8003302:	2300      	movs	r3, #0
 8003304:	2120      	movs	r1, #32
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	47a0      	blx	r4
 800330a:	4603      	mov	r3, r0
}
 800330c:	4618      	mov	r0, r3
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bd90      	pop	{r4, r7, pc}

08003314 <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	460b      	mov	r3, r1
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	691c      	ldr	r4, [r3, #16]
 8003326:	7afa      	ldrb	r2, [r7, #11]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2117      	movs	r1, #23
 800332c:	68f8      	ldr	r0, [r7, #12]
 800332e:	47a0      	blx	r4
 8003330:	4603      	mov	r3, r0
}
 8003332:	4618      	mov	r0, r3
 8003334:	3714      	adds	r7, #20
 8003336:	46bd      	mov	sp, r7
 8003338:	bd90      	pop	{r4, r7, pc}

0800333a <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8003346:	1cfb      	adds	r3, r7, #3
 8003348:	461a      	mov	r2, r3
 800334a:	2101      	movs	r1, #1
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ffe1 	bl	8003314 <u8x8_byte_SendBytes>
 8003352:	4603      	mov	r3, r0
}
 8003354:	4618      	mov	r0, r3
 8003356:	3708      	adds	r7, #8
 8003358:	46bd      	mov	sp, r7
 800335a:	bd80      	pop	{r7, pc}

0800335c <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b083      	sub	sp, #12
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
 8003364:	460b      	mov	r3, r1
 8003366:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	68dc      	ldr	r4, [r3, #12]
 800336c:	78fa      	ldrb	r2, [r7, #3]
 800336e:	2300      	movs	r3, #0
 8003370:	2115      	movs	r1, #21
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	47a0      	blx	r4
 8003376:	4603      	mov	r3, r0
}
 8003378:	4618      	mov	r0, r3
 800337a:	370c      	adds	r7, #12
 800337c:	46bd      	mov	sp, r7
 800337e:	bd90      	pop	{r4, r7, pc}

08003380 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003380:	b590      	push	{r4, r7, lr}
 8003382:	b083      	sub	sp, #12
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
 8003388:	460b      	mov	r3, r1
 800338a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68dc      	ldr	r4, [r3, #12]
 8003390:	78fa      	ldrb	r2, [r7, #3]
 8003392:	2300      	movs	r3, #0
 8003394:	2116      	movs	r1, #22
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	47a0      	blx	r4
 800339a:	4603      	mov	r3, r0
}
 800339c:	4618      	mov	r0, r3
 800339e:	370c      	adds	r7, #12
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd90      	pop	{r4, r7, pc}

080033a4 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80033a4:	b590      	push	{r4, r7, lr}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	60f8      	str	r0, [r7, #12]
 80033ac:	460b      	mov	r3, r1
 80033ae:	607a      	str	r2, [r7, #4]
 80033b0:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	68dc      	ldr	r4, [r3, #12]
 80033b6:	7afa      	ldrb	r2, [r7, #11]
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2117      	movs	r1, #23
 80033bc:	68f8      	ldr	r0, [r7, #12]
 80033be:	47a0      	blx	r4
 80033c0:	4603      	mov	r3, r0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3714      	adds	r7, #20
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd90      	pop	{r4, r7, pc}

080033ca <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80033ca:	b590      	push	{r4, r7, lr}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	68dc      	ldr	r4, [r3, #12]
 80033d6:	2300      	movs	r3, #0
 80033d8:	2200      	movs	r2, #0
 80033da:	2118      	movs	r1, #24
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	47a0      	blx	r4
 80033e0:	4603      	mov	r3, r0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd90      	pop	{r4, r7, pc}

080033ea <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80033ea:	b590      	push	{r4, r7, lr}
 80033ec:	b083      	sub	sp, #12
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	68dc      	ldr	r4, [r3, #12]
 80033f6:	2300      	movs	r3, #0
 80033f8:	2200      	movs	r2, #0
 80033fa:	2119      	movs	r1, #25
 80033fc:	6878      	ldr	r0, [r7, #4]
 80033fe:	47a0      	blx	r4
 8003400:	4603      	mov	r3, r0
}
 8003402:	4618      	mov	r0, r3
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	bd90      	pop	{r4, r7, pc}

0800340a <u8x8_cad_vsendf>:

void u8x8_cad_vsendf(u8x8_t * u8x8, const char *fmt, va_list va)
{
 800340a:	b580      	push	{r7, lr}
 800340c:	b086      	sub	sp, #24
 800340e:	af00      	add	r7, sp, #0
 8003410:	60f8      	str	r0, [r7, #12]
 8003412:	60b9      	str	r1, [r7, #8]
 8003414:	607a      	str	r2, [r7, #4]
  uint8_t d;
  u8x8_cad_StartTransfer(u8x8);
 8003416:	68f8      	ldr	r0, [r7, #12]
 8003418:	f7ff ffd7 	bl	80033ca <u8x8_cad_StartTransfer>
  while( *fmt != '\0' )
 800341c:	e027      	b.n	800346e <u8x8_cad_vsendf+0x64>
  {
    d = (uint8_t)va_arg(va, int);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	1d1a      	adds	r2, r3, #4
 8003422:	607a      	str	r2, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	b2db      	uxtb	r3, r3
 8003428:	75fb      	strb	r3, [r7, #23]
    switch(*fmt)
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	781b      	ldrb	r3, [r3, #0]
 800342e:	2b64      	cmp	r3, #100	; 0x64
 8003430:	d012      	beq.n	8003458 <u8x8_cad_vsendf+0x4e>
 8003432:	2b64      	cmp	r3, #100	; 0x64
 8003434:	dc18      	bgt.n	8003468 <u8x8_cad_vsendf+0x5e>
 8003436:	2b61      	cmp	r3, #97	; 0x61
 8003438:	d002      	beq.n	8003440 <u8x8_cad_vsendf+0x36>
 800343a:	2b63      	cmp	r3, #99	; 0x63
 800343c:	d006      	beq.n	800344c <u8x8_cad_vsendf+0x42>
 800343e:	e013      	b.n	8003468 <u8x8_cad_vsendf+0x5e>
    {
      case 'a':  u8x8_cad_SendArg(u8x8, d); break;
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	4619      	mov	r1, r3
 8003444:	68f8      	ldr	r0, [r7, #12]
 8003446:	f7ff ff9b 	bl	8003380 <u8x8_cad_SendArg>
 800344a:	e00d      	b.n	8003468 <u8x8_cad_vsendf+0x5e>
      case 'c':  u8x8_cad_SendCmd(u8x8, d); break;
 800344c:	7dfb      	ldrb	r3, [r7, #23]
 800344e:	4619      	mov	r1, r3
 8003450:	68f8      	ldr	r0, [r7, #12]
 8003452:	f7ff ff83 	bl	800335c <u8x8_cad_SendCmd>
 8003456:	e007      	b.n	8003468 <u8x8_cad_vsendf+0x5e>
      case 'd':  u8x8_cad_SendData(u8x8, 1, &d); break;
 8003458:	f107 0317 	add.w	r3, r7, #23
 800345c:	461a      	mov	r2, r3
 800345e:	2101      	movs	r1, #1
 8003460:	68f8      	ldr	r0, [r7, #12]
 8003462:	f7ff ff9f 	bl	80033a4 <u8x8_cad_SendData>
 8003466:	bf00      	nop
    }
    fmt++;
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	3301      	adds	r3, #1
 800346c:	60bb      	str	r3, [r7, #8]
  while( *fmt != '\0' )
 800346e:	68bb      	ldr	r3, [r7, #8]
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1d3      	bne.n	800341e <u8x8_cad_vsendf+0x14>
  }
  u8x8_cad_EndTransfer(u8x8);
 8003476:	68f8      	ldr	r0, [r7, #12]
 8003478:	f7ff ffb7 	bl	80033ea <u8x8_cad_EndTransfer>
}
 800347c:	bf00      	nop
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}

08003484 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8003484:	b590      	push	{r4, r7, lr}
 8003486:	b085      	sub	sp, #20
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
 800348c:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	73fb      	strb	r3, [r7, #15]
    data++;
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	3301      	adds	r3, #1
 8003498:	603b      	str	r3, [r7, #0]
    switch( cmd )
 800349a:	7bfb      	ldrb	r3, [r7, #15]
 800349c:	2bfe      	cmp	r3, #254	; 0xfe
 800349e:	d031      	beq.n	8003504 <u8x8_cad_SendSequence+0x80>
 80034a0:	2bfe      	cmp	r3, #254	; 0xfe
 80034a2:	dc3d      	bgt.n	8003520 <u8x8_cad_SendSequence+0x9c>
 80034a4:	2b19      	cmp	r3, #25
 80034a6:	dc3b      	bgt.n	8003520 <u8x8_cad_SendSequence+0x9c>
 80034a8:	2b18      	cmp	r3, #24
 80034aa:	da23      	bge.n	80034f4 <u8x8_cad_SendSequence+0x70>
 80034ac:	2b16      	cmp	r3, #22
 80034ae:	dc02      	bgt.n	80034b6 <u8x8_cad_SendSequence+0x32>
 80034b0:	2b15      	cmp	r3, #21
 80034b2:	da03      	bge.n	80034bc <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80034b4:	e034      	b.n	8003520 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80034b6:	2b17      	cmp	r3, #23
 80034b8:	d00e      	beq.n	80034d8 <u8x8_cad_SendSequence+0x54>
	return;
 80034ba:	e031      	b.n	8003520 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	68dc      	ldr	r4, [r3, #12]
 80034c6:	7bba      	ldrb	r2, [r7, #14]
 80034c8:	7bf9      	ldrb	r1, [r7, #15]
 80034ca:	2300      	movs	r3, #0
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	47a0      	blx	r4
	  data++;
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	3301      	adds	r3, #1
 80034d4:	603b      	str	r3, [r7, #0]
	  break;
 80034d6:	e022      	b.n	800351e <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80034de:	f107 030e 	add.w	r3, r7, #14
 80034e2:	461a      	mov	r2, r3
 80034e4:	2101      	movs	r1, #1
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f7ff ff5c 	bl	80033a4 <u8x8_cad_SendData>
	  data++;
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	3301      	adds	r3, #1
 80034f0:	603b      	str	r3, [r7, #0]
	  break;
 80034f2:	e014      	b.n	800351e <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	68dc      	ldr	r4, [r3, #12]
 80034f8:	7bf9      	ldrb	r1, [r7, #15]
 80034fa:	2300      	movs	r3, #0
 80034fc:	2200      	movs	r2, #0
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	47a0      	blx	r4
	  break;
 8003502:	e00c      	b.n	800351e <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 800350a:	7bbb      	ldrb	r3, [r7, #14]
 800350c:	461a      	mov	r2, r3
 800350e:	2129      	movs	r1, #41	; 0x29
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f000 f9ec 	bl	80038ee <u8x8_gpio_call>
	  data++;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	3301      	adds	r3, #1
 800351a:	603b      	str	r3, [r7, #0]
	  break;
 800351c:	bf00      	nop
    cmd = *data;
 800351e:	e7b6      	b.n	800348e <u8x8_cad_SendSequence+0xa>
	return;
 8003520:	bf00      	nop
    }
  }
}
 8003522:	3714      	adds	r7, #20
 8003524:	46bd      	mov	sp, r7
 8003526:	bd90      	pop	{r4, r7, pc}

08003528 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003528:	b590      	push	{r4, r7, lr}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	607b      	str	r3, [r7, #4]
 8003532:	460b      	mov	r3, r1
 8003534:	72fb      	strb	r3, [r7, #11]
 8003536:	4613      	mov	r3, r2
 8003538:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 800353a:	7afb      	ldrb	r3, [r7, #11]
 800353c:	3b14      	subs	r3, #20
 800353e:	2b05      	cmp	r3, #5
 8003540:	d82f      	bhi.n	80035a2 <u8x8_cad_001+0x7a>
 8003542:	a201      	add	r2, pc, #4	; (adr r2, 8003548 <u8x8_cad_001+0x20>)
 8003544:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003548:	08003591 	.word	0x08003591
 800354c:	08003561 	.word	0x08003561
 8003550:	08003575 	.word	0x08003575
 8003554:	08003589 	.word	0x08003589
 8003558:	08003591 	.word	0x08003591
 800355c:	08003591 	.word	0x08003591
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003560:	2100      	movs	r1, #0
 8003562:	68f8      	ldr	r0, [r7, #12]
 8003564:	f7ff fec4 	bl	80032f0 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003568:	7abb      	ldrb	r3, [r7, #10]
 800356a:	4619      	mov	r1, r3
 800356c:	68f8      	ldr	r0, [r7, #12]
 800356e:	f7ff fee4 	bl	800333a <u8x8_byte_SendByte>
      break;
 8003572:	e018      	b.n	80035a6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 8003574:	2100      	movs	r1, #0
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f7ff feba 	bl	80032f0 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 800357c:	7abb      	ldrb	r3, [r7, #10]
 800357e:	4619      	mov	r1, r3
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7ff feda 	bl	800333a <u8x8_byte_SendByte>
      break;
 8003586:	e00e      	b.n	80035a6 <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003588:	2101      	movs	r1, #1
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f7ff feb0 	bl	80032f0 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	691c      	ldr	r4, [r3, #16]
 8003594:	7aba      	ldrb	r2, [r7, #10]
 8003596:	7af9      	ldrb	r1, [r7, #11]
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68f8      	ldr	r0, [r7, #12]
 800359c:	47a0      	blx	r4
 800359e:	4603      	mov	r3, r0
 80035a0:	e002      	b.n	80035a8 <u8x8_cad_001+0x80>
    default:
      return 0;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <u8x8_cad_001+0x80>
  }
  return 1;
 80035a6:	2301      	movs	r3, #1
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd90      	pop	{r4, r7, pc}

080035b0 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	60f8      	str	r0, [r7, #12]
 80035b8:	607b      	str	r3, [r7, #4]
 80035ba:	460b      	mov	r3, r1
 80035bc:	72fb      	strb	r3, [r7, #11]
 80035be:	4613      	mov	r3, r2
 80035c0:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 80035c2:	7afb      	ldrb	r3, [r7, #11]
 80035c4:	3b0b      	subs	r3, #11
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	f200 808e 	bhi.w	80036e8 <u8x8_d_uc1604_common+0x138>
 80035cc:	a201      	add	r2, pc, #4	; (adr r2, 80035d4 <u8x8_d_uc1604_common+0x24>)
 80035ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d2:	bf00      	nop
 80035d4:	0800367d 	.word	0x0800367d
 80035d8:	080036e9 	.word	0x080036e9
 80035dc:	08003697 	.word	0x08003697
 80035e0:	080036c9 	.word	0x080036c9
 80035e4:	080035e9 	.word	0x080035e9
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f7ff feee 	bl	80033ca <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	795b      	ldrb	r3, [r3, #5]
 80035f2:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80035f4:	7dfb      	ldrb	r3, [r7, #23]
 80035f6:	00db      	lsls	r3, r3, #3
 80035f8:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80035fa:	7dfb      	ldrb	r3, [r7, #23]
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	b2db      	uxtb	r3, r3
 8003602:	4619      	mov	r1, r3
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f7ff fea9 	bl	800335c <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 800360a:	7dfb      	ldrb	r3, [r7, #23]
 800360c:	091b      	lsrs	r3, r3, #4
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f043 0310 	orr.w	r3, r3, #16
 8003614:	b2db      	uxtb	r3, r3
 8003616:	4619      	mov	r1, r3
 8003618:	68f8      	ldr	r0, [r7, #12]
 800361a:	f7ff fe9f 	bl	800335c <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	799b      	ldrb	r3, [r3, #6]
 8003622:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 800362a:	7dbb      	ldrb	r3, [r7, #22]
 800362c:	4413      	add	r3, r2
 800362e:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 8003630:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8003634:	f003 030f 	and.w	r3, r3, #15
 8003638:	b25b      	sxtb	r3, r3
 800363a:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800363e:	b25b      	sxtb	r3, r3
 8003640:	b2db      	uxtb	r3, r3
 8003642:	4619      	mov	r1, r3
 8003644:	68f8      	ldr	r0, [r7, #12]
 8003646:	f7ff fe89 	bl	800335c <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	791b      	ldrb	r3, [r3, #4]
 800364e:	757b      	strb	r3, [r7, #21]
      c *= 8;
 8003650:	7d7b      	ldrb	r3, [r7, #21]
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 800365c:	7d7b      	ldrb	r3, [r7, #21]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4619      	mov	r1, r3
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f7ff fe9e 	bl	80033a4 <u8x8_cad_SendData>
	arg_int--;
 8003668:	7abb      	ldrb	r3, [r7, #10]
 800366a:	3b01      	subs	r3, #1
 800366c:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800366e:	7abb      	ldrb	r3, [r7, #10]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1f3      	bne.n	800365c <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 8003674:	68f8      	ldr	r0, [r7, #12]
 8003676:	f7ff feb8 	bl	80033ea <u8x8_cad_EndTransfer>
      break;
 800367a:	e037      	b.n	80036ec <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800367c:	7abb      	ldrb	r3, [r7, #10]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d104      	bne.n	800368c <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 8003682:	491d      	ldr	r1, [pc, #116]	; (80036f8 <u8x8_d_uc1604_common+0x148>)
 8003684:	68f8      	ldr	r0, [r7, #12]
 8003686:	f7ff fefd 	bl	8003484 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 800368a:	e02f      	b.n	80036ec <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 800368c:	491b      	ldr	r1, [pc, #108]	; (80036fc <u8x8_d_uc1604_common+0x14c>)
 800368e:	68f8      	ldr	r0, [r7, #12]
 8003690:	f7ff fef8 	bl	8003484 <u8x8_cad_SendSequence>
      break;
 8003694:	e02a      	b.n	80036ec <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8003696:	7abb      	ldrb	r3, [r7, #10]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d10a      	bne.n	80036b2 <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 800369c:	4918      	ldr	r1, [pc, #96]	; (8003700 <u8x8_d_uc1604_common+0x150>)
 800369e:	68f8      	ldr	r0, [r7, #12]
 80036a0:	f7ff fef0 	bl	8003484 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	7c9a      	ldrb	r2, [r3, #18]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 80036b0:	e01c      	b.n	80036ec <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 80036b2:	4914      	ldr	r1, [pc, #80]	; (8003704 <u8x8_d_uc1604_common+0x154>)
 80036b4:	68f8      	ldr	r0, [r7, #12]
 80036b6:	f7ff fee5 	bl	8003484 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	7cda      	ldrb	r2, [r3, #19]
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80036c6:	e011      	b.n	80036ec <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80036c8:	68f8      	ldr	r0, [r7, #12]
 80036ca:	f7ff fe7e 	bl	80033ca <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80036ce:	2181      	movs	r1, #129	; 0x81
 80036d0:	68f8      	ldr	r0, [r7, #12]
 80036d2:	f7ff fe43 	bl	800335c <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 80036d6:	7abb      	ldrb	r3, [r7, #10]
 80036d8:	4619      	mov	r1, r3
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f7ff fe50 	bl	8003380 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80036e0:	68f8      	ldr	r0, [r7, #12]
 80036e2:	f7ff fe82 	bl	80033ea <u8x8_cad_EndTransfer>
      break;
 80036e6:	e001      	b.n	80036ec <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 80036e8:	2300      	movs	r3, #0
 80036ea:	e000      	b.n	80036ee <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 80036ec:	2301      	movs	r3, #1
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3718      	adds	r7, #24
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	08007528 	.word	0x08007528
 80036fc:	08007538 	.word	0x08007538
 8003700:	08007540 	.word	0x08007540
 8003704:	08007548 	.word	0x08007548

08003708 <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	b084      	sub	sp, #16
 800370c:	af00      	add	r7, sp, #0
 800370e:	60f8      	str	r0, [r7, #12]
 8003710:	607b      	str	r3, [r7, #4]
 8003712:	460b      	mov	r3, r1
 8003714:	72fb      	strb	r3, [r7, #11]
 8003716:	4613      	mov	r3, r2
 8003718:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 800371a:	7aba      	ldrb	r2, [r7, #10]
 800371c:	7af9      	ldrb	r1, [r7, #11]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68f8      	ldr	r0, [r7, #12]
 8003722:	f7ff ff45 	bl	80035b0 <u8x8_d_uc1604_common>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d114      	bne.n	8003756 <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 800372c:	7afb      	ldrb	r3, [r7, #11]
 800372e:	2b09      	cmp	r3, #9
 8003730:	d002      	beq.n	8003738 <u8x8_d_uc1604_jlx19264+0x30>
 8003732:	2b0a      	cmp	r3, #10
 8003734:	d005      	beq.n	8003742 <u8x8_d_uc1604_jlx19264+0x3a>
 8003736:	e00c      	b.n	8003752 <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 8003738:	490a      	ldr	r1, [pc, #40]	; (8003764 <u8x8_d_uc1604_jlx19264+0x5c>)
 800373a:	68f8      	ldr	r0, [r7, #12]
 800373c:	f000 f816 	bl	800376c <u8x8_d_helper_display_setup_memory>
	break;
 8003740:	e00a      	b.n	8003758 <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 f825 	bl	8003792 <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 8003748:	4907      	ldr	r1, [pc, #28]	; (8003768 <u8x8_d_uc1604_jlx19264+0x60>)
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f7ff fe9a 	bl	8003484 <u8x8_cad_SendSequence>
	break;
 8003750:	e002      	b.n	8003758 <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 8003752:	2300      	movs	r3, #0
 8003754:	e001      	b.n	800375a <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 8003756:	bf00      	nop
  return 1;
 8003758:	2301      	movs	r3, #1
}
 800375a:	4618      	mov	r0, r3
 800375c:	3710      	adds	r7, #16
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	bf00      	nop
 8003764:	08007550 	.word	0x08007550
 8003768:	08007568 	.word	0x08007568

0800376c <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 800376c:	b480      	push	{r7}
 800376e:	b083      	sub	sp, #12
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	683a      	ldr	r2, [r7, #0]
 800377a:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	7c9a      	ldrb	r2, [r3, #18]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003788:	bf00      	nop
 800378a:	370c      	adds	r7, #12
 800378c:	46bd      	mov	sp, r7
 800378e:	bc80      	pop	{r7}
 8003790:	4770      	bx	lr

08003792 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8003792:	b590      	push	{r4, r7, lr}
 8003794:	b083      	sub	sp, #12
 8003796:	af00      	add	r7, sp, #0
 8003798:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	695c      	ldr	r4, [r3, #20]
 800379e:	2300      	movs	r3, #0
 80037a0:	2200      	movs	r2, #0
 80037a2:	2128      	movs	r1, #40	; 0x28
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	68dc      	ldr	r4, [r3, #12]
 80037ac:	2300      	movs	r3, #0
 80037ae:	2200      	movs	r2, #0
 80037b0:	2114      	movs	r1, #20
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80037b6:	2201      	movs	r2, #1
 80037b8:	214b      	movs	r1, #75	; 0x4b
 80037ba:	6878      	ldr	r0, [r7, #4]
 80037bc:	f000 f897 	bl	80038ee <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	791b      	ldrb	r3, [r3, #4]
 80037c6:	461a      	mov	r2, r3
 80037c8:	2129      	movs	r1, #41	; 0x29
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f88f 	bl	80038ee <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80037d0:	2200      	movs	r2, #0
 80037d2:	214b      	movs	r1, #75	; 0x4b
 80037d4:	6878      	ldr	r0, [r7, #4]
 80037d6:	f000 f88a 	bl	80038ee <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	791b      	ldrb	r3, [r3, #4]
 80037e0:	461a      	mov	r2, r3
 80037e2:	2129      	movs	r1, #41	; 0x29
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f000 f882 	bl	80038ee <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80037ea:	2201      	movs	r2, #1
 80037ec:	214b      	movs	r1, #75	; 0x4b
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 f87d 	bl	80038ee <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	795b      	ldrb	r3, [r3, #5]
 80037fa:	461a      	mov	r2, r3
 80037fc:	2129      	movs	r1, #41	; 0x29
 80037fe:	6878      	ldr	r0, [r7, #4]
 8003800:	f000 f875 	bl	80038ee <u8x8_gpio_call>
}    
 8003804:	bf00      	nop
 8003806:	370c      	adds	r7, #12
 8003808:	46bd      	mov	sp, r7
 800380a:	bd90      	pop	{r4, r7, pc}

0800380c <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800380c:	b590      	push	{r4, r7, lr}
 800380e:	b085      	sub	sp, #20
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
 8003814:	4608      	mov	r0, r1
 8003816:	4611      	mov	r1, r2
 8003818:	461a      	mov	r2, r3
 800381a:	4603      	mov	r3, r0
 800381c:	70fb      	strb	r3, [r7, #3]
 800381e:	460b      	mov	r3, r1
 8003820:	70bb      	strb	r3, [r7, #2]
 8003822:	4613      	mov	r3, r2
 8003824:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003826:	78fb      	ldrb	r3, [r7, #3]
 8003828:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 800382a:	78bb      	ldrb	r3, [r7, #2]
 800382c:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800382e:	787b      	ldrb	r3, [r7, #1]
 8003830:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003832:	6a3b      	ldr	r3, [r7, #32]
 8003834:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	689c      	ldr	r4, [r3, #8]
 800383a:	f107 0308 	add.w	r3, r7, #8
 800383e:	2201      	movs	r2, #1
 8003840:	210f      	movs	r1, #15
 8003842:	6878      	ldr	r0, [r7, #4]
 8003844:	47a0      	blx	r4
 8003846:	4603      	mov	r3, r0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	bd90      	pop	{r4, r7, pc}

08003850 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003850:	b590      	push	{r4, r7, lr}
 8003852:	b083      	sub	sp, #12
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	689c      	ldr	r4, [r3, #8]
 800385c:	2300      	movs	r3, #0
 800385e:	2200      	movs	r2, #0
 8003860:	2109      	movs	r1, #9
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	47a0      	blx	r4
}
 8003866:	bf00      	nop
 8003868:	370c      	adds	r7, #12
 800386a:	46bd      	mov	sp, r7
 800386c:	bd90      	pop	{r4, r7, pc}

0800386e <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800386e:	b590      	push	{r4, r7, lr}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	689c      	ldr	r4, [r3, #8]
 800387a:	2300      	movs	r3, #0
 800387c:	2200      	movs	r2, #0
 800387e:	210a      	movs	r1, #10
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	47a0      	blx	r4
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bd90      	pop	{r4, r7, pc}

0800388c <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800388c:	b590      	push	{r4, r7, lr}
 800388e:	b083      	sub	sp, #12
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	460b      	mov	r3, r1
 8003896:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	689c      	ldr	r4, [r3, #8]
 800389c:	78fa      	ldrb	r2, [r7, #3]
 800389e:	2300      	movs	r3, #0
 80038a0:	210b      	movs	r1, #11
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	47a0      	blx	r4
}
 80038a6:	bf00      	nop
 80038a8:	370c      	adds	r7, #12
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd90      	pop	{r4, r7, pc}

080038ae <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 80038ae:	b590      	push	{r4, r7, lr}
 80038b0:	b083      	sub	sp, #12
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689c      	ldr	r4, [r3, #8]
 80038be:	78fa      	ldrb	r2, [r7, #3]
 80038c0:	2300      	movs	r3, #0
 80038c2:	210e      	movs	r1, #14
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	47a0      	blx	r4
}
 80038c8:	bf00      	nop
 80038ca:	370c      	adds	r7, #12
 80038cc:	46bd      	mov	sp, r7
 80038ce:	bd90      	pop	{r4, r7, pc}

080038d0 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80038d0:	b590      	push	{r4, r7, lr}
 80038d2:	b083      	sub	sp, #12
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	689c      	ldr	r4, [r3, #8]
 80038dc:	2300      	movs	r3, #0
 80038de:	2200      	movs	r2, #0
 80038e0:	2110      	movs	r1, #16
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	47a0      	blx	r4
}
 80038e6:	bf00      	nop
 80038e8:	370c      	adds	r7, #12
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd90      	pop	{r4, r7, pc}

080038ee <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80038ee:	b590      	push	{r4, r7, lr}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
 80038f6:	460b      	mov	r3, r1
 80038f8:	70fb      	strb	r3, [r7, #3]
 80038fa:	4613      	mov	r3, r2
 80038fc:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	695c      	ldr	r4, [r3, #20]
 8003902:	78ba      	ldrb	r2, [r7, #2]
 8003904:	78f9      	ldrb	r1, [r7, #3]
 8003906:	2300      	movs	r3, #0
 8003908:	6878      	ldr	r0, [r7, #4]
 800390a:	47a0      	blx	r4
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	bd90      	pop	{r4, r7, pc}

08003914 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8003914:	b480      	push	{r7}
 8003916:	b085      	sub	sp, #20
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	607b      	str	r3, [r7, #4]
 800391e:	460b      	mov	r3, r1
 8003920:	72fb      	strb	r3, [r7, #11]
 8003922:	4613      	mov	r3, r2
 8003924:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003926:	2300      	movs	r3, #0
}
 8003928:	4618      	mov	r0, r3
 800392a:	3714      	adds	r7, #20
 800392c:	46bd      	mov	sp, r7
 800392e:	bc80      	pop	{r7}
 8003930:	4770      	bx	lr
	...

08003934 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a11      	ldr	r2, [pc, #68]	; (800398c <u8x8_SetupDefaults+0x58>)
 8003946:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a10      	ldr	r2, [pc, #64]	; (800398c <u8x8_SetupDefaults+0x58>)
 800394c:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a0e      	ldr	r2, [pc, #56]	; (800398c <u8x8_SetupDefaults+0x58>)
 8003952:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	4a0d      	ldr	r2, [pc, #52]	; (800398c <u8x8_SetupDefaults+0x58>)
 8003958:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	22ff      	movs	r2, #255	; 0xff
 8003974:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	22ff      	movs	r2, #255	; 0xff
 800397c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	bc80      	pop	{r7}
 8003988:	4770      	bx	lr
 800398a:	bf00      	nop
 800398c:	08003915 	.word	0x08003915

08003990 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	607a      	str	r2, [r7, #4]
 800399c:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800399e:	68f8      	ldr	r0, [r7, #12]
 80039a0:	f7ff ffc8 	bl	8003934 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68ba      	ldr	r2, [r7, #8]
 80039a8:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	687a      	ldr	r2, [r7, #4]
 80039ae:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80039bc:	68f8      	ldr	r0, [r7, #12]
 80039be:	f7ff ff47 	bl	8003850 <u8x8_SetupMemory>
}
 80039c2:	bf00      	nop
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
	...

080039cc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80039cc:	480c      	ldr	r0, [pc, #48]	; (8003a00 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80039ce:	490d      	ldr	r1, [pc, #52]	; (8003a04 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80039d0:	4a0d      	ldr	r2, [pc, #52]	; (8003a08 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80039d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039d4:	e002      	b.n	80039dc <LoopCopyDataInit>

080039d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039da:	3304      	adds	r3, #4

080039dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039e0:	d3f9      	bcc.n	80039d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039e2:	4a0a      	ldr	r2, [pc, #40]	; (8003a0c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80039e4:	4c0a      	ldr	r4, [pc, #40]	; (8003a10 <LoopFillZerobss+0x22>)
  movs r3, #0
 80039e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039e8:	e001      	b.n	80039ee <LoopFillZerobss>

080039ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039ec:	3204      	adds	r2, #4

080039ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039f0:	d3fb      	bcc.n	80039ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039f2:	f7fd fd95 	bl	8001520 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039f6:	f002 f817 	bl	8005a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039fa:	f7fd f86b 	bl	8000ad4 <main>
  bx lr
 80039fe:	4770      	bx	lr
  ldr r0, =_sdata
 8003a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a04:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 8003a08:	080075c8 	.word	0x080075c8
  ldr r2, =_sbss
 8003a0c:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 8003a10:	20000b28 	.word	0x20000b28

08003a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8003a14:	e7fe      	b.n	8003a14 <ADC1_2_IRQHandler>
	...

08003a18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a1c:	4b08      	ldr	r3, [pc, #32]	; (8003a40 <HAL_Init+0x28>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a07      	ldr	r2, [pc, #28]	; (8003a40 <HAL_Init+0x28>)
 8003a22:	f043 0310 	orr.w	r3, r3, #16
 8003a26:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003a28:	2003      	movs	r0, #3
 8003a2a:	f000 f989 	bl	8003d40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003a2e:	200f      	movs	r0, #15
 8003a30:	f000 f808 	bl	8003a44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003a34:	f7fd fc02 	bl	800123c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003a38:	2300      	movs	r3, #0
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	40022000 	.word	0x40022000

08003a44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b082      	sub	sp, #8
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a4c:	4b12      	ldr	r3, [pc, #72]	; (8003a98 <HAL_InitTick+0x54>)
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	4b12      	ldr	r3, [pc, #72]	; (8003a9c <HAL_InitTick+0x58>)
 8003a52:	781b      	ldrb	r3, [r3, #0]
 8003a54:	4619      	mov	r1, r3
 8003a56:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a5a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a62:	4618      	mov	r0, r3
 8003a64:	f000 f9af 	bl	8003dc6 <HAL_SYSTICK_Config>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d001      	beq.n	8003a72 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e00e      	b.n	8003a90 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b0f      	cmp	r3, #15
 8003a76:	d80a      	bhi.n	8003a8e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a78:	2200      	movs	r2, #0
 8003a7a:	6879      	ldr	r1, [r7, #4]
 8003a7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a80:	f000 f969 	bl	8003d56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a84:	4a06      	ldr	r2, [pc, #24]	; (8003aa0 <HAL_InitTick+0x5c>)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	e000      	b.n	8003a90 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3708      	adds	r7, #8
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	20000230 	.word	0x20000230
 8003a9c:	20000238 	.word	0x20000238
 8003aa0:	20000234 	.word	0x20000234

08003aa4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003aa8:	4b05      	ldr	r3, [pc, #20]	; (8003ac0 <HAL_IncTick+0x1c>)
 8003aaa:	781b      	ldrb	r3, [r3, #0]
 8003aac:	461a      	mov	r2, r3
 8003aae:	4b05      	ldr	r3, [pc, #20]	; (8003ac4 <HAL_IncTick+0x20>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	4a03      	ldr	r2, [pc, #12]	; (8003ac4 <HAL_IncTick+0x20>)
 8003ab6:	6013      	str	r3, [r2, #0]
}
 8003ab8:	bf00      	nop
 8003aba:	46bd      	mov	sp, r7
 8003abc:	bc80      	pop	{r7}
 8003abe:	4770      	bx	lr
 8003ac0:	20000238 	.word	0x20000238
 8003ac4:	20000b14 	.word	0x20000b14

08003ac8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	af00      	add	r7, sp, #0
  return uwTick;
 8003acc:	4b02      	ldr	r3, [pc, #8]	; (8003ad8 <HAL_GetTick+0x10>)
 8003ace:	681b      	ldr	r3, [r3, #0]
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bc80      	pop	{r7}
 8003ad6:	4770      	bx	lr
 8003ad8:	20000b14 	.word	0x20000b14

08003adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b084      	sub	sp, #16
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003ae4:	f7ff fff0 	bl	8003ac8 <HAL_GetTick>
 8003ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003af4:	d005      	beq.n	8003b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003af6:	4b0a      	ldr	r3, [pc, #40]	; (8003b20 <HAL_Delay+0x44>)
 8003af8:	781b      	ldrb	r3, [r3, #0]
 8003afa:	461a      	mov	r2, r3
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4413      	add	r3, r2
 8003b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003b02:	bf00      	nop
 8003b04:	f7ff ffe0 	bl	8003ac8 <HAL_GetTick>
 8003b08:	4602      	mov	r2, r0
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	1ad3      	subs	r3, r2, r3
 8003b0e:	68fa      	ldr	r2, [r7, #12]
 8003b10:	429a      	cmp	r2, r3
 8003b12:	d8f7      	bhi.n	8003b04 <HAL_Delay+0x28>
  {
  }
}
 8003b14:	bf00      	nop
 8003b16:	bf00      	nop
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}
 8003b1e:	bf00      	nop
 8003b20:	20000238 	.word	0x20000238

08003b24 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f003 0307 	and.w	r3, r3, #7
 8003b32:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b34:	4b0c      	ldr	r3, [pc, #48]	; (8003b68 <__NVIC_SetPriorityGrouping+0x44>)
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b40:	4013      	ands	r3, r2
 8003b42:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b4c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b50:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b54:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b56:	4a04      	ldr	r2, [pc, #16]	; (8003b68 <__NVIC_SetPriorityGrouping+0x44>)
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	60d3      	str	r3, [r2, #12]
}
 8003b5c:	bf00      	nop
 8003b5e:	3714      	adds	r7, #20
 8003b60:	46bd      	mov	sp, r7
 8003b62:	bc80      	pop	{r7}
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	e000ed00 	.word	0xe000ed00

08003b6c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b70:	4b04      	ldr	r3, [pc, #16]	; (8003b84 <__NVIC_GetPriorityGrouping+0x18>)
 8003b72:	68db      	ldr	r3, [r3, #12]
 8003b74:	0a1b      	lsrs	r3, r3, #8
 8003b76:	f003 0307 	and.w	r3, r3, #7
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	bc80      	pop	{r7}
 8003b80:	4770      	bx	lr
 8003b82:	bf00      	nop
 8003b84:	e000ed00 	.word	0xe000ed00

08003b88 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b083      	sub	sp, #12
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	4603      	mov	r3, r0
 8003b90:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	db0b      	blt.n	8003bb2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b9a:	79fb      	ldrb	r3, [r7, #7]
 8003b9c:	f003 021f 	and.w	r2, r3, #31
 8003ba0:	4906      	ldr	r1, [pc, #24]	; (8003bbc <__NVIC_EnableIRQ+0x34>)
 8003ba2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba6:	095b      	lsrs	r3, r3, #5
 8003ba8:	2001      	movs	r0, #1
 8003baa:	fa00 f202 	lsl.w	r2, r0, r2
 8003bae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bb2:	bf00      	nop
 8003bb4:	370c      	adds	r7, #12
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bc80      	pop	{r7}
 8003bba:	4770      	bx	lr
 8003bbc:	e000e100 	.word	0xe000e100

08003bc0 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	db12      	blt.n	8003bf8 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	f003 021f 	and.w	r2, r3, #31
 8003bd8:	490a      	ldr	r1, [pc, #40]	; (8003c04 <__NVIC_DisableIRQ+0x44>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2001      	movs	r0, #1
 8003be2:	fa00 f202 	lsl.w	r2, r0, r2
 8003be6:	3320      	adds	r3, #32
 8003be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003bec:	f3bf 8f4f 	dsb	sy
}
 8003bf0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bf2:	f3bf 8f6f 	isb	sy
}
 8003bf6:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bc80      	pop	{r7}
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	e000e100 	.word	0xe000e100

08003c08 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	4603      	mov	r3, r0
 8003c10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	db0c      	blt.n	8003c34 <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003c1a:	79fb      	ldrb	r3, [r7, #7]
 8003c1c:	f003 021f 	and.w	r2, r3, #31
 8003c20:	4907      	ldr	r1, [pc, #28]	; (8003c40 <__NVIC_ClearPendingIRQ+0x38>)
 8003c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c26:	095b      	lsrs	r3, r3, #5
 8003c28:	2001      	movs	r0, #1
 8003c2a:	fa00 f202 	lsl.w	r2, r0, r2
 8003c2e:	3360      	adds	r3, #96	; 0x60
 8003c30:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003c34:	bf00      	nop
 8003c36:	370c      	adds	r7, #12
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	bc80      	pop	{r7}
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	e000e100 	.word	0xe000e100

08003c44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003c44:	b480      	push	{r7}
 8003c46:	b083      	sub	sp, #12
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	6039      	str	r1, [r7, #0]
 8003c4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	db0a      	blt.n	8003c6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	b2da      	uxtb	r2, r3
 8003c5c:	490c      	ldr	r1, [pc, #48]	; (8003c90 <__NVIC_SetPriority+0x4c>)
 8003c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c62:	0112      	lsls	r2, r2, #4
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	440b      	add	r3, r1
 8003c68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c6c:	e00a      	b.n	8003c84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	b2da      	uxtb	r2, r3
 8003c72:	4908      	ldr	r1, [pc, #32]	; (8003c94 <__NVIC_SetPriority+0x50>)
 8003c74:	79fb      	ldrb	r3, [r7, #7]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	3b04      	subs	r3, #4
 8003c7c:	0112      	lsls	r2, r2, #4
 8003c7e:	b2d2      	uxtb	r2, r2
 8003c80:	440b      	add	r3, r1
 8003c82:	761a      	strb	r2, [r3, #24]
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	bc80      	pop	{r7}
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	e000e100 	.word	0xe000e100
 8003c94:	e000ed00 	.word	0xe000ed00

08003c98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b089      	sub	sp, #36	; 0x24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003cac:	69fb      	ldr	r3, [r7, #28]
 8003cae:	f1c3 0307 	rsb	r3, r3, #7
 8003cb2:	2b04      	cmp	r3, #4
 8003cb4:	bf28      	it	cs
 8003cb6:	2304      	movcs	r3, #4
 8003cb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003cba:	69fb      	ldr	r3, [r7, #28]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	2b06      	cmp	r3, #6
 8003cc0:	d902      	bls.n	8003cc8 <NVIC_EncodePriority+0x30>
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	3b03      	subs	r3, #3
 8003cc6:	e000      	b.n	8003cca <NVIC_EncodePriority+0x32>
 8003cc8:	2300      	movs	r3, #0
 8003cca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ccc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd6:	43da      	mvns	r2, r3
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	401a      	ands	r2, r3
 8003cdc:	697b      	ldr	r3, [r7, #20]
 8003cde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ce0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	fa01 f303 	lsl.w	r3, r1, r3
 8003cea:	43d9      	mvns	r1, r3
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003cf0:	4313      	orrs	r3, r2
         );
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3724      	adds	r7, #36	; 0x24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bc80      	pop	{r7}
 8003cfa:	4770      	bx	lr

08003cfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b082      	sub	sp, #8
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003d0c:	d301      	bcc.n	8003d12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003d0e:	2301      	movs	r3, #1
 8003d10:	e00f      	b.n	8003d32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003d12:	4a0a      	ldr	r2, [pc, #40]	; (8003d3c <SysTick_Config+0x40>)
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	3b01      	subs	r3, #1
 8003d18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003d1a:	210f      	movs	r1, #15
 8003d1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003d20:	f7ff ff90 	bl	8003c44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003d24:	4b05      	ldr	r3, [pc, #20]	; (8003d3c <SysTick_Config+0x40>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003d2a:	4b04      	ldr	r3, [pc, #16]	; (8003d3c <SysTick_Config+0x40>)
 8003d2c:	2207      	movs	r2, #7
 8003d2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003d30:	2300      	movs	r3, #0
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	3708      	adds	r7, #8
 8003d36:	46bd      	mov	sp, r7
 8003d38:	bd80      	pop	{r7, pc}
 8003d3a:	bf00      	nop
 8003d3c:	e000e010 	.word	0xe000e010

08003d40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b082      	sub	sp, #8
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f7ff feeb 	bl	8003b24 <__NVIC_SetPriorityGrouping>
}
 8003d4e:	bf00      	nop
 8003d50:	3708      	adds	r7, #8
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}

08003d56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d56:	b580      	push	{r7, lr}
 8003d58:	b086      	sub	sp, #24
 8003d5a:	af00      	add	r7, sp, #0
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	60b9      	str	r1, [r7, #8]
 8003d60:	607a      	str	r2, [r7, #4]
 8003d62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d64:	2300      	movs	r3, #0
 8003d66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d68:	f7ff ff00 	bl	8003b6c <__NVIC_GetPriorityGrouping>
 8003d6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68b9      	ldr	r1, [r7, #8]
 8003d72:	6978      	ldr	r0, [r7, #20]
 8003d74:	f7ff ff90 	bl	8003c98 <NVIC_EncodePriority>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d7e:	4611      	mov	r1, r2
 8003d80:	4618      	mov	r0, r3
 8003d82:	f7ff ff5f 	bl	8003c44 <__NVIC_SetPriority>
}
 8003d86:	bf00      	nop
 8003d88:	3718      	adds	r7, #24
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b082      	sub	sp, #8
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	4603      	mov	r3, r0
 8003d96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	f7ff fef3 	bl	8003b88 <__NVIC_EnableIRQ>
}
 8003da2:	bf00      	nop
 8003da4:	3708      	adds	r7, #8
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b082      	sub	sp, #8
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	4603      	mov	r3, r0
 8003db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7ff ff01 	bl	8003bc0 <__NVIC_DisableIRQ>
}
 8003dbe:	bf00      	nop
 8003dc0:	3708      	adds	r7, #8
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bd80      	pop	{r7, pc}

08003dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003dc6:	b580      	push	{r7, lr}
 8003dc8:	b082      	sub	sp, #8
 8003dca:	af00      	add	r7, sp, #0
 8003dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7ff ff94 	bl	8003cfc <SysTick_Config>
 8003dd4:	4603      	mov	r3, r0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b082      	sub	sp, #8
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	4603      	mov	r3, r0
 8003de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dec:	4618      	mov	r0, r3
 8003dee:	f7ff ff0b 	bl	8003c08 <__NVIC_ClearPendingIRQ>
}
 8003df2:	bf00      	nop
 8003df4:	3708      	adds	r7, #8
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b08b      	sub	sp, #44	; 0x2c
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003e06:	2300      	movs	r3, #0
 8003e08:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e0e:	e161      	b.n	80040d4 <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003e10:	2201      	movs	r2, #1
 8003e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	69fa      	ldr	r2, [r7, #28]
 8003e20:	4013      	ands	r3, r2
 8003e22:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003e24:	69ba      	ldr	r2, [r7, #24]
 8003e26:	69fb      	ldr	r3, [r7, #28]
 8003e28:	429a      	cmp	r2, r3
 8003e2a:	f040 8150 	bne.w	80040ce <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	685b      	ldr	r3, [r3, #4]
 8003e32:	4a97      	ldr	r2, [pc, #604]	; (8004090 <HAL_GPIO_Init+0x294>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d05e      	beq.n	8003ef6 <HAL_GPIO_Init+0xfa>
 8003e38:	4a95      	ldr	r2, [pc, #596]	; (8004090 <HAL_GPIO_Init+0x294>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d875      	bhi.n	8003f2a <HAL_GPIO_Init+0x12e>
 8003e3e:	4a95      	ldr	r2, [pc, #596]	; (8004094 <HAL_GPIO_Init+0x298>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d058      	beq.n	8003ef6 <HAL_GPIO_Init+0xfa>
 8003e44:	4a93      	ldr	r2, [pc, #588]	; (8004094 <HAL_GPIO_Init+0x298>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d86f      	bhi.n	8003f2a <HAL_GPIO_Init+0x12e>
 8003e4a:	4a93      	ldr	r2, [pc, #588]	; (8004098 <HAL_GPIO_Init+0x29c>)
 8003e4c:	4293      	cmp	r3, r2
 8003e4e:	d052      	beq.n	8003ef6 <HAL_GPIO_Init+0xfa>
 8003e50:	4a91      	ldr	r2, [pc, #580]	; (8004098 <HAL_GPIO_Init+0x29c>)
 8003e52:	4293      	cmp	r3, r2
 8003e54:	d869      	bhi.n	8003f2a <HAL_GPIO_Init+0x12e>
 8003e56:	4a91      	ldr	r2, [pc, #580]	; (800409c <HAL_GPIO_Init+0x2a0>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d04c      	beq.n	8003ef6 <HAL_GPIO_Init+0xfa>
 8003e5c:	4a8f      	ldr	r2, [pc, #572]	; (800409c <HAL_GPIO_Init+0x2a0>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d863      	bhi.n	8003f2a <HAL_GPIO_Init+0x12e>
 8003e62:	4a8f      	ldr	r2, [pc, #572]	; (80040a0 <HAL_GPIO_Init+0x2a4>)
 8003e64:	4293      	cmp	r3, r2
 8003e66:	d046      	beq.n	8003ef6 <HAL_GPIO_Init+0xfa>
 8003e68:	4a8d      	ldr	r2, [pc, #564]	; (80040a0 <HAL_GPIO_Init+0x2a4>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d85d      	bhi.n	8003f2a <HAL_GPIO_Init+0x12e>
 8003e6e:	2b12      	cmp	r3, #18
 8003e70:	d82a      	bhi.n	8003ec8 <HAL_GPIO_Init+0xcc>
 8003e72:	2b12      	cmp	r3, #18
 8003e74:	d859      	bhi.n	8003f2a <HAL_GPIO_Init+0x12e>
 8003e76:	a201      	add	r2, pc, #4	; (adr r2, 8003e7c <HAL_GPIO_Init+0x80>)
 8003e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e7c:	08003ef7 	.word	0x08003ef7
 8003e80:	08003ed1 	.word	0x08003ed1
 8003e84:	08003ee3 	.word	0x08003ee3
 8003e88:	08003f25 	.word	0x08003f25
 8003e8c:	08003f2b 	.word	0x08003f2b
 8003e90:	08003f2b 	.word	0x08003f2b
 8003e94:	08003f2b 	.word	0x08003f2b
 8003e98:	08003f2b 	.word	0x08003f2b
 8003e9c:	08003f2b 	.word	0x08003f2b
 8003ea0:	08003f2b 	.word	0x08003f2b
 8003ea4:	08003f2b 	.word	0x08003f2b
 8003ea8:	08003f2b 	.word	0x08003f2b
 8003eac:	08003f2b 	.word	0x08003f2b
 8003eb0:	08003f2b 	.word	0x08003f2b
 8003eb4:	08003f2b 	.word	0x08003f2b
 8003eb8:	08003f2b 	.word	0x08003f2b
 8003ebc:	08003f2b 	.word	0x08003f2b
 8003ec0:	08003ed9 	.word	0x08003ed9
 8003ec4:	08003eed 	.word	0x08003eed
 8003ec8:	4a76      	ldr	r2, [pc, #472]	; (80040a4 <HAL_GPIO_Init+0x2a8>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d013      	beq.n	8003ef6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003ece:	e02c      	b.n	8003f2a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003ed0:	683b      	ldr	r3, [r7, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	623b      	str	r3, [r7, #32]
          break;
 8003ed6:	e029      	b.n	8003f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003ed8:	683b      	ldr	r3, [r7, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	3304      	adds	r3, #4
 8003ede:	623b      	str	r3, [r7, #32]
          break;
 8003ee0:	e024      	b.n	8003f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	3308      	adds	r3, #8
 8003ee8:	623b      	str	r3, [r7, #32]
          break;
 8003eea:	e01f      	b.n	8003f2c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	330c      	adds	r3, #12
 8003ef2:	623b      	str	r3, [r7, #32]
          break;
 8003ef4:	e01a      	b.n	8003f2c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d102      	bne.n	8003f04 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003efe:	2304      	movs	r3, #4
 8003f00:	623b      	str	r3, [r7, #32]
          break;
 8003f02:	e013      	b.n	8003f2c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d105      	bne.n	8003f18 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f0c:	2308      	movs	r3, #8
 8003f0e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	69fa      	ldr	r2, [r7, #28]
 8003f14:	611a      	str	r2, [r3, #16]
          break;
 8003f16:	e009      	b.n	8003f2c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003f18:	2308      	movs	r3, #8
 8003f1a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	69fa      	ldr	r2, [r7, #28]
 8003f20:	615a      	str	r2, [r3, #20]
          break;
 8003f22:	e003      	b.n	8003f2c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003f24:	2300      	movs	r3, #0
 8003f26:	623b      	str	r3, [r7, #32]
          break;
 8003f28:	e000      	b.n	8003f2c <HAL_GPIO_Init+0x130>
          break;
 8003f2a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003f2c:	69bb      	ldr	r3, [r7, #24]
 8003f2e:	2bff      	cmp	r3, #255	; 0xff
 8003f30:	d801      	bhi.n	8003f36 <HAL_GPIO_Init+0x13a>
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	e001      	b.n	8003f3a <HAL_GPIO_Init+0x13e>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	3304      	adds	r3, #4
 8003f3a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003f3c:	69bb      	ldr	r3, [r7, #24]
 8003f3e:	2bff      	cmp	r3, #255	; 0xff
 8003f40:	d802      	bhi.n	8003f48 <HAL_GPIO_Init+0x14c>
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f44:	009b      	lsls	r3, r3, #2
 8003f46:	e002      	b.n	8003f4e <HAL_GPIO_Init+0x152>
 8003f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f4a:	3b08      	subs	r3, #8
 8003f4c:	009b      	lsls	r3, r3, #2
 8003f4e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f50:	697b      	ldr	r3, [r7, #20]
 8003f52:	681a      	ldr	r2, [r3, #0]
 8003f54:	210f      	movs	r1, #15
 8003f56:	693b      	ldr	r3, [r7, #16]
 8003f58:	fa01 f303 	lsl.w	r3, r1, r3
 8003f5c:	43db      	mvns	r3, r3
 8003f5e:	401a      	ands	r2, r3
 8003f60:	6a39      	ldr	r1, [r7, #32]
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	fa01 f303 	lsl.w	r3, r1, r3
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	697b      	ldr	r3, [r7, #20]
 8003f6c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	f000 80a9 	beq.w	80040ce <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f7c:	4b4a      	ldr	r3, [pc, #296]	; (80040a8 <HAL_GPIO_Init+0x2ac>)
 8003f7e:	699b      	ldr	r3, [r3, #24]
 8003f80:	4a49      	ldr	r2, [pc, #292]	; (80040a8 <HAL_GPIO_Init+0x2ac>)
 8003f82:	f043 0301 	orr.w	r3, r3, #1
 8003f86:	6193      	str	r3, [r2, #24]
 8003f88:	4b47      	ldr	r3, [pc, #284]	; (80040a8 <HAL_GPIO_Init+0x2ac>)
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	f003 0301 	and.w	r3, r3, #1
 8003f90:	60bb      	str	r3, [r7, #8]
 8003f92:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f94:	4a45      	ldr	r2, [pc, #276]	; (80040ac <HAL_GPIO_Init+0x2b0>)
 8003f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f98:	089b      	lsrs	r3, r3, #2
 8003f9a:	3302      	adds	r3, #2
 8003f9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003fa0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fa4:	f003 0303 	and.w	r3, r3, #3
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	220f      	movs	r2, #15
 8003fac:	fa02 f303 	lsl.w	r3, r2, r3
 8003fb0:	43db      	mvns	r3, r3
 8003fb2:	68fa      	ldr	r2, [r7, #12]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	4a3d      	ldr	r2, [pc, #244]	; (80040b0 <HAL_GPIO_Init+0x2b4>)
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d00d      	beq.n	8003fdc <HAL_GPIO_Init+0x1e0>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a3c      	ldr	r2, [pc, #240]	; (80040b4 <HAL_GPIO_Init+0x2b8>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d007      	beq.n	8003fd8 <HAL_GPIO_Init+0x1dc>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a3b      	ldr	r2, [pc, #236]	; (80040b8 <HAL_GPIO_Init+0x2bc>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d101      	bne.n	8003fd4 <HAL_GPIO_Init+0x1d8>
 8003fd0:	2302      	movs	r3, #2
 8003fd2:	e004      	b.n	8003fde <HAL_GPIO_Init+0x1e2>
 8003fd4:	2303      	movs	r3, #3
 8003fd6:	e002      	b.n	8003fde <HAL_GPIO_Init+0x1e2>
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e000      	b.n	8003fde <HAL_GPIO_Init+0x1e2>
 8003fdc:	2300      	movs	r3, #0
 8003fde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fe0:	f002 0203 	and.w	r2, r2, #3
 8003fe4:	0092      	lsls	r2, r2, #2
 8003fe6:	4093      	lsls	r3, r2
 8003fe8:	68fa      	ldr	r2, [r7, #12]
 8003fea:	4313      	orrs	r3, r2
 8003fec:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fee:	492f      	ldr	r1, [pc, #188]	; (80040ac <HAL_GPIO_Init+0x2b0>)
 8003ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ff2:	089b      	lsrs	r3, r3, #2
 8003ff4:	3302      	adds	r3, #2
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003ffc:	683b      	ldr	r3, [r7, #0]
 8003ffe:	685b      	ldr	r3, [r3, #4]
 8004000:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004004:	2b00      	cmp	r3, #0
 8004006:	d006      	beq.n	8004016 <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004008:	4b2c      	ldr	r3, [pc, #176]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 800400a:	681a      	ldr	r2, [r3, #0]
 800400c:	492b      	ldr	r1, [pc, #172]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 800400e:	69bb      	ldr	r3, [r7, #24]
 8004010:	4313      	orrs	r3, r2
 8004012:	600b      	str	r3, [r1, #0]
 8004014:	e006      	b.n	8004024 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004016:	4b29      	ldr	r3, [pc, #164]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 8004018:	681a      	ldr	r2, [r3, #0]
 800401a:	69bb      	ldr	r3, [r7, #24]
 800401c:	43db      	mvns	r3, r3
 800401e:	4927      	ldr	r1, [pc, #156]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 8004020:	4013      	ands	r3, r2
 8004022:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d006      	beq.n	800403e <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004030:	4b22      	ldr	r3, [pc, #136]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 8004032:	685a      	ldr	r2, [r3, #4]
 8004034:	4921      	ldr	r1, [pc, #132]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 8004036:	69bb      	ldr	r3, [r7, #24]
 8004038:	4313      	orrs	r3, r2
 800403a:	604b      	str	r3, [r1, #4]
 800403c:	e006      	b.n	800404c <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800403e:	4b1f      	ldr	r3, [pc, #124]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	43db      	mvns	r3, r3
 8004046:	491d      	ldr	r1, [pc, #116]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 8004048:	4013      	ands	r3, r2
 800404a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d006      	beq.n	8004066 <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004058:	4b18      	ldr	r3, [pc, #96]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 800405a:	689a      	ldr	r2, [r3, #8]
 800405c:	4917      	ldr	r1, [pc, #92]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 800405e:	69bb      	ldr	r3, [r7, #24]
 8004060:	4313      	orrs	r3, r2
 8004062:	608b      	str	r3, [r1, #8]
 8004064:	e006      	b.n	8004074 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004066:	4b15      	ldr	r3, [pc, #84]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 8004068:	689a      	ldr	r2, [r3, #8]
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	43db      	mvns	r3, r3
 800406e:	4913      	ldr	r1, [pc, #76]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 8004070:	4013      	ands	r3, r2
 8004072:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685b      	ldr	r3, [r3, #4]
 8004078:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d01f      	beq.n	80040c0 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004080:	4b0e      	ldr	r3, [pc, #56]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 8004082:	68da      	ldr	r2, [r3, #12]
 8004084:	490d      	ldr	r1, [pc, #52]	; (80040bc <HAL_GPIO_Init+0x2c0>)
 8004086:	69bb      	ldr	r3, [r7, #24]
 8004088:	4313      	orrs	r3, r2
 800408a:	60cb      	str	r3, [r1, #12]
 800408c:	e01f      	b.n	80040ce <HAL_GPIO_Init+0x2d2>
 800408e:	bf00      	nop
 8004090:	10320000 	.word	0x10320000
 8004094:	10310000 	.word	0x10310000
 8004098:	10220000 	.word	0x10220000
 800409c:	10210000 	.word	0x10210000
 80040a0:	10120000 	.word	0x10120000
 80040a4:	10110000 	.word	0x10110000
 80040a8:	40021000 	.word	0x40021000
 80040ac:	40010000 	.word	0x40010000
 80040b0:	40010800 	.word	0x40010800
 80040b4:	40010c00 	.word	0x40010c00
 80040b8:	40011000 	.word	0x40011000
 80040bc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80040c0:	4b0b      	ldr	r3, [pc, #44]	; (80040f0 <HAL_GPIO_Init+0x2f4>)
 80040c2:	68da      	ldr	r2, [r3, #12]
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	43db      	mvns	r3, r3
 80040c8:	4909      	ldr	r1, [pc, #36]	; (80040f0 <HAL_GPIO_Init+0x2f4>)
 80040ca:	4013      	ands	r3, r2
 80040cc:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80040ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d0:	3301      	adds	r3, #1
 80040d2:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040da:	fa22 f303 	lsr.w	r3, r2, r3
 80040de:	2b00      	cmp	r3, #0
 80040e0:	f47f ae96 	bne.w	8003e10 <HAL_GPIO_Init+0x14>
  }
}
 80040e4:	bf00      	nop
 80040e6:	bf00      	nop
 80040e8:	372c      	adds	r7, #44	; 0x2c
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bc80      	pop	{r7}
 80040ee:	4770      	bx	lr
 80040f0:	40010400 	.word	0x40010400

080040f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040f4:	b480      	push	{r7}
 80040f6:	b083      	sub	sp, #12
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	460b      	mov	r3, r1
 80040fe:	807b      	strh	r3, [r7, #2]
 8004100:	4613      	mov	r3, r2
 8004102:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004104:	787b      	ldrb	r3, [r7, #1]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d003      	beq.n	8004112 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800410a:	887a      	ldrh	r2, [r7, #2]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8004110:	e003      	b.n	800411a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8004112:	887b      	ldrh	r3, [r7, #2]
 8004114:	041a      	lsls	r2, r3, #16
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	611a      	str	r2, [r3, #16]
}
 800411a:	bf00      	nop
 800411c:	370c      	adds	r7, #12
 800411e:	46bd      	mov	sp, r7
 8004120:	bc80      	pop	{r7}
 8004122:	4770      	bx	lr

08004124 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8004124:	b480      	push	{r7}
 8004126:	b085      	sub	sp, #20
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004136:	887a      	ldrh	r2, [r7, #2]
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	4013      	ands	r3, r2
 800413c:	041a      	lsls	r2, r3, #16
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	43d9      	mvns	r1, r3
 8004142:	887b      	ldrh	r3, [r7, #2]
 8004144:	400b      	ands	r3, r1
 8004146:	431a      	orrs	r2, r3
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	611a      	str	r2, [r3, #16]
}
 800414c:	bf00      	nop
 800414e:	3714      	adds	r7, #20
 8004150:	46bd      	mov	sp, r7
 8004152:	bc80      	pop	{r7}
 8004154:	4770      	bx	lr
	...

08004158 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004162:	4b08      	ldr	r3, [pc, #32]	; (8004184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004164:	695a      	ldr	r2, [r3, #20]
 8004166:	88fb      	ldrh	r3, [r7, #6]
 8004168:	4013      	ands	r3, r2
 800416a:	2b00      	cmp	r3, #0
 800416c:	d006      	beq.n	800417c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800416e:	4a05      	ldr	r2, [pc, #20]	; (8004184 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004170:	88fb      	ldrh	r3, [r7, #6]
 8004172:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004174:	88fb      	ldrh	r3, [r7, #6]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fc f886 	bl	8000288 <HAL_GPIO_EXTI_Callback>
  }
}
 800417c:	bf00      	nop
 800417e:	3708      	adds	r7, #8
 8004180:	46bd      	mov	sp, r7
 8004182:	bd80      	pop	{r7, pc}
 8004184:	40010400 	.word	0x40010400

08004188 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b086      	sub	sp, #24
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	e272      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f003 0301 	and.w	r3, r3, #1
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	f000 8087 	beq.w	80042b6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80041a8:	4b92      	ldr	r3, [pc, #584]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f003 030c 	and.w	r3, r3, #12
 80041b0:	2b04      	cmp	r3, #4
 80041b2:	d00c      	beq.n	80041ce <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80041b4:	4b8f      	ldr	r3, [pc, #572]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80041b6:	685b      	ldr	r3, [r3, #4]
 80041b8:	f003 030c 	and.w	r3, r3, #12
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d112      	bne.n	80041e6 <HAL_RCC_OscConfig+0x5e>
 80041c0:	4b8c      	ldr	r3, [pc, #560]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80041c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041cc:	d10b      	bne.n	80041e6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041ce:	4b89      	ldr	r3, [pc, #548]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d06c      	beq.n	80042b4 <HAL_RCC_OscConfig+0x12c>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	685b      	ldr	r3, [r3, #4]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d168      	bne.n	80042b4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80041e2:	2301      	movs	r3, #1
 80041e4:	e24c      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041ee:	d106      	bne.n	80041fe <HAL_RCC_OscConfig+0x76>
 80041f0:	4b80      	ldr	r3, [pc, #512]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	4a7f      	ldr	r2, [pc, #508]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80041f6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041fa:	6013      	str	r3, [r2, #0]
 80041fc:	e02e      	b.n	800425c <HAL_RCC_OscConfig+0xd4>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d10c      	bne.n	8004220 <HAL_RCC_OscConfig+0x98>
 8004206:	4b7b      	ldr	r3, [pc, #492]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	4a7a      	ldr	r2, [pc, #488]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800420c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004210:	6013      	str	r3, [r2, #0]
 8004212:	4b78      	ldr	r3, [pc, #480]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a77      	ldr	r2, [pc, #476]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004218:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800421c:	6013      	str	r3, [r2, #0]
 800421e:	e01d      	b.n	800425c <HAL_RCC_OscConfig+0xd4>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004228:	d10c      	bne.n	8004244 <HAL_RCC_OscConfig+0xbc>
 800422a:	4b72      	ldr	r3, [pc, #456]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a71      	ldr	r2, [pc, #452]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004230:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004234:	6013      	str	r3, [r2, #0]
 8004236:	4b6f      	ldr	r3, [pc, #444]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a6e      	ldr	r2, [pc, #440]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800423c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004240:	6013      	str	r3, [r2, #0]
 8004242:	e00b      	b.n	800425c <HAL_RCC_OscConfig+0xd4>
 8004244:	4b6b      	ldr	r3, [pc, #428]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a6a      	ldr	r2, [pc, #424]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800424a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424e:	6013      	str	r3, [r2, #0]
 8004250:	4b68      	ldr	r3, [pc, #416]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a67      	ldr	r2, [pc, #412]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004256:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800425a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d013      	beq.n	800428c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004264:	f7ff fc30 	bl	8003ac8 <HAL_GetTick>
 8004268:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800426a:	e008      	b.n	800427e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800426c:	f7ff fc2c 	bl	8003ac8 <HAL_GetTick>
 8004270:	4602      	mov	r2, r0
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	2b64      	cmp	r3, #100	; 0x64
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e200      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800427e:	4b5d      	ldr	r3, [pc, #372]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0f0      	beq.n	800426c <HAL_RCC_OscConfig+0xe4>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800428c:	f7ff fc1c 	bl	8003ac8 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004292:	e008      	b.n	80042a6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004294:	f7ff fc18 	bl	8003ac8 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	2b64      	cmp	r3, #100	; 0x64
 80042a0:	d901      	bls.n	80042a6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80042a2:	2303      	movs	r3, #3
 80042a4:	e1ec      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042a6:	4b53      	ldr	r3, [pc, #332]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1f0      	bne.n	8004294 <HAL_RCC_OscConfig+0x10c>
 80042b2:	e000      	b.n	80042b6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042b4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 0302 	and.w	r3, r3, #2
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d063      	beq.n	800438a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80042c2:	4b4c      	ldr	r3, [pc, #304]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	f003 030c 	and.w	r3, r3, #12
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d00b      	beq.n	80042e6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80042ce:	4b49      	ldr	r3, [pc, #292]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	f003 030c 	and.w	r3, r3, #12
 80042d6:	2b08      	cmp	r3, #8
 80042d8:	d11c      	bne.n	8004314 <HAL_RCC_OscConfig+0x18c>
 80042da:	4b46      	ldr	r3, [pc, #280]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d116      	bne.n	8004314 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042e6:	4b43      	ldr	r3, [pc, #268]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f003 0302 	and.w	r3, r3, #2
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d005      	beq.n	80042fe <HAL_RCC_OscConfig+0x176>
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	691b      	ldr	r3, [r3, #16]
 80042f6:	2b01      	cmp	r3, #1
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e1c0      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042fe:	4b3d      	ldr	r3, [pc, #244]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	00db      	lsls	r3, r3, #3
 800430c:	4939      	ldr	r1, [pc, #228]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800430e:	4313      	orrs	r3, r2
 8004310:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004312:	e03a      	b.n	800438a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	691b      	ldr	r3, [r3, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d020      	beq.n	800435e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800431c:	4b36      	ldr	r3, [pc, #216]	; (80043f8 <HAL_RCC_OscConfig+0x270>)
 800431e:	2201      	movs	r2, #1
 8004320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004322:	f7ff fbd1 	bl	8003ac8 <HAL_GetTick>
 8004326:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004328:	e008      	b.n	800433c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800432a:	f7ff fbcd 	bl	8003ac8 <HAL_GetTick>
 800432e:	4602      	mov	r2, r0
 8004330:	693b      	ldr	r3, [r7, #16]
 8004332:	1ad3      	subs	r3, r2, r3
 8004334:	2b02      	cmp	r3, #2
 8004336:	d901      	bls.n	800433c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004338:	2303      	movs	r3, #3
 800433a:	e1a1      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800433c:	4b2d      	ldr	r3, [pc, #180]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f003 0302 	and.w	r3, r3, #2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d0f0      	beq.n	800432a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004348:	4b2a      	ldr	r3, [pc, #168]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	695b      	ldr	r3, [r3, #20]
 8004354:	00db      	lsls	r3, r3, #3
 8004356:	4927      	ldr	r1, [pc, #156]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004358:	4313      	orrs	r3, r2
 800435a:	600b      	str	r3, [r1, #0]
 800435c:	e015      	b.n	800438a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800435e:	4b26      	ldr	r3, [pc, #152]	; (80043f8 <HAL_RCC_OscConfig+0x270>)
 8004360:	2200      	movs	r2, #0
 8004362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004364:	f7ff fbb0 	bl	8003ac8 <HAL_GetTick>
 8004368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800436a:	e008      	b.n	800437e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800436c:	f7ff fbac 	bl	8003ac8 <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b02      	cmp	r3, #2
 8004378:	d901      	bls.n	800437e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e180      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800437e:	4b1d      	ldr	r3, [pc, #116]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d1f0      	bne.n	800436c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 0308 	and.w	r3, r3, #8
 8004392:	2b00      	cmp	r3, #0
 8004394:	d03a      	beq.n	800440c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d019      	beq.n	80043d2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800439e:	4b17      	ldr	r3, [pc, #92]	; (80043fc <HAL_RCC_OscConfig+0x274>)
 80043a0:	2201      	movs	r2, #1
 80043a2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043a4:	f7ff fb90 	bl	8003ac8 <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043ac:	f7ff fb8c 	bl	8003ac8 <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e160      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043be:	4b0d      	ldr	r3, [pc, #52]	; (80043f4 <HAL_RCC_OscConfig+0x26c>)
 80043c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d0f0      	beq.n	80043ac <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80043ca:	2001      	movs	r0, #1
 80043cc:	f000 fad8 	bl	8004980 <RCC_Delay>
 80043d0:	e01c      	b.n	800440c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80043d2:	4b0a      	ldr	r3, [pc, #40]	; (80043fc <HAL_RCC_OscConfig+0x274>)
 80043d4:	2200      	movs	r2, #0
 80043d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80043d8:	f7ff fb76 	bl	8003ac8 <HAL_GetTick>
 80043dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043de:	e00f      	b.n	8004400 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80043e0:	f7ff fb72 	bl	8003ac8 <HAL_GetTick>
 80043e4:	4602      	mov	r2, r0
 80043e6:	693b      	ldr	r3, [r7, #16]
 80043e8:	1ad3      	subs	r3, r2, r3
 80043ea:	2b02      	cmp	r3, #2
 80043ec:	d908      	bls.n	8004400 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043ee:	2303      	movs	r3, #3
 80043f0:	e146      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
 80043f2:	bf00      	nop
 80043f4:	40021000 	.word	0x40021000
 80043f8:	42420000 	.word	0x42420000
 80043fc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004400:	4b92      	ldr	r3, [pc, #584]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004404:	f003 0302 	and.w	r3, r3, #2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d1e9      	bne.n	80043e0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0304 	and.w	r3, r3, #4
 8004414:	2b00      	cmp	r3, #0
 8004416:	f000 80a6 	beq.w	8004566 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800441a:	2300      	movs	r3, #0
 800441c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800441e:	4b8b      	ldr	r3, [pc, #556]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004420:	69db      	ldr	r3, [r3, #28]
 8004422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d10d      	bne.n	8004446 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800442a:	4b88      	ldr	r3, [pc, #544]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	4a87      	ldr	r2, [pc, #540]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004430:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004434:	61d3      	str	r3, [r2, #28]
 8004436:	4b85      	ldr	r3, [pc, #532]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800443e:	60bb      	str	r3, [r7, #8]
 8004440:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004442:	2301      	movs	r3, #1
 8004444:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004446:	4b82      	ldr	r3, [pc, #520]	; (8004650 <HAL_RCC_OscConfig+0x4c8>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444e:	2b00      	cmp	r3, #0
 8004450:	d118      	bne.n	8004484 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004452:	4b7f      	ldr	r3, [pc, #508]	; (8004650 <HAL_RCC_OscConfig+0x4c8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4a7e      	ldr	r2, [pc, #504]	; (8004650 <HAL_RCC_OscConfig+0x4c8>)
 8004458:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800445c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800445e:	f7ff fb33 	bl	8003ac8 <HAL_GetTick>
 8004462:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004464:	e008      	b.n	8004478 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004466:	f7ff fb2f 	bl	8003ac8 <HAL_GetTick>
 800446a:	4602      	mov	r2, r0
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	2b64      	cmp	r3, #100	; 0x64
 8004472:	d901      	bls.n	8004478 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004474:	2303      	movs	r3, #3
 8004476:	e103      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004478:	4b75      	ldr	r3, [pc, #468]	; (8004650 <HAL_RCC_OscConfig+0x4c8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d0f0      	beq.n	8004466 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68db      	ldr	r3, [r3, #12]
 8004488:	2b01      	cmp	r3, #1
 800448a:	d106      	bne.n	800449a <HAL_RCC_OscConfig+0x312>
 800448c:	4b6f      	ldr	r3, [pc, #444]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 800448e:	6a1b      	ldr	r3, [r3, #32]
 8004490:	4a6e      	ldr	r2, [pc, #440]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004492:	f043 0301 	orr.w	r3, r3, #1
 8004496:	6213      	str	r3, [r2, #32]
 8004498:	e02d      	b.n	80044f6 <HAL_RCC_OscConfig+0x36e>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	68db      	ldr	r3, [r3, #12]
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d10c      	bne.n	80044bc <HAL_RCC_OscConfig+0x334>
 80044a2:	4b6a      	ldr	r3, [pc, #424]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	4a69      	ldr	r2, [pc, #420]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044a8:	f023 0301 	bic.w	r3, r3, #1
 80044ac:	6213      	str	r3, [r2, #32]
 80044ae:	4b67      	ldr	r3, [pc, #412]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044b0:	6a1b      	ldr	r3, [r3, #32]
 80044b2:	4a66      	ldr	r2, [pc, #408]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044b4:	f023 0304 	bic.w	r3, r3, #4
 80044b8:	6213      	str	r3, [r2, #32]
 80044ba:	e01c      	b.n	80044f6 <HAL_RCC_OscConfig+0x36e>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	68db      	ldr	r3, [r3, #12]
 80044c0:	2b05      	cmp	r3, #5
 80044c2:	d10c      	bne.n	80044de <HAL_RCC_OscConfig+0x356>
 80044c4:	4b61      	ldr	r3, [pc, #388]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	4a60      	ldr	r2, [pc, #384]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044ca:	f043 0304 	orr.w	r3, r3, #4
 80044ce:	6213      	str	r3, [r2, #32]
 80044d0:	4b5e      	ldr	r3, [pc, #376]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044d2:	6a1b      	ldr	r3, [r3, #32]
 80044d4:	4a5d      	ldr	r2, [pc, #372]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044d6:	f043 0301 	orr.w	r3, r3, #1
 80044da:	6213      	str	r3, [r2, #32]
 80044dc:	e00b      	b.n	80044f6 <HAL_RCC_OscConfig+0x36e>
 80044de:	4b5b      	ldr	r3, [pc, #364]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044e0:	6a1b      	ldr	r3, [r3, #32]
 80044e2:	4a5a      	ldr	r2, [pc, #360]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044e4:	f023 0301 	bic.w	r3, r3, #1
 80044e8:	6213      	str	r3, [r2, #32]
 80044ea:	4b58      	ldr	r3, [pc, #352]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044ec:	6a1b      	ldr	r3, [r3, #32]
 80044ee:	4a57      	ldr	r2, [pc, #348]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80044f0:	f023 0304 	bic.w	r3, r3, #4
 80044f4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d015      	beq.n	800452a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044fe:	f7ff fae3 	bl	8003ac8 <HAL_GetTick>
 8004502:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004504:	e00a      	b.n	800451c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004506:	f7ff fadf 	bl	8003ac8 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	693b      	ldr	r3, [r7, #16]
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	f241 3288 	movw	r2, #5000	; 0x1388
 8004514:	4293      	cmp	r3, r2
 8004516:	d901      	bls.n	800451c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004518:	2303      	movs	r3, #3
 800451a:	e0b1      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451c:	4b4b      	ldr	r3, [pc, #300]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f003 0302 	and.w	r3, r3, #2
 8004524:	2b00      	cmp	r3, #0
 8004526:	d0ee      	beq.n	8004506 <HAL_RCC_OscConfig+0x37e>
 8004528:	e014      	b.n	8004554 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800452a:	f7ff facd 	bl	8003ac8 <HAL_GetTick>
 800452e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004530:	e00a      	b.n	8004548 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004532:	f7ff fac9 	bl	8003ac8 <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004540:	4293      	cmp	r3, r2
 8004542:	d901      	bls.n	8004548 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004544:	2303      	movs	r3, #3
 8004546:	e09b      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004548:	4b40      	ldr	r3, [pc, #256]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 800454a:	6a1b      	ldr	r3, [r3, #32]
 800454c:	f003 0302 	and.w	r3, r3, #2
 8004550:	2b00      	cmp	r3, #0
 8004552:	d1ee      	bne.n	8004532 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004554:	7dfb      	ldrb	r3, [r7, #23]
 8004556:	2b01      	cmp	r3, #1
 8004558:	d105      	bne.n	8004566 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800455a:	4b3c      	ldr	r3, [pc, #240]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 800455c:	69db      	ldr	r3, [r3, #28]
 800455e:	4a3b      	ldr	r2, [pc, #236]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004560:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004564:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
 800456a:	2b00      	cmp	r3, #0
 800456c:	f000 8087 	beq.w	800467e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004570:	4b36      	ldr	r3, [pc, #216]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	f003 030c 	and.w	r3, r3, #12
 8004578:	2b08      	cmp	r3, #8
 800457a:	d061      	beq.n	8004640 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	69db      	ldr	r3, [r3, #28]
 8004580:	2b02      	cmp	r3, #2
 8004582:	d146      	bne.n	8004612 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004584:	4b33      	ldr	r3, [pc, #204]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004586:	2200      	movs	r2, #0
 8004588:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800458a:	f7ff fa9d 	bl	8003ac8 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004590:	e008      	b.n	80045a4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004592:	f7ff fa99 	bl	8003ac8 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	2b02      	cmp	r3, #2
 800459e:	d901      	bls.n	80045a4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e06d      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045a4:	4b29      	ldr	r3, [pc, #164]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f0      	bne.n	8004592 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a1b      	ldr	r3, [r3, #32]
 80045b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045b8:	d108      	bne.n	80045cc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80045ba:	4b24      	ldr	r3, [pc, #144]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	4921      	ldr	r1, [pc, #132]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80045c8:	4313      	orrs	r3, r2
 80045ca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80045cc:	4b1f      	ldr	r3, [pc, #124]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a19      	ldr	r1, [r3, #32]
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045dc:	430b      	orrs	r3, r1
 80045de:	491b      	ldr	r1, [pc, #108]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 80045e0:	4313      	orrs	r3, r2
 80045e2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045e4:	4b1b      	ldr	r3, [pc, #108]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 80045e6:	2201      	movs	r2, #1
 80045e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045ea:	f7ff fa6d 	bl	8003ac8 <HAL_GetTick>
 80045ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045f0:	e008      	b.n	8004604 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045f2:	f7ff fa69 	bl	8003ac8 <HAL_GetTick>
 80045f6:	4602      	mov	r2, r0
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	1ad3      	subs	r3, r2, r3
 80045fc:	2b02      	cmp	r3, #2
 80045fe:	d901      	bls.n	8004604 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004600:	2303      	movs	r3, #3
 8004602:	e03d      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004604:	4b11      	ldr	r3, [pc, #68]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800460c:	2b00      	cmp	r3, #0
 800460e:	d0f0      	beq.n	80045f2 <HAL_RCC_OscConfig+0x46a>
 8004610:	e035      	b.n	800467e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004612:	4b10      	ldr	r3, [pc, #64]	; (8004654 <HAL_RCC_OscConfig+0x4cc>)
 8004614:	2200      	movs	r2, #0
 8004616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004618:	f7ff fa56 	bl	8003ac8 <HAL_GetTick>
 800461c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800461e:	e008      	b.n	8004632 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004620:	f7ff fa52 	bl	8003ac8 <HAL_GetTick>
 8004624:	4602      	mov	r2, r0
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	1ad3      	subs	r3, r2, r3
 800462a:	2b02      	cmp	r3, #2
 800462c:	d901      	bls.n	8004632 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800462e:	2303      	movs	r3, #3
 8004630:	e026      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004632:	4b06      	ldr	r3, [pc, #24]	; (800464c <HAL_RCC_OscConfig+0x4c4>)
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800463a:	2b00      	cmp	r3, #0
 800463c:	d1f0      	bne.n	8004620 <HAL_RCC_OscConfig+0x498>
 800463e:	e01e      	b.n	800467e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	69db      	ldr	r3, [r3, #28]
 8004644:	2b01      	cmp	r3, #1
 8004646:	d107      	bne.n	8004658 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e019      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
 800464c:	40021000 	.word	0x40021000
 8004650:	40007000 	.word	0x40007000
 8004654:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004658:	4b0b      	ldr	r3, [pc, #44]	; (8004688 <HAL_RCC_OscConfig+0x500>)
 800465a:	685b      	ldr	r3, [r3, #4]
 800465c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	429a      	cmp	r2, r3
 800466a:	d106      	bne.n	800467a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	429a      	cmp	r2, r3
 8004678:	d001      	beq.n	800467e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800467a:	2301      	movs	r3, #1
 800467c:	e000      	b.n	8004680 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3718      	adds	r7, #24
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}
 8004688:	40021000 	.word	0x40021000

0800468c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b084      	sub	sp, #16
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
 8004694:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d101      	bne.n	80046a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800469c:	2301      	movs	r3, #1
 800469e:	e0d0      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80046a0:	4b6a      	ldr	r3, [pc, #424]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0307 	and.w	r3, r3, #7
 80046a8:	683a      	ldr	r2, [r7, #0]
 80046aa:	429a      	cmp	r2, r3
 80046ac:	d910      	bls.n	80046d0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046ae:	4b67      	ldr	r3, [pc, #412]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f023 0207 	bic.w	r2, r3, #7
 80046b6:	4965      	ldr	r1, [pc, #404]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80046be:	4b63      	ldr	r3, [pc, #396]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0307 	and.w	r3, r3, #7
 80046c6:	683a      	ldr	r2, [r7, #0]
 80046c8:	429a      	cmp	r2, r3
 80046ca:	d001      	beq.n	80046d0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80046cc:	2301      	movs	r3, #1
 80046ce:	e0b8      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d020      	beq.n	800471e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0304 	and.w	r3, r3, #4
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d005      	beq.n	80046f4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046e8:	4b59      	ldr	r3, [pc, #356]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	4a58      	ldr	r2, [pc, #352]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80046ee:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046f2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f003 0308 	and.w	r3, r3, #8
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d005      	beq.n	800470c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004700:	4b53      	ldr	r3, [pc, #332]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	4a52      	ldr	r2, [pc, #328]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004706:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800470a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800470c:	4b50      	ldr	r3, [pc, #320]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800470e:	685b      	ldr	r3, [r3, #4]
 8004710:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	689b      	ldr	r3, [r3, #8]
 8004718:	494d      	ldr	r1, [pc, #308]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800471a:	4313      	orrs	r3, r2
 800471c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0301 	and.w	r3, r3, #1
 8004726:	2b00      	cmp	r3, #0
 8004728:	d040      	beq.n	80047ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	2b01      	cmp	r3, #1
 8004730:	d107      	bne.n	8004742 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004732:	4b47      	ldr	r3, [pc, #284]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800473a:	2b00      	cmp	r3, #0
 800473c:	d115      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800473e:	2301      	movs	r3, #1
 8004740:	e07f      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	2b02      	cmp	r3, #2
 8004748:	d107      	bne.n	800475a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474a:	4b41      	ldr	r3, [pc, #260]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004752:	2b00      	cmp	r3, #0
 8004754:	d109      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004756:	2301      	movs	r3, #1
 8004758:	e073      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800475a:	4b3d      	ldr	r3, [pc, #244]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0302 	and.w	r3, r3, #2
 8004762:	2b00      	cmp	r3, #0
 8004764:	d101      	bne.n	800476a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e06b      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800476a:	4b39      	ldr	r3, [pc, #228]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	f023 0203 	bic.w	r2, r3, #3
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	4936      	ldr	r1, [pc, #216]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004778:	4313      	orrs	r3, r2
 800477a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800477c:	f7ff f9a4 	bl	8003ac8 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004782:	e00a      	b.n	800479a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004784:	f7ff f9a0 	bl	8003ac8 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e053      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800479a:	4b2d      	ldr	r3, [pc, #180]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f003 020c 	and.w	r2, r3, #12
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	009b      	lsls	r3, r3, #2
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d1eb      	bne.n	8004784 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80047ac:	4b27      	ldr	r3, [pc, #156]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f003 0307 	and.w	r3, r3, #7
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	429a      	cmp	r2, r3
 80047b8:	d210      	bcs.n	80047dc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80047ba:	4b24      	ldr	r3, [pc, #144]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f023 0207 	bic.w	r2, r3, #7
 80047c2:	4922      	ldr	r1, [pc, #136]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80047ca:	4b20      	ldr	r3, [pc, #128]	; (800484c <HAL_RCC_ClockConfig+0x1c0>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f003 0307 	and.w	r3, r3, #7
 80047d2:	683a      	ldr	r2, [r7, #0]
 80047d4:	429a      	cmp	r2, r3
 80047d6:	d001      	beq.n	80047dc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80047d8:	2301      	movs	r3, #1
 80047da:	e032      	b.n	8004842 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d008      	beq.n	80047fa <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047e8:	4b19      	ldr	r3, [pc, #100]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	68db      	ldr	r3, [r3, #12]
 80047f4:	4916      	ldr	r1, [pc, #88]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f003 0308 	and.w	r3, r3, #8
 8004802:	2b00      	cmp	r3, #0
 8004804:	d009      	beq.n	800481a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004806:	4b12      	ldr	r3, [pc, #72]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	691b      	ldr	r3, [r3, #16]
 8004812:	00db      	lsls	r3, r3, #3
 8004814:	490e      	ldr	r1, [pc, #56]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004816:	4313      	orrs	r3, r2
 8004818:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800481a:	f000 f821 	bl	8004860 <HAL_RCC_GetSysClockFreq>
 800481e:	4602      	mov	r2, r0
 8004820:	4b0b      	ldr	r3, [pc, #44]	; (8004850 <HAL_RCC_ClockConfig+0x1c4>)
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	091b      	lsrs	r3, r3, #4
 8004826:	f003 030f 	and.w	r3, r3, #15
 800482a:	490a      	ldr	r1, [pc, #40]	; (8004854 <HAL_RCC_ClockConfig+0x1c8>)
 800482c:	5ccb      	ldrb	r3, [r1, r3]
 800482e:	fa22 f303 	lsr.w	r3, r2, r3
 8004832:	4a09      	ldr	r2, [pc, #36]	; (8004858 <HAL_RCC_ClockConfig+0x1cc>)
 8004834:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004836:	4b09      	ldr	r3, [pc, #36]	; (800485c <HAL_RCC_ClockConfig+0x1d0>)
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff f902 	bl	8003a44 <HAL_InitTick>

  return HAL_OK;
 8004840:	2300      	movs	r3, #0
}
 8004842:	4618      	mov	r0, r3
 8004844:	3710      	adds	r7, #16
 8004846:	46bd      	mov	sp, r7
 8004848:	bd80      	pop	{r7, pc}
 800484a:	bf00      	nop
 800484c:	40022000 	.word	0x40022000
 8004850:	40021000 	.word	0x40021000
 8004854:	08006494 	.word	0x08006494
 8004858:	20000230 	.word	0x20000230
 800485c:	20000234 	.word	0x20000234

08004860 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004860:	b490      	push	{r4, r7}
 8004862:	b08a      	sub	sp, #40	; 0x28
 8004864:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004866:	4b29      	ldr	r3, [pc, #164]	; (800490c <HAL_RCC_GetSysClockFreq+0xac>)
 8004868:	1d3c      	adds	r4, r7, #4
 800486a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800486c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004870:	f240 2301 	movw	r3, #513	; 0x201
 8004874:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004876:	2300      	movs	r3, #0
 8004878:	61fb      	str	r3, [r7, #28]
 800487a:	2300      	movs	r3, #0
 800487c:	61bb      	str	r3, [r7, #24]
 800487e:	2300      	movs	r3, #0
 8004880:	627b      	str	r3, [r7, #36]	; 0x24
 8004882:	2300      	movs	r3, #0
 8004884:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004886:	2300      	movs	r3, #0
 8004888:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800488a:	4b21      	ldr	r3, [pc, #132]	; (8004910 <HAL_RCC_GetSysClockFreq+0xb0>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	f003 030c 	and.w	r3, r3, #12
 8004896:	2b04      	cmp	r3, #4
 8004898:	d002      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0x40>
 800489a:	2b08      	cmp	r3, #8
 800489c:	d003      	beq.n	80048a6 <HAL_RCC_GetSysClockFreq+0x46>
 800489e:	e02b      	b.n	80048f8 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80048a0:	4b1c      	ldr	r3, [pc, #112]	; (8004914 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048a2:	623b      	str	r3, [r7, #32]
      break;
 80048a4:	e02b      	b.n	80048fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	0c9b      	lsrs	r3, r3, #18
 80048aa:	f003 030f 	and.w	r3, r3, #15
 80048ae:	3328      	adds	r3, #40	; 0x28
 80048b0:	443b      	add	r3, r7
 80048b2:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80048b6:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80048b8:	69fb      	ldr	r3, [r7, #28]
 80048ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d012      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80048c2:	4b13      	ldr	r3, [pc, #76]	; (8004910 <HAL_RCC_GetSysClockFreq+0xb0>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	0c5b      	lsrs	r3, r3, #17
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	3328      	adds	r3, #40	; 0x28
 80048ce:	443b      	add	r3, r7
 80048d0:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80048d4:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	4a0e      	ldr	r2, [pc, #56]	; (8004914 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048da:	fb03 f202 	mul.w	r2, r3, r2
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e4:	627b      	str	r3, [r7, #36]	; 0x24
 80048e6:	e004      	b.n	80048f2 <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	4a0b      	ldr	r2, [pc, #44]	; (8004918 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ec:	fb02 f303 	mul.w	r3, r2, r3
 80048f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80048f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f4:	623b      	str	r3, [r7, #32]
      break;
 80048f6:	e002      	b.n	80048fe <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048f8:	4b06      	ldr	r3, [pc, #24]	; (8004914 <HAL_RCC_GetSysClockFreq+0xb4>)
 80048fa:	623b      	str	r3, [r7, #32]
      break;
 80048fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048fe:	6a3b      	ldr	r3, [r7, #32]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3728      	adds	r7, #40	; 0x28
 8004904:	46bd      	mov	sp, r7
 8004906:	bc90      	pop	{r4, r7}
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	08006484 	.word	0x08006484
 8004910:	40021000 	.word	0x40021000
 8004914:	007a1200 	.word	0x007a1200
 8004918:	003d0900 	.word	0x003d0900

0800491c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800491c:	b480      	push	{r7}
 800491e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004920:	4b02      	ldr	r3, [pc, #8]	; (800492c <HAL_RCC_GetHCLKFreq+0x10>)
 8004922:	681b      	ldr	r3, [r3, #0]
}
 8004924:	4618      	mov	r0, r3
 8004926:	46bd      	mov	sp, r7
 8004928:	bc80      	pop	{r7}
 800492a:	4770      	bx	lr
 800492c:	20000230 	.word	0x20000230

08004930 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004934:	f7ff fff2 	bl	800491c <HAL_RCC_GetHCLKFreq>
 8004938:	4602      	mov	r2, r0
 800493a:	4b05      	ldr	r3, [pc, #20]	; (8004950 <HAL_RCC_GetPCLK1Freq+0x20>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	0a1b      	lsrs	r3, r3, #8
 8004940:	f003 0307 	and.w	r3, r3, #7
 8004944:	4903      	ldr	r1, [pc, #12]	; (8004954 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004946:	5ccb      	ldrb	r3, [r1, r3]
 8004948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800494c:	4618      	mov	r0, r3
 800494e:	bd80      	pop	{r7, pc}
 8004950:	40021000 	.word	0x40021000
 8004954:	080064a4 	.word	0x080064a4

08004958 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004958:	b580      	push	{r7, lr}
 800495a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800495c:	f7ff ffde 	bl	800491c <HAL_RCC_GetHCLKFreq>
 8004960:	4602      	mov	r2, r0
 8004962:	4b05      	ldr	r3, [pc, #20]	; (8004978 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	0adb      	lsrs	r3, r3, #11
 8004968:	f003 0307 	and.w	r3, r3, #7
 800496c:	4903      	ldr	r1, [pc, #12]	; (800497c <HAL_RCC_GetPCLK2Freq+0x24>)
 800496e:	5ccb      	ldrb	r3, [r1, r3]
 8004970:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004974:	4618      	mov	r0, r3
 8004976:	bd80      	pop	{r7, pc}
 8004978:	40021000 	.word	0x40021000
 800497c:	080064a4 	.word	0x080064a4

08004980 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004980:	b480      	push	{r7}
 8004982:	b085      	sub	sp, #20
 8004984:	af00      	add	r7, sp, #0
 8004986:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004988:	4b0a      	ldr	r3, [pc, #40]	; (80049b4 <RCC_Delay+0x34>)
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	4a0a      	ldr	r2, [pc, #40]	; (80049b8 <RCC_Delay+0x38>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	0a5b      	lsrs	r3, r3, #9
 8004994:	687a      	ldr	r2, [r7, #4]
 8004996:	fb02 f303 	mul.w	r3, r2, r3
 800499a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800499c:	bf00      	nop
  }
  while (Delay --);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	1e5a      	subs	r2, r3, #1
 80049a2:	60fa      	str	r2, [r7, #12]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1f9      	bne.n	800499c <RCC_Delay+0x1c>
}
 80049a8:	bf00      	nop
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	bc80      	pop	{r7}
 80049b2:	4770      	bx	lr
 80049b4:	20000230 	.word	0x20000230
 80049b8:	10624dd3 	.word	0x10624dd3

080049bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d101      	bne.n	80049ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80049ca:	2301      	movs	r3, #1
 80049cc:	e076      	b.n	8004abc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d108      	bne.n	80049e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	685b      	ldr	r3, [r3, #4]
 80049da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049de:	d009      	beq.n	80049f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	2200      	movs	r2, #0
 80049e4:	61da      	str	r2, [r3, #28]
 80049e6:	e005      	b.n	80049f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2200      	movs	r2, #0
 80049f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2200      	movs	r2, #0
 80049f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d106      	bne.n	8004a14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f7fc fc56 	bl	80012c0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	2202      	movs	r2, #2
 8004a18:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	681a      	ldr	r2, [r3, #0]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	689b      	ldr	r3, [r3, #8]
 8004a38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	68db      	ldr	r3, [r3, #12]
 8004a42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a46:	431a      	orrs	r2, r3
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
 8004a4c:	f003 0302 	and.w	r3, r3, #2
 8004a50:	431a      	orrs	r2, r3
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	f003 0301 	and.w	r3, r3, #1
 8004a5a:	431a      	orrs	r2, r3
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	699b      	ldr	r3, [r3, #24]
 8004a60:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a64:	431a      	orrs	r2, r3
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	69db      	ldr	r3, [r3, #28]
 8004a6a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a6e:	431a      	orrs	r2, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6a1b      	ldr	r3, [r3, #32]
 8004a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a78:	ea42 0103 	orr.w	r1, r2, r3
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a80:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	430a      	orrs	r2, r1
 8004a8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	699b      	ldr	r3, [r3, #24]
 8004a90:	0c1a      	lsrs	r2, r3, #16
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f002 0204 	and.w	r2, r2, #4
 8004a9a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	69da      	ldr	r2, [r3, #28]
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004aaa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004aba:	2300      	movs	r3, #0
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	60f8      	str	r0, [r7, #12]
 8004acc:	60b9      	str	r1, [r7, #8]
 8004ace:	603b      	str	r3, [r7, #0]
 8004ad0:	4613      	mov	r3, r2
 8004ad2:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004ade:	2b01      	cmp	r3, #1
 8004ae0:	d101      	bne.n	8004ae6 <HAL_SPI_Transmit+0x22>
 8004ae2:	2302      	movs	r3, #2
 8004ae4:	e126      	b.n	8004d34 <HAL_SPI_Transmit+0x270>
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aee:	f7fe ffeb 	bl	8003ac8 <HAL_GetTick>
 8004af2:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004af4:	88fb      	ldrh	r3, [r7, #6]
 8004af6:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004afe:	b2db      	uxtb	r3, r3
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d002      	beq.n	8004b0a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b04:	2302      	movs	r3, #2
 8004b06:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b08:	e10b      	b.n	8004d22 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_SPI_Transmit+0x52>
 8004b10:	88fb      	ldrh	r3, [r7, #6]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b1a:	e102      	b.n	8004d22 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2203      	movs	r2, #3
 8004b20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	68ba      	ldr	r2, [r7, #8]
 8004b2e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	88fa      	ldrh	r2, [r7, #6]
 8004b34:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	88fa      	ldrh	r2, [r7, #6]
 8004b3a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	2200      	movs	r2, #0
 8004b46:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	2200      	movs	r2, #0
 8004b52:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b62:	d10f      	bne.n	8004b84 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b72:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b82:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b8e:	2b40      	cmp	r3, #64	; 0x40
 8004b90:	d007      	beq.n	8004ba2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681a      	ldr	r2, [r3, #0]
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ba0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	68db      	ldr	r3, [r3, #12]
 8004ba6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004baa:	d14b      	bne.n	8004c44 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d002      	beq.n	8004bba <HAL_SPI_Transmit+0xf6>
 8004bb4:	8afb      	ldrh	r3, [r7, #22]
 8004bb6:	2b01      	cmp	r3, #1
 8004bb8:	d13e      	bne.n	8004c38 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bbe:	881a      	ldrh	r2, [r3, #0]
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bca:	1c9a      	adds	r2, r3, #2
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	3b01      	subs	r3, #1
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004bde:	e02b      	b.n	8004c38 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	689b      	ldr	r3, [r3, #8]
 8004be6:	f003 0302 	and.w	r3, r3, #2
 8004bea:	2b02      	cmp	r3, #2
 8004bec:	d112      	bne.n	8004c14 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf2:	881a      	ldrh	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bfe:	1c9a      	adds	r2, r3, #2
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c08:	b29b      	uxth	r3, r3
 8004c0a:	3b01      	subs	r3, #1
 8004c0c:	b29a      	uxth	r2, r3
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c12:	e011      	b.n	8004c38 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c14:	f7fe ff58 	bl	8003ac8 <HAL_GetTick>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	69bb      	ldr	r3, [r7, #24]
 8004c1c:	1ad3      	subs	r3, r2, r3
 8004c1e:	683a      	ldr	r2, [r7, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d803      	bhi.n	8004c2c <HAL_SPI_Transmit+0x168>
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c2a:	d102      	bne.n	8004c32 <HAL_SPI_Transmit+0x16e>
 8004c2c:	683b      	ldr	r3, [r7, #0]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d102      	bne.n	8004c38 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c36:	e074      	b.n	8004d22 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c3c:	b29b      	uxth	r3, r3
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1ce      	bne.n	8004be0 <HAL_SPI_Transmit+0x11c>
 8004c42:	e04c      	b.n	8004cde <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <HAL_SPI_Transmit+0x18e>
 8004c4c:	8afb      	ldrh	r3, [r7, #22]
 8004c4e:	2b01      	cmp	r3, #1
 8004c50:	d140      	bne.n	8004cd4 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	330c      	adds	r3, #12
 8004c5c:	7812      	ldrb	r2, [r2, #0]
 8004c5e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c64:	1c5a      	adds	r2, r3, #1
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c6e:	b29b      	uxth	r3, r3
 8004c70:	3b01      	subs	r3, #1
 8004c72:	b29a      	uxth	r2, r3
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c78:	e02c      	b.n	8004cd4 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	689b      	ldr	r3, [r3, #8]
 8004c80:	f003 0302 	and.w	r3, r3, #2
 8004c84:	2b02      	cmp	r3, #2
 8004c86:	d113      	bne.n	8004cb0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	330c      	adds	r3, #12
 8004c92:	7812      	ldrb	r2, [r2, #0]
 8004c94:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9a:	1c5a      	adds	r2, r3, #1
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ca4:	b29b      	uxth	r3, r3
 8004ca6:	3b01      	subs	r3, #1
 8004ca8:	b29a      	uxth	r2, r3
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	86da      	strh	r2, [r3, #54]	; 0x36
 8004cae:	e011      	b.n	8004cd4 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004cb0:	f7fe ff0a 	bl	8003ac8 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	69bb      	ldr	r3, [r7, #24]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	683a      	ldr	r2, [r7, #0]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d803      	bhi.n	8004cc8 <HAL_SPI_Transmit+0x204>
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004cc6:	d102      	bne.n	8004cce <HAL_SPI_Transmit+0x20a>
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d102      	bne.n	8004cd4 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004cce:	2303      	movs	r3, #3
 8004cd0:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cd2:	e026      	b.n	8004d22 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cd8:	b29b      	uxth	r3, r3
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d1cd      	bne.n	8004c7a <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004cde:	69ba      	ldr	r2, [r7, #24]
 8004ce0:	6839      	ldr	r1, [r7, #0]
 8004ce2:	68f8      	ldr	r0, [r7, #12]
 8004ce4:	f000 f8b2 	bl	8004e4c <SPI_EndRxTxTransaction>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d002      	beq.n	8004cf4 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2220      	movs	r2, #32
 8004cf2:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	2b00      	cmp	r3, #0
 8004cfa:	d10a      	bne.n	8004d12 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	613b      	str	r3, [r7, #16]
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68db      	ldr	r3, [r3, #12]
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d002      	beq.n	8004d20 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d1a:	2301      	movs	r3, #1
 8004d1c:	77fb      	strb	r3, [r7, #31]
 8004d1e:	e000      	b.n	8004d22 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d20:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2201      	movs	r2, #1
 8004d26:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004d32:	7ffb      	ldrb	r3, [r7, #31]
}
 8004d34:	4618      	mov	r0, r3
 8004d36:	3720      	adds	r7, #32
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	bd80      	pop	{r7, pc}

08004d3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004d3c:	b580      	push	{r7, lr}
 8004d3e:	b088      	sub	sp, #32
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	603b      	str	r3, [r7, #0]
 8004d48:	4613      	mov	r3, r2
 8004d4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d4c:	f7fe febc 	bl	8003ac8 <HAL_GetTick>
 8004d50:	4602      	mov	r2, r0
 8004d52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d54:	1a9b      	subs	r3, r3, r2
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	4413      	add	r3, r2
 8004d5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d5c:	f7fe feb4 	bl	8003ac8 <HAL_GetTick>
 8004d60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d62:	4b39      	ldr	r3, [pc, #228]	; (8004e48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	015b      	lsls	r3, r3, #5
 8004d68:	0d1b      	lsrs	r3, r3, #20
 8004d6a:	69fa      	ldr	r2, [r7, #28]
 8004d6c:	fb02 f303 	mul.w	r3, r2, r3
 8004d70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d72:	e054      	b.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d7a:	d050      	beq.n	8004e1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d7c:	f7fe fea4 	bl	8003ac8 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	69bb      	ldr	r3, [r7, #24]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d902      	bls.n	8004d92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d8c:	69fb      	ldr	r3, [r7, #28]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d13d      	bne.n	8004e0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	685a      	ldr	r2, [r3, #4]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004da0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004daa:	d111      	bne.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004db4:	d004      	beq.n	8004dc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dbe:	d107      	bne.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681a      	ldr	r2, [r3, #0]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004dce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dd8:	d10f      	bne.n	8004dfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	2201      	movs	r2, #1
 8004dfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	2200      	movs	r2, #0
 8004e06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e0a:	2303      	movs	r3, #3
 8004e0c:	e017      	b.n	8004e3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d101      	bne.n	8004e18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e14:	2300      	movs	r3, #0
 8004e16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e18:	697b      	ldr	r3, [r7, #20]
 8004e1a:	3b01      	subs	r3, #1
 8004e1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	4013      	ands	r3, r2
 8004e28:	68ba      	ldr	r2, [r7, #8]
 8004e2a:	429a      	cmp	r2, r3
 8004e2c:	bf0c      	ite	eq
 8004e2e:	2301      	moveq	r3, #1
 8004e30:	2300      	movne	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	461a      	mov	r2, r3
 8004e36:	79fb      	ldrb	r3, [r7, #7]
 8004e38:	429a      	cmp	r2, r3
 8004e3a:	d19b      	bne.n	8004d74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3720      	adds	r7, #32
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	20000230 	.word	0x20000230

08004e4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b086      	sub	sp, #24
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	2180      	movs	r1, #128	; 0x80
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f7ff ff6a 	bl	8004d3c <SPI_WaitFlagStateUntilTimeout>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d007      	beq.n	8004e7e <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e72:	f043 0220 	orr.w	r2, r3, #32
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004e7a:	2303      	movs	r3, #3
 8004e7c:	e000      	b.n	8004e80 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004e7e:	2300      	movs	r3, #0
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	3710      	adds	r7, #16
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d101      	bne.n	8004e9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e96:	2301      	movs	r3, #1
 8004e98:	e041      	b.n	8004f1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2200      	movs	r2, #0
 8004eaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eae:	6878      	ldr	r0, [r7, #4]
 8004eb0:	f7fc fa44 	bl	800133c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	3304      	adds	r3, #4
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	4610      	mov	r0, r2
 8004ec8:	f000 fa98 	bl	80053fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2201      	movs	r2, #1
 8004f00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2201      	movs	r2, #1
 8004f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f1c:	2300      	movs	r3, #0
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3708      	adds	r7, #8
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d001      	beq.n	8004f40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e035      	b.n	8004fac <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	68da      	ldr	r2, [r3, #12]
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f042 0201 	orr.w	r2, r2, #1
 8004f56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	4a16      	ldr	r2, [pc, #88]	; (8004fb8 <HAL_TIM_Base_Start_IT+0x90>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d009      	beq.n	8004f76 <HAL_TIM_Base_Start_IT+0x4e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6a:	d004      	beq.n	8004f76 <HAL_TIM_Base_Start_IT+0x4e>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	4a12      	ldr	r2, [pc, #72]	; (8004fbc <HAL_TIM_Base_Start_IT+0x94>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d111      	bne.n	8004f9a <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f003 0307 	and.w	r3, r3, #7
 8004f80:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2b06      	cmp	r3, #6
 8004f86:	d010      	beq.n	8004faa <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	681a      	ldr	r2, [r3, #0]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f042 0201 	orr.w	r2, r2, #1
 8004f96:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f98:	e007      	b.n	8004faa <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f042 0201 	orr.w	r2, r2, #1
 8004fa8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004faa:	2300      	movs	r3, #0
}
 8004fac:	4618      	mov	r0, r3
 8004fae:	3714      	adds	r7, #20
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bc80      	pop	{r7}
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	40012c00 	.word	0x40012c00
 8004fbc:	40000400 	.word	0x40000400

08004fc0 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004fc0:	b480      	push	{r7}
 8004fc2:	b083      	sub	sp, #12
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	68da      	ldr	r2, [r3, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 0201 	bic.w	r2, r2, #1
 8004fd6:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6a1a      	ldr	r2, [r3, #32]
 8004fde:	f241 1311 	movw	r3, #4369	; 0x1111
 8004fe2:	4013      	ands	r3, r2
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d10f      	bne.n	8005008 <HAL_TIM_Base_Stop_IT+0x48>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	6a1a      	ldr	r2, [r3, #32]
 8004fee:	f240 4344 	movw	r3, #1092	; 0x444
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d107      	bne.n	8005008 <HAL_TIM_Base_Stop_IT+0x48>
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f022 0201 	bic.w	r2, r2, #1
 8005006:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2201      	movs	r2, #1
 800500c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	370c      	adds	r7, #12
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b082      	sub	sp, #8
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	f003 0302 	and.w	r3, r3, #2
 800502e:	2b02      	cmp	r3, #2
 8005030:	d122      	bne.n	8005078 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	68db      	ldr	r3, [r3, #12]
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b02      	cmp	r3, #2
 800503e:	d11b      	bne.n	8005078 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f06f 0202 	mvn.w	r2, #2
 8005048:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2201      	movs	r2, #1
 800504e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	699b      	ldr	r3, [r3, #24]
 8005056:	f003 0303 	and.w	r3, r3, #3
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800505e:	6878      	ldr	r0, [r7, #4]
 8005060:	f000 f9b1 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 8005064:	e005      	b.n	8005072 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 f9a4 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800506c:	6878      	ldr	r0, [r7, #4]
 800506e:	f000 f9b3 	bl	80053d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2200      	movs	r2, #0
 8005076:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	f003 0304 	and.w	r3, r3, #4
 8005082:	2b04      	cmp	r3, #4
 8005084:	d122      	bne.n	80050cc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b04      	cmp	r3, #4
 8005092:	d11b      	bne.n	80050cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0204 	mvn.w	r2, #4
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f987 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 f97a 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 f989 	bl	80053d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	691b      	ldr	r3, [r3, #16]
 80050d2:	f003 0308 	and.w	r3, r3, #8
 80050d6:	2b08      	cmp	r3, #8
 80050d8:	d122      	bne.n	8005120 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	68db      	ldr	r3, [r3, #12]
 80050e0:	f003 0308 	and.w	r3, r3, #8
 80050e4:	2b08      	cmp	r3, #8
 80050e6:	d11b      	bne.n	8005120 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f06f 0208 	mvn.w	r2, #8
 80050f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2204      	movs	r2, #4
 80050f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69db      	ldr	r3, [r3, #28]
 80050fe:	f003 0303 	and.w	r3, r3, #3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d003      	beq.n	800510e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 f95d 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 800510c:	e005      	b.n	800511a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 f950 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f95f 	bl	80053d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	2200      	movs	r2, #0
 800511e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	2b10      	cmp	r3, #16
 800512c:	d122      	bne.n	8005174 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68db      	ldr	r3, [r3, #12]
 8005134:	f003 0310 	and.w	r3, r3, #16
 8005138:	2b10      	cmp	r3, #16
 800513a:	d11b      	bne.n	8005174 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f06f 0210 	mvn.w	r2, #16
 8005144:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	2208      	movs	r2, #8
 800514a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	69db      	ldr	r3, [r3, #28]
 8005152:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005156:	2b00      	cmp	r3, #0
 8005158:	d003      	beq.n	8005162 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800515a:	6878      	ldr	r0, [r7, #4]
 800515c:	f000 f933 	bl	80053c6 <HAL_TIM_IC_CaptureCallback>
 8005160:	e005      	b.n	800516e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005162:	6878      	ldr	r0, [r7, #4]
 8005164:	f000 f926 	bl	80053b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	f000 f935 	bl	80053d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2200      	movs	r2, #0
 8005172:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	691b      	ldr	r3, [r3, #16]
 800517a:	f003 0301 	and.w	r3, r3, #1
 800517e:	2b01      	cmp	r3, #1
 8005180:	d10e      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	68db      	ldr	r3, [r3, #12]
 8005188:	f003 0301 	and.w	r3, r3, #1
 800518c:	2b01      	cmp	r3, #1
 800518e:	d107      	bne.n	80051a0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	f06f 0201 	mvn.w	r2, #1
 8005198:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f7fb f85c 	bl	8000258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051aa:	2b80      	cmp	r3, #128	; 0x80
 80051ac:	d10e      	bne.n	80051cc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051b8:	2b80      	cmp	r3, #128	; 0x80
 80051ba:	d107      	bne.n	80051cc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80051c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fa67 	bl	800569a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	691b      	ldr	r3, [r3, #16]
 80051d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051d6:	2b40      	cmp	r3, #64	; 0x40
 80051d8:	d10e      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	68db      	ldr	r3, [r3, #12]
 80051e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e4:	2b40      	cmp	r3, #64	; 0x40
 80051e6:	d107      	bne.n	80051f8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f2:	6878      	ldr	r0, [r7, #4]
 80051f4:	f000 f8f9 	bl	80053ea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	f003 0320 	and.w	r3, r3, #32
 8005202:	2b20      	cmp	r3, #32
 8005204:	d10e      	bne.n	8005224 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	f003 0320 	and.w	r3, r3, #32
 8005210:	2b20      	cmp	r3, #32
 8005212:	d107      	bne.n	8005224 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f06f 0220 	mvn.w	r2, #32
 800521c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f000 fa32 	bl	8005688 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005224:	bf00      	nop
 8005226:	3708      	adds	r7, #8
 8005228:	46bd      	mov	sp, r7
 800522a:	bd80      	pop	{r7, pc}

0800522c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b084      	sub	sp, #16
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800523c:	2b01      	cmp	r3, #1
 800523e:	d101      	bne.n	8005244 <HAL_TIM_ConfigClockSource+0x18>
 8005240:	2302      	movs	r3, #2
 8005242:	e0b3      	b.n	80053ac <HAL_TIM_ConfigClockSource+0x180>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2201      	movs	r2, #1
 8005248:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2202      	movs	r2, #2
 8005250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	689b      	ldr	r3, [r3, #8]
 800525a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005262:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800526a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800527c:	d03e      	beq.n	80052fc <HAL_TIM_ConfigClockSource+0xd0>
 800527e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005282:	f200 8087 	bhi.w	8005394 <HAL_TIM_ConfigClockSource+0x168>
 8005286:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800528a:	f000 8085 	beq.w	8005398 <HAL_TIM_ConfigClockSource+0x16c>
 800528e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005292:	d87f      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 8005294:	2b70      	cmp	r3, #112	; 0x70
 8005296:	d01a      	beq.n	80052ce <HAL_TIM_ConfigClockSource+0xa2>
 8005298:	2b70      	cmp	r3, #112	; 0x70
 800529a:	d87b      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 800529c:	2b60      	cmp	r3, #96	; 0x60
 800529e:	d050      	beq.n	8005342 <HAL_TIM_ConfigClockSource+0x116>
 80052a0:	2b60      	cmp	r3, #96	; 0x60
 80052a2:	d877      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 80052a4:	2b50      	cmp	r3, #80	; 0x50
 80052a6:	d03c      	beq.n	8005322 <HAL_TIM_ConfigClockSource+0xf6>
 80052a8:	2b50      	cmp	r3, #80	; 0x50
 80052aa:	d873      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 80052ac:	2b40      	cmp	r3, #64	; 0x40
 80052ae:	d058      	beq.n	8005362 <HAL_TIM_ConfigClockSource+0x136>
 80052b0:	2b40      	cmp	r3, #64	; 0x40
 80052b2:	d86f      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 80052b4:	2b30      	cmp	r3, #48	; 0x30
 80052b6:	d064      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x156>
 80052b8:	2b30      	cmp	r3, #48	; 0x30
 80052ba:	d86b      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 80052bc:	2b20      	cmp	r3, #32
 80052be:	d060      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x156>
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d867      	bhi.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d05c      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x156>
 80052c8:	2b10      	cmp	r3, #16
 80052ca:	d05a      	beq.n	8005382 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80052cc:	e062      	b.n	8005394 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6818      	ldr	r0, [r3, #0]
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	6899      	ldr	r1, [r3, #8]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	685a      	ldr	r2, [r3, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	f000 f95c 	bl	800559a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	689b      	ldr	r3, [r3, #8]
 80052e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68fa      	ldr	r2, [r7, #12]
 80052f8:	609a      	str	r2, [r3, #8]
      break;
 80052fa:	e04e      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6818      	ldr	r0, [r3, #0]
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	6899      	ldr	r1, [r3, #8]
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	685a      	ldr	r2, [r3, #4]
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	68db      	ldr	r3, [r3, #12]
 800530c:	f000 f945 	bl	800559a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	689a      	ldr	r2, [r3, #8]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800531e:	609a      	str	r2, [r3, #8]
      break;
 8005320:	e03b      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6818      	ldr	r0, [r3, #0]
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	6859      	ldr	r1, [r3, #4]
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	68db      	ldr	r3, [r3, #12]
 800532e:	461a      	mov	r2, r3
 8005330:	f000 f8bc 	bl	80054ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2150      	movs	r1, #80	; 0x50
 800533a:	4618      	mov	r0, r3
 800533c:	f000 f913 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 8005340:	e02b      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	683b      	ldr	r3, [r7, #0]
 8005348:	6859      	ldr	r1, [r3, #4]
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	461a      	mov	r2, r3
 8005350:	f000 f8da 	bl	8005508 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	2160      	movs	r1, #96	; 0x60
 800535a:	4618      	mov	r0, r3
 800535c:	f000 f903 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 8005360:	e01b      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6818      	ldr	r0, [r3, #0]
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	6859      	ldr	r1, [r3, #4]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	68db      	ldr	r3, [r3, #12]
 800536e:	461a      	mov	r2, r3
 8005370:	f000 f89c 	bl	80054ac <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2140      	movs	r1, #64	; 0x40
 800537a:	4618      	mov	r0, r3
 800537c:	f000 f8f3 	bl	8005566 <TIM_ITRx_SetConfig>
      break;
 8005380:	e00b      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	4619      	mov	r1, r3
 800538c:	4610      	mov	r0, r2
 800538e:	f000 f8ea 	bl	8005566 <TIM_ITRx_SetConfig>
        break;
 8005392:	e002      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005394:	bf00      	nop
 8005396:	e000      	b.n	800539a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005398:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2201      	movs	r2, #1
 800539e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053aa:	2300      	movs	r3, #0
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3710      	adds	r7, #16
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b083      	sub	sp, #12
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80053bc:	bf00      	nop
 80053be:	370c      	adds	r7, #12
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bc80      	pop	{r7}
 80053c4:	4770      	bx	lr

080053c6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80053c6:	b480      	push	{r7}
 80053c8:	b083      	sub	sp, #12
 80053ca:	af00      	add	r7, sp, #0
 80053cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80053ce:	bf00      	nop
 80053d0:	370c      	adds	r7, #12
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bc80      	pop	{r7}
 80053d6:	4770      	bx	lr

080053d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80053d8:	b480      	push	{r7}
 80053da:	b083      	sub	sp, #12
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80053e0:	bf00      	nop
 80053e2:	370c      	adds	r7, #12
 80053e4:	46bd      	mov	sp, r7
 80053e6:	bc80      	pop	{r7}
 80053e8:	4770      	bx	lr

080053ea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053ea:	b480      	push	{r7}
 80053ec:	b083      	sub	sp, #12
 80053ee:	af00      	add	r7, sp, #0
 80053f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053f2:	bf00      	nop
 80053f4:	370c      	adds	r7, #12
 80053f6:	46bd      	mov	sp, r7
 80053f8:	bc80      	pop	{r7}
 80053fa:	4770      	bx	lr

080053fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b085      	sub	sp, #20
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
 8005404:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	4a25      	ldr	r2, [pc, #148]	; (80054a4 <TIM_Base_SetConfig+0xa8>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d007      	beq.n	8005424 <TIM_Base_SetConfig+0x28>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800541a:	d003      	beq.n	8005424 <TIM_Base_SetConfig+0x28>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a22      	ldr	r2, [pc, #136]	; (80054a8 <TIM_Base_SetConfig+0xac>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d108      	bne.n	8005436 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800542a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	4a1a      	ldr	r2, [pc, #104]	; (80054a4 <TIM_Base_SetConfig+0xa8>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d007      	beq.n	800544e <TIM_Base_SetConfig+0x52>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005444:	d003      	beq.n	800544e <TIM_Base_SetConfig+0x52>
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4a17      	ldr	r2, [pc, #92]	; (80054a8 <TIM_Base_SetConfig+0xac>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d108      	bne.n	8005460 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005454:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	68fa      	ldr	r2, [r7, #12]
 800545c:	4313      	orrs	r3, r2
 800545e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005466:	683b      	ldr	r3, [r7, #0]
 8005468:	695b      	ldr	r3, [r3, #20]
 800546a:	4313      	orrs	r3, r2
 800546c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	68fa      	ldr	r2, [r7, #12]
 8005472:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005474:	683b      	ldr	r3, [r7, #0]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	681a      	ldr	r2, [r3, #0]
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	4a07      	ldr	r2, [pc, #28]	; (80054a4 <TIM_Base_SetConfig+0xa8>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d103      	bne.n	8005494 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	691a      	ldr	r2, [r3, #16]
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	615a      	str	r2, [r3, #20]
}
 800549a:	bf00      	nop
 800549c:	3714      	adds	r7, #20
 800549e:	46bd      	mov	sp, r7
 80054a0:	bc80      	pop	{r7}
 80054a2:	4770      	bx	lr
 80054a4:	40012c00 	.word	0x40012c00
 80054a8:	40000400 	.word	0x40000400

080054ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f023 030a 	bic.w	r3, r3, #10
 80054e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	bc80      	pop	{r7}
 8005506:	4770      	bx	lr

08005508 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005508:	b480      	push	{r7}
 800550a:	b087      	sub	sp, #28
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	f023 0210 	bic.w	r2, r3, #16
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a1b      	ldr	r3, [r3, #32]
 800552a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800552c:	697b      	ldr	r3, [r7, #20]
 800552e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005532:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	031b      	lsls	r3, r3, #12
 8005538:	697a      	ldr	r2, [r7, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800553e:	693b      	ldr	r3, [r7, #16]
 8005540:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005544:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005546:	68bb      	ldr	r3, [r7, #8]
 8005548:	011b      	lsls	r3, r3, #4
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	4313      	orrs	r3, r2
 800554e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	621a      	str	r2, [r3, #32]
}
 800555c:	bf00      	nop
 800555e:	371c      	adds	r7, #28
 8005560:	46bd      	mov	sp, r7
 8005562:	bc80      	pop	{r7}
 8005564:	4770      	bx	lr

08005566 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
 800556e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	689b      	ldr	r3, [r3, #8]
 8005574:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800557c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800557e:	683a      	ldr	r2, [r7, #0]
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4313      	orrs	r3, r2
 8005584:	f043 0307 	orr.w	r3, r3, #7
 8005588:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	68fa      	ldr	r2, [r7, #12]
 800558e:	609a      	str	r2, [r3, #8]
}
 8005590:	bf00      	nop
 8005592:	3714      	adds	r7, #20
 8005594:	46bd      	mov	sp, r7
 8005596:	bc80      	pop	{r7}
 8005598:	4770      	bx	lr

0800559a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800559a:	b480      	push	{r7}
 800559c:	b087      	sub	sp, #28
 800559e:	af00      	add	r7, sp, #0
 80055a0:	60f8      	str	r0, [r7, #12]
 80055a2:	60b9      	str	r1, [r7, #8]
 80055a4:	607a      	str	r2, [r7, #4]
 80055a6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80055b4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	021a      	lsls	r2, r3, #8
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	431a      	orrs	r2, r3
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	4313      	orrs	r3, r2
 80055c2:	697a      	ldr	r2, [r7, #20]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	697a      	ldr	r2, [r7, #20]
 80055cc:	609a      	str	r2, [r3, #8]
}
 80055ce:	bf00      	nop
 80055d0:	371c      	adds	r7, #28
 80055d2:	46bd      	mov	sp, r7
 80055d4:	bc80      	pop	{r7}
 80055d6:	4770      	bx	lr

080055d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055e8:	2b01      	cmp	r3, #1
 80055ea:	d101      	bne.n	80055f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055ec:	2302      	movs	r3, #2
 80055ee:	e041      	b.n	8005674 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2201      	movs	r2, #1
 80055f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2202      	movs	r2, #2
 80055fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	689b      	ldr	r3, [r3, #8]
 800560e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	4313      	orrs	r3, r2
 8005620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	68fa      	ldr	r2, [r7, #12]
 8005628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a14      	ldr	r2, [pc, #80]	; (8005680 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d009      	beq.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800563c:	d004      	beq.n	8005648 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	4a10      	ldr	r2, [pc, #64]	; (8005684 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8005644:	4293      	cmp	r3, r2
 8005646:	d10c      	bne.n	8005662 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800564e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005650:	683b      	ldr	r3, [r7, #0]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	4313      	orrs	r3, r2
 8005658:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	68ba      	ldr	r2, [r7, #8]
 8005660:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2201      	movs	r2, #1
 8005666:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005672:	2300      	movs	r3, #0
}
 8005674:	4618      	mov	r0, r3
 8005676:	3714      	adds	r7, #20
 8005678:	46bd      	mov	sp, r7
 800567a:	bc80      	pop	{r7}
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	40012c00 	.word	0x40012c00
 8005684:	40000400 	.word	0x40000400

08005688 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005688:	b480      	push	{r7}
 800568a:	b083      	sub	sp, #12
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	bc80      	pop	{r7}
 8005698:	4770      	bx	lr

0800569a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800569a:	b480      	push	{r7}
 800569c:	b083      	sub	sp, #12
 800569e:	af00      	add	r7, sp, #0
 80056a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80056a2:	bf00      	nop
 80056a4:	370c      	adds	r7, #12
 80056a6:	46bd      	mov	sp, r7
 80056a8:	bc80      	pop	{r7}
 80056aa:	4770      	bx	lr

080056ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b082      	sub	sp, #8
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d101      	bne.n	80056be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e03f      	b.n	800573e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056c4:	b2db      	uxtb	r3, r3
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d106      	bne.n	80056d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f7fb fe56 	bl	8001384 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	2224      	movs	r2, #36	; 0x24
 80056dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	68da      	ldr	r2, [r3, #12]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056f0:	6878      	ldr	r0, [r7, #4]
 80056f2:	f000 f905 	bl	8005900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	691a      	ldr	r2, [r3, #16]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005704:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	695a      	ldr	r2, [r3, #20]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005714:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	68da      	ldr	r2, [r3, #12]
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005724:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2220      	movs	r2, #32
 8005738:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800573c:	2300      	movs	r3, #0
}
 800573e:	4618      	mov	r0, r3
 8005740:	3708      	adds	r7, #8
 8005742:	46bd      	mov	sp, r7
 8005744:	bd80      	pop	{r7, pc}

08005746 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005746:	b580      	push	{r7, lr}
 8005748:	b08a      	sub	sp, #40	; 0x28
 800574a:	af02      	add	r7, sp, #8
 800574c:	60f8      	str	r0, [r7, #12]
 800574e:	60b9      	str	r1, [r7, #8]
 8005750:	603b      	str	r3, [r7, #0]
 8005752:	4613      	mov	r3, r2
 8005754:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005760:	b2db      	uxtb	r3, r3
 8005762:	2b20      	cmp	r3, #32
 8005764:	d17c      	bne.n	8005860 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d002      	beq.n	8005772 <HAL_UART_Transmit+0x2c>
 800576c:	88fb      	ldrh	r3, [r7, #6]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e075      	b.n	8005862 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800577c:	2b01      	cmp	r3, #1
 800577e:	d101      	bne.n	8005784 <HAL_UART_Transmit+0x3e>
 8005780:	2302      	movs	r3, #2
 8005782:	e06e      	b.n	8005862 <HAL_UART_Transmit+0x11c>
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2201      	movs	r2, #1
 8005788:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2221      	movs	r2, #33	; 0x21
 8005796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800579a:	f7fe f995 	bl	8003ac8 <HAL_GetTick>
 800579e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	88fa      	ldrh	r2, [r7, #6]
 80057a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	88fa      	ldrh	r2, [r7, #6]
 80057aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	689b      	ldr	r3, [r3, #8]
 80057b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b4:	d108      	bne.n	80057c8 <HAL_UART_Transmit+0x82>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d104      	bne.n	80057c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80057be:	2300      	movs	r3, #0
 80057c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	61bb      	str	r3, [r7, #24]
 80057c6:	e003      	b.n	80057d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80057c8:	68bb      	ldr	r3, [r7, #8]
 80057ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80057cc:	2300      	movs	r3, #0
 80057ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	2200      	movs	r2, #0
 80057d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80057d8:	e02a      	b.n	8005830 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80057da:	683b      	ldr	r3, [r7, #0]
 80057dc:	9300      	str	r3, [sp, #0]
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	2200      	movs	r2, #0
 80057e2:	2180      	movs	r1, #128	; 0x80
 80057e4:	68f8      	ldr	r0, [r7, #12]
 80057e6:	f000 f840 	bl	800586a <UART_WaitOnFlagUntilTimeout>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057f0:	2303      	movs	r3, #3
 80057f2:	e036      	b.n	8005862 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d10b      	bne.n	8005812 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057fa:	69bb      	ldr	r3, [r7, #24]
 80057fc:	881b      	ldrh	r3, [r3, #0]
 80057fe:	461a      	mov	r2, r3
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005808:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800580a:	69bb      	ldr	r3, [r7, #24]
 800580c:	3302      	adds	r3, #2
 800580e:	61bb      	str	r3, [r7, #24]
 8005810:	e007      	b.n	8005822 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005812:	69fb      	ldr	r3, [r7, #28]
 8005814:	781a      	ldrb	r2, [r3, #0]
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	3301      	adds	r3, #1
 8005820:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005826:	b29b      	uxth	r3, r3
 8005828:	3b01      	subs	r3, #1
 800582a:	b29a      	uxth	r2, r3
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005834:	b29b      	uxth	r3, r3
 8005836:	2b00      	cmp	r3, #0
 8005838:	d1cf      	bne.n	80057da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	9300      	str	r3, [sp, #0]
 800583e:	697b      	ldr	r3, [r7, #20]
 8005840:	2200      	movs	r2, #0
 8005842:	2140      	movs	r1, #64	; 0x40
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 f810 	bl	800586a <UART_WaitOnFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d001      	beq.n	8005854 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005850:	2303      	movs	r3, #3
 8005852:	e006      	b.n	8005862 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	e000      	b.n	8005862 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005860:	2302      	movs	r3, #2
  }
}
 8005862:	4618      	mov	r0, r3
 8005864:	3720      	adds	r7, #32
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}

0800586a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800586a:	b580      	push	{r7, lr}
 800586c:	b084      	sub	sp, #16
 800586e:	af00      	add	r7, sp, #0
 8005870:	60f8      	str	r0, [r7, #12]
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	603b      	str	r3, [r7, #0]
 8005876:	4613      	mov	r3, r2
 8005878:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800587a:	e02c      	b.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800587c:	69bb      	ldr	r3, [r7, #24]
 800587e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005882:	d028      	beq.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005884:	69bb      	ldr	r3, [r7, #24]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d007      	beq.n	800589a <UART_WaitOnFlagUntilTimeout+0x30>
 800588a:	f7fe f91d 	bl	8003ac8 <HAL_GetTick>
 800588e:	4602      	mov	r2, r0
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	1ad3      	subs	r3, r2, r3
 8005894:	69ba      	ldr	r2, [r7, #24]
 8005896:	429a      	cmp	r2, r3
 8005898:	d21d      	bcs.n	80058d6 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	68da      	ldr	r2, [r3, #12]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80058a8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	695a      	ldr	r2, [r3, #20]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f022 0201 	bic.w	r2, r2, #1
 80058b8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2220      	movs	r2, #32
 80058be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2220      	movs	r2, #32
 80058c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e00f      	b.n	80058f6 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	681a      	ldr	r2, [r3, #0]
 80058dc:	68bb      	ldr	r3, [r7, #8]
 80058de:	4013      	ands	r3, r2
 80058e0:	68ba      	ldr	r2, [r7, #8]
 80058e2:	429a      	cmp	r2, r3
 80058e4:	bf0c      	ite	eq
 80058e6:	2301      	moveq	r3, #1
 80058e8:	2300      	movne	r3, #0
 80058ea:	b2db      	uxtb	r3, r3
 80058ec:	461a      	mov	r2, r3
 80058ee:	79fb      	ldrb	r3, [r7, #7]
 80058f0:	429a      	cmp	r2, r3
 80058f2:	d0c3      	beq.n	800587c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058f4:	2300      	movs	r3, #0
}
 80058f6:	4618      	mov	r0, r3
 80058f8:	3710      	adds	r7, #16
 80058fa:	46bd      	mov	sp, r7
 80058fc:	bd80      	pop	{r7, pc}
	...

08005900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005900:	b580      	push	{r7, lr}
 8005902:	b084      	sub	sp, #16
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	691b      	ldr	r3, [r3, #16]
 800590e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	68da      	ldr	r2, [r3, #12]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	430a      	orrs	r2, r1
 800591c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	689a      	ldr	r2, [r3, #8]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	431a      	orrs	r2, r3
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	695b      	ldr	r3, [r3, #20]
 800592c:	4313      	orrs	r3, r2
 800592e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800593a:	f023 030c 	bic.w	r3, r3, #12
 800593e:	687a      	ldr	r2, [r7, #4]
 8005940:	6812      	ldr	r2, [r2, #0]
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	430b      	orrs	r3, r1
 8005946:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	699a      	ldr	r2, [r3, #24]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	430a      	orrs	r2, r1
 800595c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	4a2c      	ldr	r2, [pc, #176]	; (8005a14 <UART_SetConfig+0x114>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d103      	bne.n	8005970 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005968:	f7fe fff6 	bl	8004958 <HAL_RCC_GetPCLK2Freq>
 800596c:	60f8      	str	r0, [r7, #12]
 800596e:	e002      	b.n	8005976 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005970:	f7fe ffde 	bl	8004930 <HAL_RCC_GetPCLK1Freq>
 8005974:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005976:	68fa      	ldr	r2, [r7, #12]
 8005978:	4613      	mov	r3, r2
 800597a:	009b      	lsls	r3, r3, #2
 800597c:	4413      	add	r3, r2
 800597e:	009a      	lsls	r2, r3, #2
 8005980:	441a      	add	r2, r3
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	685b      	ldr	r3, [r3, #4]
 8005986:	009b      	lsls	r3, r3, #2
 8005988:	fbb2 f3f3 	udiv	r3, r2, r3
 800598c:	4a22      	ldr	r2, [pc, #136]	; (8005a18 <UART_SetConfig+0x118>)
 800598e:	fba2 2303 	umull	r2, r3, r2, r3
 8005992:	095b      	lsrs	r3, r3, #5
 8005994:	0119      	lsls	r1, r3, #4
 8005996:	68fa      	ldr	r2, [r7, #12]
 8005998:	4613      	mov	r3, r2
 800599a:	009b      	lsls	r3, r3, #2
 800599c:	4413      	add	r3, r2
 800599e:	009a      	lsls	r2, r3, #2
 80059a0:	441a      	add	r2, r3
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	685b      	ldr	r3, [r3, #4]
 80059a6:	009b      	lsls	r3, r3, #2
 80059a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80059ac:	4b1a      	ldr	r3, [pc, #104]	; (8005a18 <UART_SetConfig+0x118>)
 80059ae:	fba3 0302 	umull	r0, r3, r3, r2
 80059b2:	095b      	lsrs	r3, r3, #5
 80059b4:	2064      	movs	r0, #100	; 0x64
 80059b6:	fb00 f303 	mul.w	r3, r0, r3
 80059ba:	1ad3      	subs	r3, r2, r3
 80059bc:	011b      	lsls	r3, r3, #4
 80059be:	3332      	adds	r3, #50	; 0x32
 80059c0:	4a15      	ldr	r2, [pc, #84]	; (8005a18 <UART_SetConfig+0x118>)
 80059c2:	fba2 2303 	umull	r2, r3, r2, r3
 80059c6:	095b      	lsrs	r3, r3, #5
 80059c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059cc:	4419      	add	r1, r3
 80059ce:	68fa      	ldr	r2, [r7, #12]
 80059d0:	4613      	mov	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	4413      	add	r3, r2
 80059d6:	009a      	lsls	r2, r3, #2
 80059d8:	441a      	add	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	685b      	ldr	r3, [r3, #4]
 80059de:	009b      	lsls	r3, r3, #2
 80059e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80059e4:	4b0c      	ldr	r3, [pc, #48]	; (8005a18 <UART_SetConfig+0x118>)
 80059e6:	fba3 0302 	umull	r0, r3, r3, r2
 80059ea:	095b      	lsrs	r3, r3, #5
 80059ec:	2064      	movs	r0, #100	; 0x64
 80059ee:	fb00 f303 	mul.w	r3, r0, r3
 80059f2:	1ad3      	subs	r3, r2, r3
 80059f4:	011b      	lsls	r3, r3, #4
 80059f6:	3332      	adds	r3, #50	; 0x32
 80059f8:	4a07      	ldr	r2, [pc, #28]	; (8005a18 <UART_SetConfig+0x118>)
 80059fa:	fba2 2303 	umull	r2, r3, r2, r3
 80059fe:	095b      	lsrs	r3, r3, #5
 8005a00:	f003 020f 	and.w	r2, r3, #15
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	440a      	add	r2, r1
 8005a0a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005a0c:	bf00      	nop
 8005a0e:	3710      	adds	r7, #16
 8005a10:	46bd      	mov	sp, r7
 8005a12:	bd80      	pop	{r7, pc}
 8005a14:	40013800 	.word	0x40013800
 8005a18:	51eb851f 	.word	0x51eb851f

08005a1c <__errno>:
 8005a1c:	4b01      	ldr	r3, [pc, #4]	; (8005a24 <__errno+0x8>)
 8005a1e:	6818      	ldr	r0, [r3, #0]
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop
 8005a24:	2000023c 	.word	0x2000023c

08005a28 <__libc_init_array>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	2600      	movs	r6, #0
 8005a2c:	4d0c      	ldr	r5, [pc, #48]	; (8005a60 <__libc_init_array+0x38>)
 8005a2e:	4c0d      	ldr	r4, [pc, #52]	; (8005a64 <__libc_init_array+0x3c>)
 8005a30:	1b64      	subs	r4, r4, r5
 8005a32:	10a4      	asrs	r4, r4, #2
 8005a34:	42a6      	cmp	r6, r4
 8005a36:	d109      	bne.n	8005a4c <__libc_init_array+0x24>
 8005a38:	f000 fcc4 	bl	80063c4 <_init>
 8005a3c:	2600      	movs	r6, #0
 8005a3e:	4d0a      	ldr	r5, [pc, #40]	; (8005a68 <__libc_init_array+0x40>)
 8005a40:	4c0a      	ldr	r4, [pc, #40]	; (8005a6c <__libc_init_array+0x44>)
 8005a42:	1b64      	subs	r4, r4, r5
 8005a44:	10a4      	asrs	r4, r4, #2
 8005a46:	42a6      	cmp	r6, r4
 8005a48:	d105      	bne.n	8005a56 <__libc_init_array+0x2e>
 8005a4a:	bd70      	pop	{r4, r5, r6, pc}
 8005a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a50:	4798      	blx	r3
 8005a52:	3601      	adds	r6, #1
 8005a54:	e7ee      	b.n	8005a34 <__libc_init_array+0xc>
 8005a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a5a:	4798      	blx	r3
 8005a5c:	3601      	adds	r6, #1
 8005a5e:	e7f2      	b.n	8005a46 <__libc_init_array+0x1e>
 8005a60:	080075c0 	.word	0x080075c0
 8005a64:	080075c0 	.word	0x080075c0
 8005a68:	080075c0 	.word	0x080075c0
 8005a6c:	080075c4 	.word	0x080075c4

08005a70 <memset>:
 8005a70:	4603      	mov	r3, r0
 8005a72:	4402      	add	r2, r0
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d100      	bne.n	8005a7a <memset+0xa>
 8005a78:	4770      	bx	lr
 8005a7a:	f803 1b01 	strb.w	r1, [r3], #1
 8005a7e:	e7f9      	b.n	8005a74 <memset+0x4>

08005a80 <sniprintf>:
 8005a80:	b40c      	push	{r2, r3}
 8005a82:	b530      	push	{r4, r5, lr}
 8005a84:	4b17      	ldr	r3, [pc, #92]	; (8005ae4 <sniprintf+0x64>)
 8005a86:	1e0c      	subs	r4, r1, #0
 8005a88:	681d      	ldr	r5, [r3, #0]
 8005a8a:	b09d      	sub	sp, #116	; 0x74
 8005a8c:	da08      	bge.n	8005aa0 <sniprintf+0x20>
 8005a8e:	238b      	movs	r3, #139	; 0x8b
 8005a90:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a94:	602b      	str	r3, [r5, #0]
 8005a96:	b01d      	add	sp, #116	; 0x74
 8005a98:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a9c:	b002      	add	sp, #8
 8005a9e:	4770      	bx	lr
 8005aa0:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005aa4:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005aa8:	bf0c      	ite	eq
 8005aaa:	4623      	moveq	r3, r4
 8005aac:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005ab0:	9304      	str	r3, [sp, #16]
 8005ab2:	9307      	str	r3, [sp, #28]
 8005ab4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005ab8:	9002      	str	r0, [sp, #8]
 8005aba:	9006      	str	r0, [sp, #24]
 8005abc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005ac0:	4628      	mov	r0, r5
 8005ac2:	ab21      	add	r3, sp, #132	; 0x84
 8005ac4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005ac6:	a902      	add	r1, sp, #8
 8005ac8:	9301      	str	r3, [sp, #4]
 8005aca:	f000 f87d 	bl	8005bc8 <_svfiprintf_r>
 8005ace:	1c43      	adds	r3, r0, #1
 8005ad0:	bfbc      	itt	lt
 8005ad2:	238b      	movlt	r3, #139	; 0x8b
 8005ad4:	602b      	strlt	r3, [r5, #0]
 8005ad6:	2c00      	cmp	r4, #0
 8005ad8:	d0dd      	beq.n	8005a96 <sniprintf+0x16>
 8005ada:	2200      	movs	r2, #0
 8005adc:	9b02      	ldr	r3, [sp, #8]
 8005ade:	701a      	strb	r2, [r3, #0]
 8005ae0:	e7d9      	b.n	8005a96 <sniprintf+0x16>
 8005ae2:	bf00      	nop
 8005ae4:	2000023c 	.word	0x2000023c

08005ae8 <strncmp>:
 8005ae8:	4603      	mov	r3, r0
 8005aea:	b510      	push	{r4, lr}
 8005aec:	b172      	cbz	r2, 8005b0c <strncmp+0x24>
 8005aee:	3901      	subs	r1, #1
 8005af0:	1884      	adds	r4, r0, r2
 8005af2:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005af6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005afa:	4290      	cmp	r0, r2
 8005afc:	d101      	bne.n	8005b02 <strncmp+0x1a>
 8005afe:	42a3      	cmp	r3, r4
 8005b00:	d101      	bne.n	8005b06 <strncmp+0x1e>
 8005b02:	1a80      	subs	r0, r0, r2
 8005b04:	bd10      	pop	{r4, pc}
 8005b06:	2800      	cmp	r0, #0
 8005b08:	d1f3      	bne.n	8005af2 <strncmp+0xa>
 8005b0a:	e7fa      	b.n	8005b02 <strncmp+0x1a>
 8005b0c:	4610      	mov	r0, r2
 8005b0e:	e7f9      	b.n	8005b04 <strncmp+0x1c>

08005b10 <__ssputs_r>:
 8005b10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b14:	688e      	ldr	r6, [r1, #8]
 8005b16:	4682      	mov	sl, r0
 8005b18:	429e      	cmp	r6, r3
 8005b1a:	460c      	mov	r4, r1
 8005b1c:	4690      	mov	r8, r2
 8005b1e:	461f      	mov	r7, r3
 8005b20:	d838      	bhi.n	8005b94 <__ssputs_r+0x84>
 8005b22:	898a      	ldrh	r2, [r1, #12]
 8005b24:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005b28:	d032      	beq.n	8005b90 <__ssputs_r+0x80>
 8005b2a:	6825      	ldr	r5, [r4, #0]
 8005b2c:	6909      	ldr	r1, [r1, #16]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	eba5 0901 	sub.w	r9, r5, r1
 8005b34:	6965      	ldr	r5, [r4, #20]
 8005b36:	444b      	add	r3, r9
 8005b38:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005b3c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005b40:	106d      	asrs	r5, r5, #1
 8005b42:	429d      	cmp	r5, r3
 8005b44:	bf38      	it	cc
 8005b46:	461d      	movcc	r5, r3
 8005b48:	0553      	lsls	r3, r2, #21
 8005b4a:	d531      	bpl.n	8005bb0 <__ssputs_r+0xa0>
 8005b4c:	4629      	mov	r1, r5
 8005b4e:	f000 fb6f 	bl	8006230 <_malloc_r>
 8005b52:	4606      	mov	r6, r0
 8005b54:	b950      	cbnz	r0, 8005b6c <__ssputs_r+0x5c>
 8005b56:	230c      	movs	r3, #12
 8005b58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b5c:	f8ca 3000 	str.w	r3, [sl]
 8005b60:	89a3      	ldrh	r3, [r4, #12]
 8005b62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b66:	81a3      	strh	r3, [r4, #12]
 8005b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b6c:	464a      	mov	r2, r9
 8005b6e:	6921      	ldr	r1, [r4, #16]
 8005b70:	f000 face 	bl	8006110 <memcpy>
 8005b74:	89a3      	ldrh	r3, [r4, #12]
 8005b76:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b7e:	81a3      	strh	r3, [r4, #12]
 8005b80:	6126      	str	r6, [r4, #16]
 8005b82:	444e      	add	r6, r9
 8005b84:	6026      	str	r6, [r4, #0]
 8005b86:	463e      	mov	r6, r7
 8005b88:	6165      	str	r5, [r4, #20]
 8005b8a:	eba5 0509 	sub.w	r5, r5, r9
 8005b8e:	60a5      	str	r5, [r4, #8]
 8005b90:	42be      	cmp	r6, r7
 8005b92:	d900      	bls.n	8005b96 <__ssputs_r+0x86>
 8005b94:	463e      	mov	r6, r7
 8005b96:	4632      	mov	r2, r6
 8005b98:	4641      	mov	r1, r8
 8005b9a:	6820      	ldr	r0, [r4, #0]
 8005b9c:	f000 fac6 	bl	800612c <memmove>
 8005ba0:	68a3      	ldr	r3, [r4, #8]
 8005ba2:	2000      	movs	r0, #0
 8005ba4:	1b9b      	subs	r3, r3, r6
 8005ba6:	60a3      	str	r3, [r4, #8]
 8005ba8:	6823      	ldr	r3, [r4, #0]
 8005baa:	4433      	add	r3, r6
 8005bac:	6023      	str	r3, [r4, #0]
 8005bae:	e7db      	b.n	8005b68 <__ssputs_r+0x58>
 8005bb0:	462a      	mov	r2, r5
 8005bb2:	f000 fbb1 	bl	8006318 <_realloc_r>
 8005bb6:	4606      	mov	r6, r0
 8005bb8:	2800      	cmp	r0, #0
 8005bba:	d1e1      	bne.n	8005b80 <__ssputs_r+0x70>
 8005bbc:	4650      	mov	r0, sl
 8005bbe:	6921      	ldr	r1, [r4, #16]
 8005bc0:	f000 face 	bl	8006160 <_free_r>
 8005bc4:	e7c7      	b.n	8005b56 <__ssputs_r+0x46>
	...

08005bc8 <_svfiprintf_r>:
 8005bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	4698      	mov	r8, r3
 8005bce:	898b      	ldrh	r3, [r1, #12]
 8005bd0:	4607      	mov	r7, r0
 8005bd2:	061b      	lsls	r3, r3, #24
 8005bd4:	460d      	mov	r5, r1
 8005bd6:	4614      	mov	r4, r2
 8005bd8:	b09d      	sub	sp, #116	; 0x74
 8005bda:	d50e      	bpl.n	8005bfa <_svfiprintf_r+0x32>
 8005bdc:	690b      	ldr	r3, [r1, #16]
 8005bde:	b963      	cbnz	r3, 8005bfa <_svfiprintf_r+0x32>
 8005be0:	2140      	movs	r1, #64	; 0x40
 8005be2:	f000 fb25 	bl	8006230 <_malloc_r>
 8005be6:	6028      	str	r0, [r5, #0]
 8005be8:	6128      	str	r0, [r5, #16]
 8005bea:	b920      	cbnz	r0, 8005bf6 <_svfiprintf_r+0x2e>
 8005bec:	230c      	movs	r3, #12
 8005bee:	603b      	str	r3, [r7, #0]
 8005bf0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bf4:	e0d1      	b.n	8005d9a <_svfiprintf_r+0x1d2>
 8005bf6:	2340      	movs	r3, #64	; 0x40
 8005bf8:	616b      	str	r3, [r5, #20]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	9309      	str	r3, [sp, #36]	; 0x24
 8005bfe:	2320      	movs	r3, #32
 8005c00:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005c04:	2330      	movs	r3, #48	; 0x30
 8005c06:	f04f 0901 	mov.w	r9, #1
 8005c0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c0e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005db4 <_svfiprintf_r+0x1ec>
 8005c12:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005c16:	4623      	mov	r3, r4
 8005c18:	469a      	mov	sl, r3
 8005c1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005c1e:	b10a      	cbz	r2, 8005c24 <_svfiprintf_r+0x5c>
 8005c20:	2a25      	cmp	r2, #37	; 0x25
 8005c22:	d1f9      	bne.n	8005c18 <_svfiprintf_r+0x50>
 8005c24:	ebba 0b04 	subs.w	fp, sl, r4
 8005c28:	d00b      	beq.n	8005c42 <_svfiprintf_r+0x7a>
 8005c2a:	465b      	mov	r3, fp
 8005c2c:	4622      	mov	r2, r4
 8005c2e:	4629      	mov	r1, r5
 8005c30:	4638      	mov	r0, r7
 8005c32:	f7ff ff6d 	bl	8005b10 <__ssputs_r>
 8005c36:	3001      	adds	r0, #1
 8005c38:	f000 80aa 	beq.w	8005d90 <_svfiprintf_r+0x1c8>
 8005c3c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c3e:	445a      	add	r2, fp
 8005c40:	9209      	str	r2, [sp, #36]	; 0x24
 8005c42:	f89a 3000 	ldrb.w	r3, [sl]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 80a2 	beq.w	8005d90 <_svfiprintf_r+0x1c8>
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c52:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c56:	f10a 0a01 	add.w	sl, sl, #1
 8005c5a:	9304      	str	r3, [sp, #16]
 8005c5c:	9307      	str	r3, [sp, #28]
 8005c5e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c62:	931a      	str	r3, [sp, #104]	; 0x68
 8005c64:	4654      	mov	r4, sl
 8005c66:	2205      	movs	r2, #5
 8005c68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c6c:	4851      	ldr	r0, [pc, #324]	; (8005db4 <_svfiprintf_r+0x1ec>)
 8005c6e:	f000 fa41 	bl	80060f4 <memchr>
 8005c72:	9a04      	ldr	r2, [sp, #16]
 8005c74:	b9d8      	cbnz	r0, 8005cae <_svfiprintf_r+0xe6>
 8005c76:	06d0      	lsls	r0, r2, #27
 8005c78:	bf44      	itt	mi
 8005c7a:	2320      	movmi	r3, #32
 8005c7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c80:	0711      	lsls	r1, r2, #28
 8005c82:	bf44      	itt	mi
 8005c84:	232b      	movmi	r3, #43	; 0x2b
 8005c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c8a:	f89a 3000 	ldrb.w	r3, [sl]
 8005c8e:	2b2a      	cmp	r3, #42	; 0x2a
 8005c90:	d015      	beq.n	8005cbe <_svfiprintf_r+0xf6>
 8005c92:	4654      	mov	r4, sl
 8005c94:	2000      	movs	r0, #0
 8005c96:	f04f 0c0a 	mov.w	ip, #10
 8005c9a:	9a07      	ldr	r2, [sp, #28]
 8005c9c:	4621      	mov	r1, r4
 8005c9e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005ca2:	3b30      	subs	r3, #48	; 0x30
 8005ca4:	2b09      	cmp	r3, #9
 8005ca6:	d94e      	bls.n	8005d46 <_svfiprintf_r+0x17e>
 8005ca8:	b1b0      	cbz	r0, 8005cd8 <_svfiprintf_r+0x110>
 8005caa:	9207      	str	r2, [sp, #28]
 8005cac:	e014      	b.n	8005cd8 <_svfiprintf_r+0x110>
 8005cae:	eba0 0308 	sub.w	r3, r0, r8
 8005cb2:	fa09 f303 	lsl.w	r3, r9, r3
 8005cb6:	4313      	orrs	r3, r2
 8005cb8:	46a2      	mov	sl, r4
 8005cba:	9304      	str	r3, [sp, #16]
 8005cbc:	e7d2      	b.n	8005c64 <_svfiprintf_r+0x9c>
 8005cbe:	9b03      	ldr	r3, [sp, #12]
 8005cc0:	1d19      	adds	r1, r3, #4
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	9103      	str	r1, [sp, #12]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	bfbb      	ittet	lt
 8005cca:	425b      	neglt	r3, r3
 8005ccc:	f042 0202 	orrlt.w	r2, r2, #2
 8005cd0:	9307      	strge	r3, [sp, #28]
 8005cd2:	9307      	strlt	r3, [sp, #28]
 8005cd4:	bfb8      	it	lt
 8005cd6:	9204      	strlt	r2, [sp, #16]
 8005cd8:	7823      	ldrb	r3, [r4, #0]
 8005cda:	2b2e      	cmp	r3, #46	; 0x2e
 8005cdc:	d10c      	bne.n	8005cf8 <_svfiprintf_r+0x130>
 8005cde:	7863      	ldrb	r3, [r4, #1]
 8005ce0:	2b2a      	cmp	r3, #42	; 0x2a
 8005ce2:	d135      	bne.n	8005d50 <_svfiprintf_r+0x188>
 8005ce4:	9b03      	ldr	r3, [sp, #12]
 8005ce6:	3402      	adds	r4, #2
 8005ce8:	1d1a      	adds	r2, r3, #4
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	9203      	str	r2, [sp, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	bfb8      	it	lt
 8005cf2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005cf6:	9305      	str	r3, [sp, #20]
 8005cf8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005db8 <_svfiprintf_r+0x1f0>
 8005cfc:	2203      	movs	r2, #3
 8005cfe:	4650      	mov	r0, sl
 8005d00:	7821      	ldrb	r1, [r4, #0]
 8005d02:	f000 f9f7 	bl	80060f4 <memchr>
 8005d06:	b140      	cbz	r0, 8005d1a <_svfiprintf_r+0x152>
 8005d08:	2340      	movs	r3, #64	; 0x40
 8005d0a:	eba0 000a 	sub.w	r0, r0, sl
 8005d0e:	fa03 f000 	lsl.w	r0, r3, r0
 8005d12:	9b04      	ldr	r3, [sp, #16]
 8005d14:	3401      	adds	r4, #1
 8005d16:	4303      	orrs	r3, r0
 8005d18:	9304      	str	r3, [sp, #16]
 8005d1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d1e:	2206      	movs	r2, #6
 8005d20:	4826      	ldr	r0, [pc, #152]	; (8005dbc <_svfiprintf_r+0x1f4>)
 8005d22:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005d26:	f000 f9e5 	bl	80060f4 <memchr>
 8005d2a:	2800      	cmp	r0, #0
 8005d2c:	d038      	beq.n	8005da0 <_svfiprintf_r+0x1d8>
 8005d2e:	4b24      	ldr	r3, [pc, #144]	; (8005dc0 <_svfiprintf_r+0x1f8>)
 8005d30:	bb1b      	cbnz	r3, 8005d7a <_svfiprintf_r+0x1b2>
 8005d32:	9b03      	ldr	r3, [sp, #12]
 8005d34:	3307      	adds	r3, #7
 8005d36:	f023 0307 	bic.w	r3, r3, #7
 8005d3a:	3308      	adds	r3, #8
 8005d3c:	9303      	str	r3, [sp, #12]
 8005d3e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005d40:	4433      	add	r3, r6
 8005d42:	9309      	str	r3, [sp, #36]	; 0x24
 8005d44:	e767      	b.n	8005c16 <_svfiprintf_r+0x4e>
 8005d46:	460c      	mov	r4, r1
 8005d48:	2001      	movs	r0, #1
 8005d4a:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d4e:	e7a5      	b.n	8005c9c <_svfiprintf_r+0xd4>
 8005d50:	2300      	movs	r3, #0
 8005d52:	f04f 0c0a 	mov.w	ip, #10
 8005d56:	4619      	mov	r1, r3
 8005d58:	3401      	adds	r4, #1
 8005d5a:	9305      	str	r3, [sp, #20]
 8005d5c:	4620      	mov	r0, r4
 8005d5e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d62:	3a30      	subs	r2, #48	; 0x30
 8005d64:	2a09      	cmp	r2, #9
 8005d66:	d903      	bls.n	8005d70 <_svfiprintf_r+0x1a8>
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0c5      	beq.n	8005cf8 <_svfiprintf_r+0x130>
 8005d6c:	9105      	str	r1, [sp, #20]
 8005d6e:	e7c3      	b.n	8005cf8 <_svfiprintf_r+0x130>
 8005d70:	4604      	mov	r4, r0
 8005d72:	2301      	movs	r3, #1
 8005d74:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d78:	e7f0      	b.n	8005d5c <_svfiprintf_r+0x194>
 8005d7a:	ab03      	add	r3, sp, #12
 8005d7c:	9300      	str	r3, [sp, #0]
 8005d7e:	462a      	mov	r2, r5
 8005d80:	4638      	mov	r0, r7
 8005d82:	4b10      	ldr	r3, [pc, #64]	; (8005dc4 <_svfiprintf_r+0x1fc>)
 8005d84:	a904      	add	r1, sp, #16
 8005d86:	f3af 8000 	nop.w
 8005d8a:	1c42      	adds	r2, r0, #1
 8005d8c:	4606      	mov	r6, r0
 8005d8e:	d1d6      	bne.n	8005d3e <_svfiprintf_r+0x176>
 8005d90:	89ab      	ldrh	r3, [r5, #12]
 8005d92:	065b      	lsls	r3, r3, #25
 8005d94:	f53f af2c 	bmi.w	8005bf0 <_svfiprintf_r+0x28>
 8005d98:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d9a:	b01d      	add	sp, #116	; 0x74
 8005d9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005da0:	ab03      	add	r3, sp, #12
 8005da2:	9300      	str	r3, [sp, #0]
 8005da4:	462a      	mov	r2, r5
 8005da6:	4638      	mov	r0, r7
 8005da8:	4b06      	ldr	r3, [pc, #24]	; (8005dc4 <_svfiprintf_r+0x1fc>)
 8005daa:	a904      	add	r1, sp, #16
 8005dac:	f000 f87c 	bl	8005ea8 <_printf_i>
 8005db0:	e7eb      	b.n	8005d8a <_svfiprintf_r+0x1c2>
 8005db2:	bf00      	nop
 8005db4:	0800758b 	.word	0x0800758b
 8005db8:	08007591 	.word	0x08007591
 8005dbc:	08007595 	.word	0x08007595
 8005dc0:	00000000 	.word	0x00000000
 8005dc4:	08005b11 	.word	0x08005b11

08005dc8 <_printf_common>:
 8005dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dcc:	4616      	mov	r6, r2
 8005dce:	4699      	mov	r9, r3
 8005dd0:	688a      	ldr	r2, [r1, #8]
 8005dd2:	690b      	ldr	r3, [r1, #16]
 8005dd4:	4607      	mov	r7, r0
 8005dd6:	4293      	cmp	r3, r2
 8005dd8:	bfb8      	it	lt
 8005dda:	4613      	movlt	r3, r2
 8005ddc:	6033      	str	r3, [r6, #0]
 8005dde:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005de2:	460c      	mov	r4, r1
 8005de4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005de8:	b10a      	cbz	r2, 8005dee <_printf_common+0x26>
 8005dea:	3301      	adds	r3, #1
 8005dec:	6033      	str	r3, [r6, #0]
 8005dee:	6823      	ldr	r3, [r4, #0]
 8005df0:	0699      	lsls	r1, r3, #26
 8005df2:	bf42      	ittt	mi
 8005df4:	6833      	ldrmi	r3, [r6, #0]
 8005df6:	3302      	addmi	r3, #2
 8005df8:	6033      	strmi	r3, [r6, #0]
 8005dfa:	6825      	ldr	r5, [r4, #0]
 8005dfc:	f015 0506 	ands.w	r5, r5, #6
 8005e00:	d106      	bne.n	8005e10 <_printf_common+0x48>
 8005e02:	f104 0a19 	add.w	sl, r4, #25
 8005e06:	68e3      	ldr	r3, [r4, #12]
 8005e08:	6832      	ldr	r2, [r6, #0]
 8005e0a:	1a9b      	subs	r3, r3, r2
 8005e0c:	42ab      	cmp	r3, r5
 8005e0e:	dc28      	bgt.n	8005e62 <_printf_common+0x9a>
 8005e10:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005e14:	1e13      	subs	r3, r2, #0
 8005e16:	6822      	ldr	r2, [r4, #0]
 8005e18:	bf18      	it	ne
 8005e1a:	2301      	movne	r3, #1
 8005e1c:	0692      	lsls	r2, r2, #26
 8005e1e:	d42d      	bmi.n	8005e7c <_printf_common+0xb4>
 8005e20:	4649      	mov	r1, r9
 8005e22:	4638      	mov	r0, r7
 8005e24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005e28:	47c0      	blx	r8
 8005e2a:	3001      	adds	r0, #1
 8005e2c:	d020      	beq.n	8005e70 <_printf_common+0xa8>
 8005e2e:	6823      	ldr	r3, [r4, #0]
 8005e30:	68e5      	ldr	r5, [r4, #12]
 8005e32:	f003 0306 	and.w	r3, r3, #6
 8005e36:	2b04      	cmp	r3, #4
 8005e38:	bf18      	it	ne
 8005e3a:	2500      	movne	r5, #0
 8005e3c:	6832      	ldr	r2, [r6, #0]
 8005e3e:	f04f 0600 	mov.w	r6, #0
 8005e42:	68a3      	ldr	r3, [r4, #8]
 8005e44:	bf08      	it	eq
 8005e46:	1aad      	subeq	r5, r5, r2
 8005e48:	6922      	ldr	r2, [r4, #16]
 8005e4a:	bf08      	it	eq
 8005e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e50:	4293      	cmp	r3, r2
 8005e52:	bfc4      	itt	gt
 8005e54:	1a9b      	subgt	r3, r3, r2
 8005e56:	18ed      	addgt	r5, r5, r3
 8005e58:	341a      	adds	r4, #26
 8005e5a:	42b5      	cmp	r5, r6
 8005e5c:	d11a      	bne.n	8005e94 <_printf_common+0xcc>
 8005e5e:	2000      	movs	r0, #0
 8005e60:	e008      	b.n	8005e74 <_printf_common+0xac>
 8005e62:	2301      	movs	r3, #1
 8005e64:	4652      	mov	r2, sl
 8005e66:	4649      	mov	r1, r9
 8005e68:	4638      	mov	r0, r7
 8005e6a:	47c0      	blx	r8
 8005e6c:	3001      	adds	r0, #1
 8005e6e:	d103      	bne.n	8005e78 <_printf_common+0xb0>
 8005e70:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e78:	3501      	adds	r5, #1
 8005e7a:	e7c4      	b.n	8005e06 <_printf_common+0x3e>
 8005e7c:	2030      	movs	r0, #48	; 0x30
 8005e7e:	18e1      	adds	r1, r4, r3
 8005e80:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e84:	1c5a      	adds	r2, r3, #1
 8005e86:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e8a:	4422      	add	r2, r4
 8005e8c:	3302      	adds	r3, #2
 8005e8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e92:	e7c5      	b.n	8005e20 <_printf_common+0x58>
 8005e94:	2301      	movs	r3, #1
 8005e96:	4622      	mov	r2, r4
 8005e98:	4649      	mov	r1, r9
 8005e9a:	4638      	mov	r0, r7
 8005e9c:	47c0      	blx	r8
 8005e9e:	3001      	adds	r0, #1
 8005ea0:	d0e6      	beq.n	8005e70 <_printf_common+0xa8>
 8005ea2:	3601      	adds	r6, #1
 8005ea4:	e7d9      	b.n	8005e5a <_printf_common+0x92>
	...

08005ea8 <_printf_i>:
 8005ea8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005eac:	7e0f      	ldrb	r7, [r1, #24]
 8005eae:	4691      	mov	r9, r2
 8005eb0:	2f78      	cmp	r7, #120	; 0x78
 8005eb2:	4680      	mov	r8, r0
 8005eb4:	460c      	mov	r4, r1
 8005eb6:	469a      	mov	sl, r3
 8005eb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005eba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005ebe:	d807      	bhi.n	8005ed0 <_printf_i+0x28>
 8005ec0:	2f62      	cmp	r7, #98	; 0x62
 8005ec2:	d80a      	bhi.n	8005eda <_printf_i+0x32>
 8005ec4:	2f00      	cmp	r7, #0
 8005ec6:	f000 80d9 	beq.w	800607c <_printf_i+0x1d4>
 8005eca:	2f58      	cmp	r7, #88	; 0x58
 8005ecc:	f000 80a4 	beq.w	8006018 <_printf_i+0x170>
 8005ed0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ed4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005ed8:	e03a      	b.n	8005f50 <_printf_i+0xa8>
 8005eda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005ede:	2b15      	cmp	r3, #21
 8005ee0:	d8f6      	bhi.n	8005ed0 <_printf_i+0x28>
 8005ee2:	a101      	add	r1, pc, #4	; (adr r1, 8005ee8 <_printf_i+0x40>)
 8005ee4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ee8:	08005f41 	.word	0x08005f41
 8005eec:	08005f55 	.word	0x08005f55
 8005ef0:	08005ed1 	.word	0x08005ed1
 8005ef4:	08005ed1 	.word	0x08005ed1
 8005ef8:	08005ed1 	.word	0x08005ed1
 8005efc:	08005ed1 	.word	0x08005ed1
 8005f00:	08005f55 	.word	0x08005f55
 8005f04:	08005ed1 	.word	0x08005ed1
 8005f08:	08005ed1 	.word	0x08005ed1
 8005f0c:	08005ed1 	.word	0x08005ed1
 8005f10:	08005ed1 	.word	0x08005ed1
 8005f14:	08006063 	.word	0x08006063
 8005f18:	08005f85 	.word	0x08005f85
 8005f1c:	08006045 	.word	0x08006045
 8005f20:	08005ed1 	.word	0x08005ed1
 8005f24:	08005ed1 	.word	0x08005ed1
 8005f28:	08006085 	.word	0x08006085
 8005f2c:	08005ed1 	.word	0x08005ed1
 8005f30:	08005f85 	.word	0x08005f85
 8005f34:	08005ed1 	.word	0x08005ed1
 8005f38:	08005ed1 	.word	0x08005ed1
 8005f3c:	0800604d 	.word	0x0800604d
 8005f40:	682b      	ldr	r3, [r5, #0]
 8005f42:	1d1a      	adds	r2, r3, #4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	602a      	str	r2, [r5, #0]
 8005f48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f50:	2301      	movs	r3, #1
 8005f52:	e0a4      	b.n	800609e <_printf_i+0x1f6>
 8005f54:	6820      	ldr	r0, [r4, #0]
 8005f56:	6829      	ldr	r1, [r5, #0]
 8005f58:	0606      	lsls	r6, r0, #24
 8005f5a:	f101 0304 	add.w	r3, r1, #4
 8005f5e:	d50a      	bpl.n	8005f76 <_printf_i+0xce>
 8005f60:	680e      	ldr	r6, [r1, #0]
 8005f62:	602b      	str	r3, [r5, #0]
 8005f64:	2e00      	cmp	r6, #0
 8005f66:	da03      	bge.n	8005f70 <_printf_i+0xc8>
 8005f68:	232d      	movs	r3, #45	; 0x2d
 8005f6a:	4276      	negs	r6, r6
 8005f6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f70:	230a      	movs	r3, #10
 8005f72:	485e      	ldr	r0, [pc, #376]	; (80060ec <_printf_i+0x244>)
 8005f74:	e019      	b.n	8005faa <_printf_i+0x102>
 8005f76:	680e      	ldr	r6, [r1, #0]
 8005f78:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f7c:	602b      	str	r3, [r5, #0]
 8005f7e:	bf18      	it	ne
 8005f80:	b236      	sxthne	r6, r6
 8005f82:	e7ef      	b.n	8005f64 <_printf_i+0xbc>
 8005f84:	682b      	ldr	r3, [r5, #0]
 8005f86:	6820      	ldr	r0, [r4, #0]
 8005f88:	1d19      	adds	r1, r3, #4
 8005f8a:	6029      	str	r1, [r5, #0]
 8005f8c:	0601      	lsls	r1, r0, #24
 8005f8e:	d501      	bpl.n	8005f94 <_printf_i+0xec>
 8005f90:	681e      	ldr	r6, [r3, #0]
 8005f92:	e002      	b.n	8005f9a <_printf_i+0xf2>
 8005f94:	0646      	lsls	r6, r0, #25
 8005f96:	d5fb      	bpl.n	8005f90 <_printf_i+0xe8>
 8005f98:	881e      	ldrh	r6, [r3, #0]
 8005f9a:	2f6f      	cmp	r7, #111	; 0x6f
 8005f9c:	bf0c      	ite	eq
 8005f9e:	2308      	moveq	r3, #8
 8005fa0:	230a      	movne	r3, #10
 8005fa2:	4852      	ldr	r0, [pc, #328]	; (80060ec <_printf_i+0x244>)
 8005fa4:	2100      	movs	r1, #0
 8005fa6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005faa:	6865      	ldr	r5, [r4, #4]
 8005fac:	2d00      	cmp	r5, #0
 8005fae:	bfa8      	it	ge
 8005fb0:	6821      	ldrge	r1, [r4, #0]
 8005fb2:	60a5      	str	r5, [r4, #8]
 8005fb4:	bfa4      	itt	ge
 8005fb6:	f021 0104 	bicge.w	r1, r1, #4
 8005fba:	6021      	strge	r1, [r4, #0]
 8005fbc:	b90e      	cbnz	r6, 8005fc2 <_printf_i+0x11a>
 8005fbe:	2d00      	cmp	r5, #0
 8005fc0:	d04d      	beq.n	800605e <_printf_i+0x1b6>
 8005fc2:	4615      	mov	r5, r2
 8005fc4:	fbb6 f1f3 	udiv	r1, r6, r3
 8005fc8:	fb03 6711 	mls	r7, r3, r1, r6
 8005fcc:	5dc7      	ldrb	r7, [r0, r7]
 8005fce:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005fd2:	4637      	mov	r7, r6
 8005fd4:	42bb      	cmp	r3, r7
 8005fd6:	460e      	mov	r6, r1
 8005fd8:	d9f4      	bls.n	8005fc4 <_printf_i+0x11c>
 8005fda:	2b08      	cmp	r3, #8
 8005fdc:	d10b      	bne.n	8005ff6 <_printf_i+0x14e>
 8005fde:	6823      	ldr	r3, [r4, #0]
 8005fe0:	07de      	lsls	r6, r3, #31
 8005fe2:	d508      	bpl.n	8005ff6 <_printf_i+0x14e>
 8005fe4:	6923      	ldr	r3, [r4, #16]
 8005fe6:	6861      	ldr	r1, [r4, #4]
 8005fe8:	4299      	cmp	r1, r3
 8005fea:	bfde      	ittt	le
 8005fec:	2330      	movle	r3, #48	; 0x30
 8005fee:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005ff2:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005ff6:	1b52      	subs	r2, r2, r5
 8005ff8:	6122      	str	r2, [r4, #16]
 8005ffa:	464b      	mov	r3, r9
 8005ffc:	4621      	mov	r1, r4
 8005ffe:	4640      	mov	r0, r8
 8006000:	f8cd a000 	str.w	sl, [sp]
 8006004:	aa03      	add	r2, sp, #12
 8006006:	f7ff fedf 	bl	8005dc8 <_printf_common>
 800600a:	3001      	adds	r0, #1
 800600c:	d14c      	bne.n	80060a8 <_printf_i+0x200>
 800600e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006012:	b004      	add	sp, #16
 8006014:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006018:	4834      	ldr	r0, [pc, #208]	; (80060ec <_printf_i+0x244>)
 800601a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800601e:	6829      	ldr	r1, [r5, #0]
 8006020:	6823      	ldr	r3, [r4, #0]
 8006022:	f851 6b04 	ldr.w	r6, [r1], #4
 8006026:	6029      	str	r1, [r5, #0]
 8006028:	061d      	lsls	r5, r3, #24
 800602a:	d514      	bpl.n	8006056 <_printf_i+0x1ae>
 800602c:	07df      	lsls	r7, r3, #31
 800602e:	bf44      	itt	mi
 8006030:	f043 0320 	orrmi.w	r3, r3, #32
 8006034:	6023      	strmi	r3, [r4, #0]
 8006036:	b91e      	cbnz	r6, 8006040 <_printf_i+0x198>
 8006038:	6823      	ldr	r3, [r4, #0]
 800603a:	f023 0320 	bic.w	r3, r3, #32
 800603e:	6023      	str	r3, [r4, #0]
 8006040:	2310      	movs	r3, #16
 8006042:	e7af      	b.n	8005fa4 <_printf_i+0xfc>
 8006044:	6823      	ldr	r3, [r4, #0]
 8006046:	f043 0320 	orr.w	r3, r3, #32
 800604a:	6023      	str	r3, [r4, #0]
 800604c:	2378      	movs	r3, #120	; 0x78
 800604e:	4828      	ldr	r0, [pc, #160]	; (80060f0 <_printf_i+0x248>)
 8006050:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006054:	e7e3      	b.n	800601e <_printf_i+0x176>
 8006056:	0659      	lsls	r1, r3, #25
 8006058:	bf48      	it	mi
 800605a:	b2b6      	uxthmi	r6, r6
 800605c:	e7e6      	b.n	800602c <_printf_i+0x184>
 800605e:	4615      	mov	r5, r2
 8006060:	e7bb      	b.n	8005fda <_printf_i+0x132>
 8006062:	682b      	ldr	r3, [r5, #0]
 8006064:	6826      	ldr	r6, [r4, #0]
 8006066:	1d18      	adds	r0, r3, #4
 8006068:	6961      	ldr	r1, [r4, #20]
 800606a:	6028      	str	r0, [r5, #0]
 800606c:	0635      	lsls	r5, r6, #24
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	d501      	bpl.n	8006076 <_printf_i+0x1ce>
 8006072:	6019      	str	r1, [r3, #0]
 8006074:	e002      	b.n	800607c <_printf_i+0x1d4>
 8006076:	0670      	lsls	r0, r6, #25
 8006078:	d5fb      	bpl.n	8006072 <_printf_i+0x1ca>
 800607a:	8019      	strh	r1, [r3, #0]
 800607c:	2300      	movs	r3, #0
 800607e:	4615      	mov	r5, r2
 8006080:	6123      	str	r3, [r4, #16]
 8006082:	e7ba      	b.n	8005ffa <_printf_i+0x152>
 8006084:	682b      	ldr	r3, [r5, #0]
 8006086:	2100      	movs	r1, #0
 8006088:	1d1a      	adds	r2, r3, #4
 800608a:	602a      	str	r2, [r5, #0]
 800608c:	681d      	ldr	r5, [r3, #0]
 800608e:	6862      	ldr	r2, [r4, #4]
 8006090:	4628      	mov	r0, r5
 8006092:	f000 f82f 	bl	80060f4 <memchr>
 8006096:	b108      	cbz	r0, 800609c <_printf_i+0x1f4>
 8006098:	1b40      	subs	r0, r0, r5
 800609a:	6060      	str	r0, [r4, #4]
 800609c:	6863      	ldr	r3, [r4, #4]
 800609e:	6123      	str	r3, [r4, #16]
 80060a0:	2300      	movs	r3, #0
 80060a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80060a6:	e7a8      	b.n	8005ffa <_printf_i+0x152>
 80060a8:	462a      	mov	r2, r5
 80060aa:	4649      	mov	r1, r9
 80060ac:	4640      	mov	r0, r8
 80060ae:	6923      	ldr	r3, [r4, #16]
 80060b0:	47d0      	blx	sl
 80060b2:	3001      	adds	r0, #1
 80060b4:	d0ab      	beq.n	800600e <_printf_i+0x166>
 80060b6:	6823      	ldr	r3, [r4, #0]
 80060b8:	079b      	lsls	r3, r3, #30
 80060ba:	d413      	bmi.n	80060e4 <_printf_i+0x23c>
 80060bc:	68e0      	ldr	r0, [r4, #12]
 80060be:	9b03      	ldr	r3, [sp, #12]
 80060c0:	4298      	cmp	r0, r3
 80060c2:	bfb8      	it	lt
 80060c4:	4618      	movlt	r0, r3
 80060c6:	e7a4      	b.n	8006012 <_printf_i+0x16a>
 80060c8:	2301      	movs	r3, #1
 80060ca:	4632      	mov	r2, r6
 80060cc:	4649      	mov	r1, r9
 80060ce:	4640      	mov	r0, r8
 80060d0:	47d0      	blx	sl
 80060d2:	3001      	adds	r0, #1
 80060d4:	d09b      	beq.n	800600e <_printf_i+0x166>
 80060d6:	3501      	adds	r5, #1
 80060d8:	68e3      	ldr	r3, [r4, #12]
 80060da:	9903      	ldr	r1, [sp, #12]
 80060dc:	1a5b      	subs	r3, r3, r1
 80060de:	42ab      	cmp	r3, r5
 80060e0:	dcf2      	bgt.n	80060c8 <_printf_i+0x220>
 80060e2:	e7eb      	b.n	80060bc <_printf_i+0x214>
 80060e4:	2500      	movs	r5, #0
 80060e6:	f104 0619 	add.w	r6, r4, #25
 80060ea:	e7f5      	b.n	80060d8 <_printf_i+0x230>
 80060ec:	0800759c 	.word	0x0800759c
 80060f0:	080075ad 	.word	0x080075ad

080060f4 <memchr>:
 80060f4:	4603      	mov	r3, r0
 80060f6:	b510      	push	{r4, lr}
 80060f8:	b2c9      	uxtb	r1, r1
 80060fa:	4402      	add	r2, r0
 80060fc:	4293      	cmp	r3, r2
 80060fe:	4618      	mov	r0, r3
 8006100:	d101      	bne.n	8006106 <memchr+0x12>
 8006102:	2000      	movs	r0, #0
 8006104:	e003      	b.n	800610e <memchr+0x1a>
 8006106:	7804      	ldrb	r4, [r0, #0]
 8006108:	3301      	adds	r3, #1
 800610a:	428c      	cmp	r4, r1
 800610c:	d1f6      	bne.n	80060fc <memchr+0x8>
 800610e:	bd10      	pop	{r4, pc}

08006110 <memcpy>:
 8006110:	440a      	add	r2, r1
 8006112:	4291      	cmp	r1, r2
 8006114:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006118:	d100      	bne.n	800611c <memcpy+0xc>
 800611a:	4770      	bx	lr
 800611c:	b510      	push	{r4, lr}
 800611e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006122:	4291      	cmp	r1, r2
 8006124:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006128:	d1f9      	bne.n	800611e <memcpy+0xe>
 800612a:	bd10      	pop	{r4, pc}

0800612c <memmove>:
 800612c:	4288      	cmp	r0, r1
 800612e:	b510      	push	{r4, lr}
 8006130:	eb01 0402 	add.w	r4, r1, r2
 8006134:	d902      	bls.n	800613c <memmove+0x10>
 8006136:	4284      	cmp	r4, r0
 8006138:	4623      	mov	r3, r4
 800613a:	d807      	bhi.n	800614c <memmove+0x20>
 800613c:	1e43      	subs	r3, r0, #1
 800613e:	42a1      	cmp	r1, r4
 8006140:	d008      	beq.n	8006154 <memmove+0x28>
 8006142:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006146:	f803 2f01 	strb.w	r2, [r3, #1]!
 800614a:	e7f8      	b.n	800613e <memmove+0x12>
 800614c:	4601      	mov	r1, r0
 800614e:	4402      	add	r2, r0
 8006150:	428a      	cmp	r2, r1
 8006152:	d100      	bne.n	8006156 <memmove+0x2a>
 8006154:	bd10      	pop	{r4, pc}
 8006156:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800615a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800615e:	e7f7      	b.n	8006150 <memmove+0x24>

08006160 <_free_r>:
 8006160:	b538      	push	{r3, r4, r5, lr}
 8006162:	4605      	mov	r5, r0
 8006164:	2900      	cmp	r1, #0
 8006166:	d040      	beq.n	80061ea <_free_r+0x8a>
 8006168:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800616c:	1f0c      	subs	r4, r1, #4
 800616e:	2b00      	cmp	r3, #0
 8006170:	bfb8      	it	lt
 8006172:	18e4      	addlt	r4, r4, r3
 8006174:	f000 f910 	bl	8006398 <__malloc_lock>
 8006178:	4a1c      	ldr	r2, [pc, #112]	; (80061ec <_free_r+0x8c>)
 800617a:	6813      	ldr	r3, [r2, #0]
 800617c:	b933      	cbnz	r3, 800618c <_free_r+0x2c>
 800617e:	6063      	str	r3, [r4, #4]
 8006180:	6014      	str	r4, [r2, #0]
 8006182:	4628      	mov	r0, r5
 8006184:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006188:	f000 b90c 	b.w	80063a4 <__malloc_unlock>
 800618c:	42a3      	cmp	r3, r4
 800618e:	d908      	bls.n	80061a2 <_free_r+0x42>
 8006190:	6820      	ldr	r0, [r4, #0]
 8006192:	1821      	adds	r1, r4, r0
 8006194:	428b      	cmp	r3, r1
 8006196:	bf01      	itttt	eq
 8006198:	6819      	ldreq	r1, [r3, #0]
 800619a:	685b      	ldreq	r3, [r3, #4]
 800619c:	1809      	addeq	r1, r1, r0
 800619e:	6021      	streq	r1, [r4, #0]
 80061a0:	e7ed      	b.n	800617e <_free_r+0x1e>
 80061a2:	461a      	mov	r2, r3
 80061a4:	685b      	ldr	r3, [r3, #4]
 80061a6:	b10b      	cbz	r3, 80061ac <_free_r+0x4c>
 80061a8:	42a3      	cmp	r3, r4
 80061aa:	d9fa      	bls.n	80061a2 <_free_r+0x42>
 80061ac:	6811      	ldr	r1, [r2, #0]
 80061ae:	1850      	adds	r0, r2, r1
 80061b0:	42a0      	cmp	r0, r4
 80061b2:	d10b      	bne.n	80061cc <_free_r+0x6c>
 80061b4:	6820      	ldr	r0, [r4, #0]
 80061b6:	4401      	add	r1, r0
 80061b8:	1850      	adds	r0, r2, r1
 80061ba:	4283      	cmp	r3, r0
 80061bc:	6011      	str	r1, [r2, #0]
 80061be:	d1e0      	bne.n	8006182 <_free_r+0x22>
 80061c0:	6818      	ldr	r0, [r3, #0]
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	4401      	add	r1, r0
 80061c6:	6011      	str	r1, [r2, #0]
 80061c8:	6053      	str	r3, [r2, #4]
 80061ca:	e7da      	b.n	8006182 <_free_r+0x22>
 80061cc:	d902      	bls.n	80061d4 <_free_r+0x74>
 80061ce:	230c      	movs	r3, #12
 80061d0:	602b      	str	r3, [r5, #0]
 80061d2:	e7d6      	b.n	8006182 <_free_r+0x22>
 80061d4:	6820      	ldr	r0, [r4, #0]
 80061d6:	1821      	adds	r1, r4, r0
 80061d8:	428b      	cmp	r3, r1
 80061da:	bf01      	itttt	eq
 80061dc:	6819      	ldreq	r1, [r3, #0]
 80061de:	685b      	ldreq	r3, [r3, #4]
 80061e0:	1809      	addeq	r1, r1, r0
 80061e2:	6021      	streq	r1, [r4, #0]
 80061e4:	6063      	str	r3, [r4, #4]
 80061e6:	6054      	str	r4, [r2, #4]
 80061e8:	e7cb      	b.n	8006182 <_free_r+0x22>
 80061ea:	bd38      	pop	{r3, r4, r5, pc}
 80061ec:	20000b18 	.word	0x20000b18

080061f0 <sbrk_aligned>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	4e0e      	ldr	r6, [pc, #56]	; (800622c <sbrk_aligned+0x3c>)
 80061f4:	460c      	mov	r4, r1
 80061f6:	6831      	ldr	r1, [r6, #0]
 80061f8:	4605      	mov	r5, r0
 80061fa:	b911      	cbnz	r1, 8006202 <sbrk_aligned+0x12>
 80061fc:	f000 f8bc 	bl	8006378 <_sbrk_r>
 8006200:	6030      	str	r0, [r6, #0]
 8006202:	4621      	mov	r1, r4
 8006204:	4628      	mov	r0, r5
 8006206:	f000 f8b7 	bl	8006378 <_sbrk_r>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	d00a      	beq.n	8006224 <sbrk_aligned+0x34>
 800620e:	1cc4      	adds	r4, r0, #3
 8006210:	f024 0403 	bic.w	r4, r4, #3
 8006214:	42a0      	cmp	r0, r4
 8006216:	d007      	beq.n	8006228 <sbrk_aligned+0x38>
 8006218:	1a21      	subs	r1, r4, r0
 800621a:	4628      	mov	r0, r5
 800621c:	f000 f8ac 	bl	8006378 <_sbrk_r>
 8006220:	3001      	adds	r0, #1
 8006222:	d101      	bne.n	8006228 <sbrk_aligned+0x38>
 8006224:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006228:	4620      	mov	r0, r4
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	20000b1c 	.word	0x20000b1c

08006230 <_malloc_r>:
 8006230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006234:	1ccd      	adds	r5, r1, #3
 8006236:	f025 0503 	bic.w	r5, r5, #3
 800623a:	3508      	adds	r5, #8
 800623c:	2d0c      	cmp	r5, #12
 800623e:	bf38      	it	cc
 8006240:	250c      	movcc	r5, #12
 8006242:	2d00      	cmp	r5, #0
 8006244:	4607      	mov	r7, r0
 8006246:	db01      	blt.n	800624c <_malloc_r+0x1c>
 8006248:	42a9      	cmp	r1, r5
 800624a:	d905      	bls.n	8006258 <_malloc_r+0x28>
 800624c:	230c      	movs	r3, #12
 800624e:	2600      	movs	r6, #0
 8006250:	603b      	str	r3, [r7, #0]
 8006252:	4630      	mov	r0, r6
 8006254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006258:	4e2e      	ldr	r6, [pc, #184]	; (8006314 <_malloc_r+0xe4>)
 800625a:	f000 f89d 	bl	8006398 <__malloc_lock>
 800625e:	6833      	ldr	r3, [r6, #0]
 8006260:	461c      	mov	r4, r3
 8006262:	bb34      	cbnz	r4, 80062b2 <_malloc_r+0x82>
 8006264:	4629      	mov	r1, r5
 8006266:	4638      	mov	r0, r7
 8006268:	f7ff ffc2 	bl	80061f0 <sbrk_aligned>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	4604      	mov	r4, r0
 8006270:	d14d      	bne.n	800630e <_malloc_r+0xde>
 8006272:	6834      	ldr	r4, [r6, #0]
 8006274:	4626      	mov	r6, r4
 8006276:	2e00      	cmp	r6, #0
 8006278:	d140      	bne.n	80062fc <_malloc_r+0xcc>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	4631      	mov	r1, r6
 800627e:	4638      	mov	r0, r7
 8006280:	eb04 0803 	add.w	r8, r4, r3
 8006284:	f000 f878 	bl	8006378 <_sbrk_r>
 8006288:	4580      	cmp	r8, r0
 800628a:	d13a      	bne.n	8006302 <_malloc_r+0xd2>
 800628c:	6821      	ldr	r1, [r4, #0]
 800628e:	3503      	adds	r5, #3
 8006290:	1a6d      	subs	r5, r5, r1
 8006292:	f025 0503 	bic.w	r5, r5, #3
 8006296:	3508      	adds	r5, #8
 8006298:	2d0c      	cmp	r5, #12
 800629a:	bf38      	it	cc
 800629c:	250c      	movcc	r5, #12
 800629e:	4638      	mov	r0, r7
 80062a0:	4629      	mov	r1, r5
 80062a2:	f7ff ffa5 	bl	80061f0 <sbrk_aligned>
 80062a6:	3001      	adds	r0, #1
 80062a8:	d02b      	beq.n	8006302 <_malloc_r+0xd2>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	442b      	add	r3, r5
 80062ae:	6023      	str	r3, [r4, #0]
 80062b0:	e00e      	b.n	80062d0 <_malloc_r+0xa0>
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	1b52      	subs	r2, r2, r5
 80062b6:	d41e      	bmi.n	80062f6 <_malloc_r+0xc6>
 80062b8:	2a0b      	cmp	r2, #11
 80062ba:	d916      	bls.n	80062ea <_malloc_r+0xba>
 80062bc:	1961      	adds	r1, r4, r5
 80062be:	42a3      	cmp	r3, r4
 80062c0:	6025      	str	r5, [r4, #0]
 80062c2:	bf18      	it	ne
 80062c4:	6059      	strne	r1, [r3, #4]
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	bf08      	it	eq
 80062ca:	6031      	streq	r1, [r6, #0]
 80062cc:	5162      	str	r2, [r4, r5]
 80062ce:	604b      	str	r3, [r1, #4]
 80062d0:	4638      	mov	r0, r7
 80062d2:	f104 060b 	add.w	r6, r4, #11
 80062d6:	f000 f865 	bl	80063a4 <__malloc_unlock>
 80062da:	f026 0607 	bic.w	r6, r6, #7
 80062de:	1d23      	adds	r3, r4, #4
 80062e0:	1af2      	subs	r2, r6, r3
 80062e2:	d0b6      	beq.n	8006252 <_malloc_r+0x22>
 80062e4:	1b9b      	subs	r3, r3, r6
 80062e6:	50a3      	str	r3, [r4, r2]
 80062e8:	e7b3      	b.n	8006252 <_malloc_r+0x22>
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	bf0c      	ite	eq
 80062f0:	6032      	streq	r2, [r6, #0]
 80062f2:	605a      	strne	r2, [r3, #4]
 80062f4:	e7ec      	b.n	80062d0 <_malloc_r+0xa0>
 80062f6:	4623      	mov	r3, r4
 80062f8:	6864      	ldr	r4, [r4, #4]
 80062fa:	e7b2      	b.n	8006262 <_malloc_r+0x32>
 80062fc:	4634      	mov	r4, r6
 80062fe:	6876      	ldr	r6, [r6, #4]
 8006300:	e7b9      	b.n	8006276 <_malloc_r+0x46>
 8006302:	230c      	movs	r3, #12
 8006304:	4638      	mov	r0, r7
 8006306:	603b      	str	r3, [r7, #0]
 8006308:	f000 f84c 	bl	80063a4 <__malloc_unlock>
 800630c:	e7a1      	b.n	8006252 <_malloc_r+0x22>
 800630e:	6025      	str	r5, [r4, #0]
 8006310:	e7de      	b.n	80062d0 <_malloc_r+0xa0>
 8006312:	bf00      	nop
 8006314:	20000b18 	.word	0x20000b18

08006318 <_realloc_r>:
 8006318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800631c:	4680      	mov	r8, r0
 800631e:	4614      	mov	r4, r2
 8006320:	460e      	mov	r6, r1
 8006322:	b921      	cbnz	r1, 800632e <_realloc_r+0x16>
 8006324:	4611      	mov	r1, r2
 8006326:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800632a:	f7ff bf81 	b.w	8006230 <_malloc_r>
 800632e:	b92a      	cbnz	r2, 800633c <_realloc_r+0x24>
 8006330:	f7ff ff16 	bl	8006160 <_free_r>
 8006334:	4625      	mov	r5, r4
 8006336:	4628      	mov	r0, r5
 8006338:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800633c:	f000 f838 	bl	80063b0 <_malloc_usable_size_r>
 8006340:	4284      	cmp	r4, r0
 8006342:	4607      	mov	r7, r0
 8006344:	d802      	bhi.n	800634c <_realloc_r+0x34>
 8006346:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800634a:	d812      	bhi.n	8006372 <_realloc_r+0x5a>
 800634c:	4621      	mov	r1, r4
 800634e:	4640      	mov	r0, r8
 8006350:	f7ff ff6e 	bl	8006230 <_malloc_r>
 8006354:	4605      	mov	r5, r0
 8006356:	2800      	cmp	r0, #0
 8006358:	d0ed      	beq.n	8006336 <_realloc_r+0x1e>
 800635a:	42bc      	cmp	r4, r7
 800635c:	4622      	mov	r2, r4
 800635e:	4631      	mov	r1, r6
 8006360:	bf28      	it	cs
 8006362:	463a      	movcs	r2, r7
 8006364:	f7ff fed4 	bl	8006110 <memcpy>
 8006368:	4631      	mov	r1, r6
 800636a:	4640      	mov	r0, r8
 800636c:	f7ff fef8 	bl	8006160 <_free_r>
 8006370:	e7e1      	b.n	8006336 <_realloc_r+0x1e>
 8006372:	4635      	mov	r5, r6
 8006374:	e7df      	b.n	8006336 <_realloc_r+0x1e>
	...

08006378 <_sbrk_r>:
 8006378:	b538      	push	{r3, r4, r5, lr}
 800637a:	2300      	movs	r3, #0
 800637c:	4d05      	ldr	r5, [pc, #20]	; (8006394 <_sbrk_r+0x1c>)
 800637e:	4604      	mov	r4, r0
 8006380:	4608      	mov	r0, r1
 8006382:	602b      	str	r3, [r5, #0]
 8006384:	f7fb f896 	bl	80014b4 <_sbrk>
 8006388:	1c43      	adds	r3, r0, #1
 800638a:	d102      	bne.n	8006392 <_sbrk_r+0x1a>
 800638c:	682b      	ldr	r3, [r5, #0]
 800638e:	b103      	cbz	r3, 8006392 <_sbrk_r+0x1a>
 8006390:	6023      	str	r3, [r4, #0]
 8006392:	bd38      	pop	{r3, r4, r5, pc}
 8006394:	20000b20 	.word	0x20000b20

08006398 <__malloc_lock>:
 8006398:	4801      	ldr	r0, [pc, #4]	; (80063a0 <__malloc_lock+0x8>)
 800639a:	f000 b811 	b.w	80063c0 <__retarget_lock_acquire_recursive>
 800639e:	bf00      	nop
 80063a0:	20000b24 	.word	0x20000b24

080063a4 <__malloc_unlock>:
 80063a4:	4801      	ldr	r0, [pc, #4]	; (80063ac <__malloc_unlock+0x8>)
 80063a6:	f000 b80c 	b.w	80063c2 <__retarget_lock_release_recursive>
 80063aa:	bf00      	nop
 80063ac:	20000b24 	.word	0x20000b24

080063b0 <_malloc_usable_size_r>:
 80063b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063b4:	1f18      	subs	r0, r3, #4
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	bfbc      	itt	lt
 80063ba:	580b      	ldrlt	r3, [r1, r0]
 80063bc:	18c0      	addlt	r0, r0, r3
 80063be:	4770      	bx	lr

080063c0 <__retarget_lock_acquire_recursive>:
 80063c0:	4770      	bx	lr

080063c2 <__retarget_lock_release_recursive>:
 80063c2:	4770      	bx	lr

080063c4 <_init>:
 80063c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063c6:	bf00      	nop
 80063c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063ca:	bc08      	pop	{r3}
 80063cc:	469e      	mov	lr, r3
 80063ce:	4770      	bx	lr

080063d0 <_fini>:
 80063d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80063d2:	bf00      	nop
 80063d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80063d6:	bc08      	pop	{r3}
 80063d8:	469e      	mov	lr, r3
 80063da:	4770      	bx	lr
