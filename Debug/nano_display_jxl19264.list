
nano_display_jxl19264.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006288  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a78  08006394  08006394  00016394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006e0c  08006e0c  000202a0  2**0
                  CONTENTS
  4 .ARM          00000000  08006e0c  08006e0c  000202a0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006e0c  08006e0c  000202a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006e0c  08006e0c  00016e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006e10  08006e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000002a0  20000000  08006e14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000888  200002a0  080070b4  000202a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b28  080070b4  00020b28  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000202a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00036147  00000000  00000000  000202c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004314  00000000  00000000  00056410  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001e40  00000000  00000000  0005a728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001c28  00000000  00000000  0005c568  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011ef5  00000000  00000000  0005e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000110e1  00000000  00000000  00070085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000050  00000000  00000000  00081166  2**0
                  CONTENTS, READONLY
 19 .debug_frame  000083fc  00000000  00000000  000811b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	200002a0 	.word	0x200002a0
 8000128:	00000000 	.word	0x00000000
 800012c:	0800637c 	.word	0x0800637c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	200002a4 	.word	0x200002a4
 8000148:	0800637c 	.word	0x0800637c

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <u8x8_stm32_gpio_and_delay>:
//uint8_t ans[100];
u8g2_t u8g2;

uint8_t u8x8_stm32_gpio_and_delay(U8X8_UNUSED u8x8_t *u8x8,
U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int,
U8X8_UNUSED void *arg_ptr) {
 800015c:	b580      	push	{r7, lr}
 800015e:	b084      	sub	sp, #16
 8000160:	af00      	add	r7, sp, #0
 8000162:	60f8      	str	r0, [r7, #12]
 8000164:	607b      	str	r3, [r7, #4]
 8000166:	460b      	mov	r3, r1
 8000168:	72fb      	strb	r3, [r7, #11]
 800016a:	4613      	mov	r3, r2
 800016c:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 800016e:	7afb      	ldrb	r3, [r7, #11]
 8000170:	2b4b      	cmp	r3, #75	; 0x4b
 8000172:	d01a      	beq.n	80001aa <u8x8_stm32_gpio_and_delay+0x4e>
 8000174:	2b4b      	cmp	r3, #75	; 0x4b
 8000176:	dc1f      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000178:	2b4a      	cmp	r3, #74	; 0x4a
 800017a:	d00f      	beq.n	800019c <u8x8_stm32_gpio_and_delay+0x40>
 800017c:	2b4a      	cmp	r3, #74	; 0x4a
 800017e:	dc1b      	bgt.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
 8000180:	2b28      	cmp	r3, #40	; 0x28
 8000182:	d002      	beq.n	800018a <u8x8_stm32_gpio_and_delay+0x2e>
 8000184:	2b29      	cmp	r3, #41	; 0x29
 8000186:	d004      	beq.n	8000192 <u8x8_stm32_gpio_and_delay+0x36>
 8000188:	e016      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_AND_DELAY_INIT:
		HAL_Delay(1);
 800018a:	2001      	movs	r0, #1
 800018c:	f003 fc82 	bl	8003a94 <HAL_Delay>
		break;
 8000190:	e012      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_DELAY_MILLI:
		HAL_Delay(arg_int);
 8000192:	7abb      	ldrb	r3, [r7, #10]
 8000194:	4618      	mov	r0, r3
 8000196:	f003 fc7d 	bl	8003a94 <HAL_Delay>
		break;
 800019a:	e00d      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 800019c:	7abb      	ldrb	r3, [r7, #10]
 800019e:	461a      	mov	r2, r3
 80001a0:	2140      	movs	r1, #64	; 0x40
 80001a2:	4808      	ldr	r0, [pc, #32]	; (80001c4 <u8x8_stm32_gpio_and_delay+0x68>)
 80001a4:	f003 ff82 	bl	80040ac <HAL_GPIO_WritePin>
		break;
 80001a8:	e006      	b.n	80001b8 <u8x8_stm32_gpio_and_delay+0x5c>
	case U8X8_MSG_GPIO_RESET:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_1, arg_int);
 80001aa:	7abb      	ldrb	r3, [r7, #10]
 80001ac:	461a      	mov	r2, r3
 80001ae:	2102      	movs	r1, #2
 80001b0:	4805      	ldr	r0, [pc, #20]	; (80001c8 <u8x8_stm32_gpio_and_delay+0x6c>)
 80001b2:	f003 ff7b 	bl	80040ac <HAL_GPIO_WritePin>
		break;
 80001b6:	bf00      	nop
	}
	return 1;
 80001b8:	2301      	movs	r3, #1
}
 80001ba:	4618      	mov	r0, r3
 80001bc:	3710      	adds	r7, #16
 80001be:	46bd      	mov	sp, r7
 80001c0:	bd80      	pop	{r7, pc}
 80001c2:	bf00      	nop
 80001c4:	40010800 	.word	0x40010800
 80001c8:	40010c00 	.word	0x40010c00

080001cc <u8x8_byte_4wire_hw_spi>:

uint8_t u8x8_byte_4wire_hw_spi(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
 80001d2:	60f8      	str	r0, [r7, #12]
 80001d4:	607b      	str	r3, [r7, #4]
 80001d6:	460b      	mov	r3, r1
 80001d8:	72fb      	strb	r3, [r7, #11]
 80001da:	4613      	mov	r3, r2
 80001dc:	72bb      	strb	r3, [r7, #10]
	switch (msg) {
 80001de:	7afb      	ldrb	r3, [r7, #11]
 80001e0:	3b14      	subs	r3, #20
 80001e2:	2b0c      	cmp	r3, #12
 80001e4:	d82c      	bhi.n	8000240 <u8x8_byte_4wire_hw_spi+0x74>
 80001e6:	a201      	add	r2, pc, #4	; (adr r2, 80001ec <u8x8_byte_4wire_hw_spi+0x20>)
 80001e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80001ec:	08000245 	.word	0x08000245
 80001f0:	08000241 	.word	0x08000241
 80001f4:	08000241 	.word	0x08000241
 80001f8:	08000221 	.word	0x08000221
 80001fc:	08000245 	.word	0x08000245
 8000200:	08000245 	.word	0x08000245
 8000204:	08000241 	.word	0x08000241
 8000208:	08000241 	.word	0x08000241
 800020c:	08000241 	.word	0x08000241
 8000210:	08000241 	.word	0x08000241
 8000214:	08000241 	.word	0x08000241
 8000218:	08000241 	.word	0x08000241
 800021c:	08000233 	.word	0x08000233
	case U8X8_MSG_BYTE_SEND:
		HAL_SPI_Transmit(&hspi1, (uint8_t*) arg_ptr, arg_int, 10000);
 8000220:	7abb      	ldrb	r3, [r7, #10]
 8000222:	b29a      	uxth	r2, r3
 8000224:	f242 7310 	movw	r3, #10000	; 0x2710
 8000228:	6879      	ldr	r1, [r7, #4]
 800022a:	4809      	ldr	r0, [pc, #36]	; (8000250 <u8x8_byte_4wire_hw_spi+0x84>)
 800022c:	f004 fc26 	bl	8004a7c <HAL_SPI_Transmit>
		break;
 8000230:	e009      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, arg_int);
 8000232:	7abb      	ldrb	r3, [r7, #10]
 8000234:	461a      	mov	r2, r3
 8000236:	2140      	movs	r1, #64	; 0x40
 8000238:	4806      	ldr	r0, [pc, #24]	; (8000254 <u8x8_byte_4wire_hw_spi+0x88>)
 800023a:	f003 ff37 	bl	80040ac <HAL_GPIO_WritePin>
		break;
 800023e:	e002      	b.n	8000246 <u8x8_byte_4wire_hw_spi+0x7a>
	case U8X8_MSG_BYTE_START_TRANSFER:
		break;
	case U8X8_MSG_BYTE_END_TRANSFER:
		break;
	default:
		return 0;
 8000240:	2300      	movs	r3, #0
 8000242:	e001      	b.n	8000248 <u8x8_byte_4wire_hw_spi+0x7c>
		break;
 8000244:	bf00      	nop
	}
	return 1;
 8000246:	2301      	movs	r3, #1
}
 8000248:	4618      	mov	r0, r3
 800024a:	3710      	adds	r7, #16
 800024c:	46bd      	mov	sp, r7
 800024e:	bd80      	pop	{r7, pc}
 8000250:	20000358 	.word	0x20000358
 8000254:	40010800 	.word	0x40010800

08000258 <HAL_TIM_PeriodElapsedCallback>:
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
	}
}
*/

void HAL_TIM_PeriodElapsedCallback	(	TIM_HandleTypeDef * 	htim	)	{
 8000258:	b580      	push	{r7, lr}
 800025a:	b082      	sub	sp, #8
 800025c:	af00      	add	r7, sp, #0
 800025e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000260:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000264:	4806      	ldr	r0, [pc, #24]	; (8000280 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000266:	f003 ff39 	bl	80040dc <HAL_GPIO_TogglePin>
	HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800026a:	200a      	movs	r0, #10
 800026c:	f003 fd6b 	bl	8003d46 <HAL_NVIC_EnableIRQ>
	HAL_TIM_Base_Stop_IT(&htim2);
 8000270:	4804      	ldr	r0, [pc, #16]	; (8000284 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8000272:	f004 fe81 	bl	8004f78 <HAL_TIM_Base_Stop_IT>
}
 8000276:	bf00      	nop
 8000278:	3708      	adds	r7, #8
 800027a:	46bd      	mov	sp, r7
 800027c:	bd80      	pop	{r7, pc}
 800027e:	bf00      	nop
 8000280:	40011000 	.word	0x40011000
 8000284:	200003b0 	.word	0x200003b0

08000288 <HAL_GPIO_EXTI_Callback>:


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000288:	b580      	push	{r7, lr}
 800028a:	b082      	sub	sp, #8
 800028c:	af00      	add	r7, sp, #0
 800028e:	4603      	mov	r3, r0
 8000290:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == GPIO_PIN_4) {
 8000292:	88fb      	ldrh	r3, [r7, #6]
 8000294:	2b10      	cmp	r3, #16
 8000296:	d10d      	bne.n	80002b4 <HAL_GPIO_EXTI_Callback+0x2c>
//		reset
		HAL_NVIC_DisableIRQ(EXTI4_IRQn);
 8000298:	200a      	movs	r0, #10
 800029a:	f003 fd62 	bl	8003d62 <HAL_NVIC_DisableIRQ>
		HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 800029e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80002a2:	4806      	ldr	r0, [pc, #24]	; (80002bc <HAL_GPIO_EXTI_Callback+0x34>)
 80002a4:	f003 ff1a 	bl	80040dc <HAL_GPIO_TogglePin>
		HAL_TIM_Base_Start_IT(&htim2);
 80002a8:	4805      	ldr	r0, [pc, #20]	; (80002c0 <HAL_GPIO_EXTI_Callback+0x38>)
 80002aa:	f004 fe19 	bl	8004ee0 <HAL_TIM_Base_Start_IT>
		monitor_send_string((uint8_t*) "E\r\n");
 80002ae:	4805      	ldr	r0, [pc, #20]	; (80002c4 <HAL_GPIO_EXTI_Callback+0x3c>)
 80002b0:	f000 fd9c 	bl	8000dec <monitor_send_string>
	 cont = 0;
	 monitor_send_string((uint8_t*) "A");
	 HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
	 interrupt_enable = true;
	 }*/
}
 80002b4:	bf00      	nop
 80002b6:	3708      	adds	r7, #8
 80002b8:	46bd      	mov	sp, r7
 80002ba:	bd80      	pop	{r7, pc}
 80002bc:	40011000 	.word	0x40011000
 80002c0:	200003b0 	.word	0x200003b0
 80002c4:	08006394 	.word	0x08006394

080002c8 <start>:
void start(void) {
 80002c8:	b580      	push	{r7, lr}
 80002ca:	af00      	add	r7, sp, #0

//	u8g2_Setup_uc1604_jlx19264_1(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
//			u8x8_stm32_gpio_and_delay);

	u8g2_Setup_uc1604_jlx19264_f(&u8g2, U8G2_R0, u8x8_byte_4wire_hw_spi,
 80002cc:	4b16      	ldr	r3, [pc, #88]	; (8000328 <start+0x60>)
 80002ce:	4a17      	ldr	r2, [pc, #92]	; (800032c <start+0x64>)
 80002d0:	4917      	ldr	r1, [pc, #92]	; (8000330 <start+0x68>)
 80002d2:	4818      	ldr	r0, [pc, #96]	; (8000334 <start+0x6c>)
 80002d4:	f001 fca0 	bl	8001c18 <u8g2_Setup_uc1604_jlx19264_f>
			u8x8_stm32_gpio_and_delay);//[full framebuffer, size = 1536 bytes]


	u8g2_InitDisplay(&u8g2);
 80002d8:	4816      	ldr	r0, [pc, #88]	; (8000334 <start+0x6c>)
 80002da:	f003 faa4 	bl	8003826 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 80002de:	2100      	movs	r1, #0
 80002e0:	4814      	ldr	r0, [pc, #80]	; (8000334 <start+0x6c>)
 80002e2:	f003 faaf 	bl	8003844 <u8x8_SetPowerSave>
	set_contrast(OPTIMAL_CONTRAST + '0');
 80002e6:	2034      	movs	r0, #52	; 0x34
 80002e8:	f000 fa20 	bl	800072c <set_contrast>

	u8g2_SetDrawColor(&u8g2, 2);
 80002ec:	2102      	movs	r1, #2
 80002ee:	4811      	ldr	r0, [pc, #68]	; (8000334 <start+0x6c>)
 80002f0:	f002 fcac 	bl	8002c4c <u8g2_SetDrawColor>
	u8g2_SetBitmapMode(&u8g2, 1);
 80002f4:	2101      	movs	r1, #1
 80002f6:	480f      	ldr	r0, [pc, #60]	; (8000334 <start+0x6c>)
 80002f8:	f001 f8f4 	bl	80014e4 <u8g2_SetBitmapMode>
	u8g2_SetFontMode(&u8g2, 1);
 80002fc:	2101      	movs	r1, #1
 80002fe:	480d      	ldr	r0, [pc, #52]	; (8000334 <start+0x6c>)
 8000300:	f002 f924 	bl	800254c <u8g2_SetFontMode>
	u8g2_SetFontPosTop(&u8g2);
 8000304:	480b      	ldr	r0, [pc, #44]	; (8000334 <start+0x6c>)
 8000306:	f002 fa8f 	bl	8002828 <u8g2_SetFontPosTop>
	r	Only glyphs on the range of the ASCII codes 32 to 127 are included in the font.
	u	Only glyphs on the range of the ASCII codes 32 to 95 (uppercase chars) are included in the font.
	n	Only numbers and extra glyphs for writing date and time strings are included in the font.
	...	Other custom character list.*/

	u8g2_SetFont(&u8g2, u8g2_font_t0_11_mf);
 800030a:	490b      	ldr	r1, [pc, #44]	; (8000338 <start+0x70>)
 800030c:	4809      	ldr	r0, [pc, #36]	; (8000334 <start+0x6c>)
 800030e:	f002 fa99 	bl	8002844 <u8g2_SetFont>



	disp_splash();
 8000312:	f000 fa21 	bl	8000758 <disp_splash>
	text_insertion_point((0 + '0'), (0 + '0'));
 8000316:	2130      	movs	r1, #48	; 0x30
 8000318:	2030      	movs	r0, #48	; 0x30
 800031a:	f000 f8a9 	bl	8000470 <text_insertion_point>
//	u8g2_SetFont(&u8g2, u8g2_font_unifont_t_symbols);
	serial_begin();
 800031e:	f000 ff27 	bl	8001170 <serial_begin>
}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	0800015d 	.word	0x0800015d
 800032c:	080001cd 	.word	0x080001cd
 8000330:	08006d68 	.word	0x08006d68
 8000334:	200002bc 	.word	0x200002bc
 8000338:	08006450 	.word	0x08006450

0800033c <createQueue>:
#include <circular_queue.h>

// function to create a queue
// of given capacity.
// It initializes size of queue as 0
queue* createQueue(unsigned capacity) {
 800033c:	e92d 03b0 	stmdb	sp!, {r4, r5, r7, r8, r9}
 8000340:	b089      	sub	sp, #36	; 0x24
 8000342:	af00      	add	r7, sp, #0
 8000344:	6078      	str	r0, [r7, #4]
 8000346:	466b      	mov	r3, sp
 8000348:	4618      	mov	r0, r3
	queue aux[1];
	queue *Queue = aux;
 800034a:	f107 0308 	add.w	r3, r7, #8
 800034e:	61fb      	str	r3, [r7, #28]
	Queue->capacity = capacity;
 8000350:	69fb      	ldr	r3, [r7, #28]
 8000352:	687a      	ldr	r2, [r7, #4]
 8000354:	605a      	str	r2, [r3, #4]
	Queue->front = Queue->size = 0;
 8000356:	69fb      	ldr	r3, [r7, #28]
 8000358:	2200      	movs	r2, #0
 800035a:	709a      	strb	r2, [r3, #2]
 800035c:	69fb      	ldr	r3, [r7, #28]
 800035e:	789a      	ldrb	r2, [r3, #2]
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	701a      	strb	r2, [r3, #0]

	// This is important, see the enQueue
	Queue->rear = capacity - 1;
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	b2db      	uxtb	r3, r3
 8000368:	3b01      	subs	r3, #1
 800036a:	b2da      	uxtb	r2, r3
 800036c:	69fb      	ldr	r3, [r7, #28]
 800036e:	705a      	strb	r2, [r3, #1]
	uint8_t pl[Queue->capacity];
 8000370:	69fb      	ldr	r3, [r7, #28]
 8000372:	6859      	ldr	r1, [r3, #4]
 8000374:	460b      	mov	r3, r1
 8000376:	3b01      	subs	r3, #1
 8000378:	61bb      	str	r3, [r7, #24]
 800037a:	2300      	movs	r3, #0
 800037c:	4688      	mov	r8, r1
 800037e:	4699      	mov	r9, r3
 8000380:	f04f 0200 	mov.w	r2, #0
 8000384:	f04f 0300 	mov.w	r3, #0
 8000388:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800038c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000390:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000394:	2300      	movs	r3, #0
 8000396:	460c      	mov	r4, r1
 8000398:	461d      	mov	r5, r3
 800039a:	f04f 0200 	mov.w	r2, #0
 800039e:	f04f 0300 	mov.w	r3, #0
 80003a2:	00eb      	lsls	r3, r5, #3
 80003a4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80003a8:	00e2      	lsls	r2, r4, #3
 80003aa:	1dcb      	adds	r3, r1, #7
 80003ac:	08db      	lsrs	r3, r3, #3
 80003ae:	00db      	lsls	r3, r3, #3
 80003b0:	ebad 0d03 	sub.w	sp, sp, r3
 80003b4:	466b      	mov	r3, sp
 80003b6:	3300      	adds	r3, #0
 80003b8:	617b      	str	r3, [r7, #20]
	Queue->array = pl;
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	697a      	ldr	r2, [r7, #20]
 80003be:	609a      	str	r2, [r3, #8]
	return Queue;
 80003c0:	69fb      	ldr	r3, [r7, #28]
 80003c2:	4685      	mov	sp, r0
}
 80003c4:	4618      	mov	r0, r3
 80003c6:	3724      	adds	r7, #36	; 0x24
 80003c8:	46bd      	mov	sp, r7
 80003ca:	e8bd 03b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9}
 80003ce:	4770      	bx	lr

080003d0 <isFull>:

// Queue is full when size becomes
// equal to the capacity
uint8_t isFull(queue *Queue) {
 80003d0:	b480      	push	{r7}
 80003d2:	b083      	sub	sp, #12
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	return (Queue->size == Queue->capacity);
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	789b      	ldrb	r3, [r3, #2]
 80003dc:	461a      	mov	r2, r3
 80003de:	687b      	ldr	r3, [r7, #4]
 80003e0:	685b      	ldr	r3, [r3, #4]
 80003e2:	429a      	cmp	r2, r3
 80003e4:	bf0c      	ite	eq
 80003e6:	2301      	moveq	r3, #1
 80003e8:	2300      	movne	r3, #0
 80003ea:	b2db      	uxtb	r3, r3
}
 80003ec:	4618      	mov	r0, r3
 80003ee:	370c      	adds	r7, #12
 80003f0:	46bd      	mov	sp, r7
 80003f2:	bc80      	pop	{r7}
 80003f4:	4770      	bx	lr

080003f6 <enQueue>:
	return (Queue->size == 0);
}

// Function to add an item to the queue.
// It changes rear and size
void enQueue(queue *Queue, uint8_t item) {
 80003f6:	b580      	push	{r7, lr}
 80003f8:	b082      	sub	sp, #8
 80003fa:	af00      	add	r7, sp, #0
 80003fc:	6078      	str	r0, [r7, #4]
 80003fe:	460b      	mov	r3, r1
 8000400:	70fb      	strb	r3, [r7, #3]
	if (isFull(Queue))
 8000402:	6878      	ldr	r0, [r7, #4]
 8000404:	f7ff ffe4 	bl	80003d0 <isFull>
 8000408:	4603      	mov	r3, r0
 800040a:	2b00      	cmp	r3, #0
 800040c:	d11b      	bne.n	8000446 <enQueue+0x50>
		return;
	Queue->rear = (Queue->rear + 1) % Queue->capacity;
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	785b      	ldrb	r3, [r3, #1]
 8000412:	3301      	adds	r3, #1
 8000414:	461a      	mov	r2, r3
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	685b      	ldr	r3, [r3, #4]
 800041a:	fbb2 f1f3 	udiv	r1, r2, r3
 800041e:	fb01 f303 	mul.w	r3, r1, r3
 8000422:	1ad3      	subs	r3, r2, r3
 8000424:	b2da      	uxtb	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	705a      	strb	r2, [r3, #1]
	Queue->array[Queue->rear] = item;
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	687a      	ldr	r2, [r7, #4]
 8000430:	7852      	ldrb	r2, [r2, #1]
 8000432:	4413      	add	r3, r2
 8000434:	78fa      	ldrb	r2, [r7, #3]
 8000436:	701a      	strb	r2, [r3, #0]
	Queue->size = Queue->size + 1;
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	789b      	ldrb	r3, [r3, #2]
 800043c:	3301      	adds	r3, #1
 800043e:	b2da      	uxtb	r2, r3
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	709a      	strb	r2, [r3, #2]
 8000444:	e000      	b.n	8000448 <enQueue+0x52>
		return;
 8000446:	bf00      	nop
}
 8000448:	3708      	adds	r7, #8
 800044a:	46bd      	mov	sp, r7
 800044c:	bd80      	pop	{r7, pc}
	...

08000450 <auto_line_wrap>:
 *	se quebra para a primeira posição da propria linha em que ele estava sendo escrito
 *		FE 44 FD
 *		254 68 253
 *		254 `D` 253
 */
void auto_line_wrap(bool enable) {
 8000450:	b480      	push	{r7}
 8000452:	b083      	sub	sp, #12
 8000454:	af00      	add	r7, sp, #0
 8000456:	4603      	mov	r3, r0
 8000458:	71fb      	strb	r3, [r7, #7]
	//u8g2_SendF(&u8g2, "c", (enable ? 0x0a7 : 0x0a6));
	text_wrap = enable;
 800045a:	4a04      	ldr	r2, [pc, #16]	; (800046c <auto_line_wrap+0x1c>)
 800045c:	79fb      	ldrb	r3, [r7, #7]
 800045e:	7013      	strb	r3, [r2, #0]
}
 8000460:	bf00      	nop
 8000462:	370c      	adds	r7, #12
 8000464:	46bd      	mov	sp, r7
 8000466:	bc80      	pop	{r7}
 8000468:	4770      	bx	lr
 800046a:	bf00      	nop
 800046c:	20000351 	.word	0x20000351

08000470 <text_insertion_point>:
 *	determina o ponto como sendo o inicio (0,0) do display
 *		FE 48 FD
 *		254 72 253
 *		254 `H` 253
 */
void text_insertion_point(uint8_t col, uint8_t row) {
 8000470:	b480      	push	{r7}
 8000472:	b083      	sub	sp, #12
 8000474:	af00      	add	r7, sp, #0
 8000476:	4603      	mov	r3, r0
 8000478:	460a      	mov	r2, r1
 800047a:	71fb      	strb	r3, [r7, #7]
 800047c:	4613      	mov	r3, r2
 800047e:	71bb      	strb	r3, [r7, #6]
	//x do cursor
	//y do cursor
	cursor[0] = col - '0';
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	3b30      	subs	r3, #48	; 0x30
 8000484:	b2da      	uxtb	r2, r3
 8000486:	4b06      	ldr	r3, [pc, #24]	; (80004a0 <text_insertion_point+0x30>)
 8000488:	701a      	strb	r2, [r3, #0]
	cursor[1] = row - '0';
 800048a:	79bb      	ldrb	r3, [r7, #6]
 800048c:	3b30      	subs	r3, #48	; 0x30
 800048e:	b2da      	uxtb	r2, r3
 8000490:	4b03      	ldr	r3, [pc, #12]	; (80004a0 <text_insertion_point+0x30>)
 8000492:	705a      	strb	r2, [r3, #1]
}
 8000494:	bf00      	nop
 8000496:	370c      	adds	r7, #12
 8000498:	46bd      	mov	sp, r7
 800049a:	bc80      	pop	{r7}
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	20000354 	.word	0x20000354

080004a4 <inverse_text>:
 *	desativa a inversão de texto
 *		FE 67 FD
 *		254 103 253
 *		254 `g` 253
 */
void inverse_text(bool state) {
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	71fb      	strb	r3, [r7, #7]
	text_invertion = state;
 80004ae:	4a04      	ldr	r2, [pc, #16]	; (80004c0 <inverse_text+0x1c>)
 80004b0:	79fb      	ldrb	r3, [r7, #7]
 80004b2:	7013      	strb	r3, [r2, #0]
}
 80004b4:	bf00      	nop
 80004b6:	370c      	adds	r7, #12
 80004b8:	46bd      	mov	sp, r7
 80004ba:	bc80      	pop	{r7}
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop
 80004c0:	20000350 	.word	0x20000350

080004c4 <def_thick_v_bar>:
 *	Define a barra vertical como com 5px de largura
 *	FE 76 FD
 *	254 118 253
 *	254 `v` 253
 */
void def_thick_v_bar(void) {
 80004c4:	b480      	push	{r7}
 80004c6:	af00      	add	r7, sp, #0
	vertical_bar_width = 5;
 80004c8:	4b03      	ldr	r3, [pc, #12]	; (80004d8 <def_thick_v_bar+0x14>)
 80004ca:	2205      	movs	r2, #5
 80004cc:	701a      	strb	r2, [r3, #0]
}
 80004ce:	bf00      	nop
 80004d0:	46bd      	mov	sp, r7
 80004d2:	bc80      	pop	{r7}
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop
 80004d8:	20000228 	.word	0x20000228

080004dc <def_thin_v_bar>:
 * 	Define a barra vertical como com 2px de largura
 *	FE 73 FD
 *	254 115 253
 *	254 `s` 253
 */
void def_thin_v_bar(void) {
 80004dc:	b480      	push	{r7}
 80004de:	af00      	add	r7, sp, #0
	vertical_bar_width = 2;
 80004e0:	4b03      	ldr	r3, [pc, #12]	; (80004f0 <def_thin_v_bar+0x14>)
 80004e2:	2202      	movs	r2, #2
 80004e4:	701a      	strb	r2, [r3, #0]
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bc80      	pop	{r7}
 80004ec:	4770      	bx	lr
 80004ee:	bf00      	nop
 80004f0:	20000228 	.word	0x20000228

080004f4 <draw_v_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 3D [col] [height] FD
 *	254 61 [col] [height] 253
 *	254 `=` [col] [height] 253
 */
void draw_v_bar_graph(uint8_t col, uint8_t height) {
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b084      	sub	sp, #16
 80004f8:	af02      	add	r7, sp, #8
 80004fa:	4603      	mov	r3, r0
 80004fc:	460a      	mov	r2, r1
 80004fe:	71fb      	strb	r3, [r7, #7]
 8000500:	4613      	mov	r3, r2
 8000502:	71bb      	strb	r3, [r7, #6]
	cursor[0] = (col - '0') * u8g2_GetMaxCharWidth(&u8g2);
 8000504:	79fb      	ldrb	r3, [r7, #7]
 8000506:	3b30      	subs	r3, #48	; 0x30
 8000508:	b2db      	uxtb	r3, r3
 800050a:	4a11      	ldr	r2, [pc, #68]	; (8000550 <draw_v_bar_graph+0x5c>)
 800050c:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	fb02 f303 	mul.w	r3, r2, r3
 8000516:	b2da      	uxtb	r2, r3
 8000518:	4b0e      	ldr	r3, [pc, #56]	; (8000554 <draw_v_bar_graph+0x60>)
 800051a:	701a      	strb	r2, [r3, #0]

	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height - '0');
 800051c:	4b0d      	ldr	r3, [pc, #52]	; (8000554 <draw_v_bar_graph+0x60>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	b299      	uxth	r1, r3
 8000522:	4b0c      	ldr	r3, [pc, #48]	; (8000554 <draw_v_bar_graph+0x60>)
 8000524:	785b      	ldrb	r3, [r3, #1]
 8000526:	b29a      	uxth	r2, r3
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <draw_v_bar_graph+0x64>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	b298      	uxth	r0, r3
 800052e:	79bb      	ldrb	r3, [r7, #6]
 8000530:	b29b      	uxth	r3, r3
 8000532:	3b30      	subs	r3, #48	; 0x30
 8000534:	b29b      	uxth	r3, r3
 8000536:	9300      	str	r3, [sp, #0]
 8000538:	4603      	mov	r3, r0
 800053a:	4805      	ldr	r0, [pc, #20]	; (8000550 <draw_v_bar_graph+0x5c>)
 800053c:	f001 f892 	bl	8001664 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 8000540:	4803      	ldr	r0, [pc, #12]	; (8000550 <draw_v_bar_graph+0x5c>)
 8000542:	f001 f995 	bl	8001870 <u8g2_SendBuffer>
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200002bc 	.word	0x200002bc
 8000554:	20000354 	.word	0x20000354
 8000558:	20000228 	.word	0x20000228

0800055c <erase_v_bar_graph>:
 *	com height	variando [[0x00] a [0x20]] (0 a 32)
 *	FE 2D [col] [height] FD
 * 	254 45 [col] [height] 253
 *	254 `-` [col] [height] 253
 */
void erase_v_bar_graph(uint8_t col, uint8_t height) {
 800055c:	b580      	push	{r7, lr}
 800055e:	b084      	sub	sp, #16
 8000560:	af02      	add	r7, sp, #8
 8000562:	4603      	mov	r3, r0
 8000564:	460a      	mov	r2, r1
 8000566:	71fb      	strb	r3, [r7, #7]
 8000568:	4613      	mov	r3, r2
 800056a:	71bb      	strb	r3, [r7, #6]
	cursor[0] = (col - '0') * u8g2_GetMaxCharWidth(&u8g2);
 800056c:	79fb      	ldrb	r3, [r7, #7]
 800056e:	3b30      	subs	r3, #48	; 0x30
 8000570:	b2db      	uxtb	r3, r3
 8000572:	4a11      	ldr	r2, [pc, #68]	; (80005b8 <erase_v_bar_graph+0x5c>)
 8000574:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 8000578:	b2d2      	uxtb	r2, r2
 800057a:	fb02 f303 	mul.w	r3, r2, r3
 800057e:	b2da      	uxtb	r2, r3
 8000580:	4b0e      	ldr	r3, [pc, #56]	; (80005bc <erase_v_bar_graph+0x60>)
 8000582:	701a      	strb	r2, [r3, #0]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], vertical_bar_width, height - '0');
 8000584:	4b0d      	ldr	r3, [pc, #52]	; (80005bc <erase_v_bar_graph+0x60>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	b299      	uxth	r1, r3
 800058a:	4b0c      	ldr	r3, [pc, #48]	; (80005bc <erase_v_bar_graph+0x60>)
 800058c:	785b      	ldrb	r3, [r3, #1]
 800058e:	b29a      	uxth	r2, r3
 8000590:	4b0b      	ldr	r3, [pc, #44]	; (80005c0 <erase_v_bar_graph+0x64>)
 8000592:	781b      	ldrb	r3, [r3, #0]
 8000594:	b298      	uxth	r0, r3
 8000596:	79bb      	ldrb	r3, [r7, #6]
 8000598:	b29b      	uxth	r3, r3
 800059a:	3b30      	subs	r3, #48	; 0x30
 800059c:	b29b      	uxth	r3, r3
 800059e:	9300      	str	r3, [sp, #0]
 80005a0:	4603      	mov	r3, r0
 80005a2:	4805      	ldr	r0, [pc, #20]	; (80005b8 <erase_v_bar_graph+0x5c>)
 80005a4:	f001 f85e 	bl	8001664 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 80005a8:	4803      	ldr	r0, [pc, #12]	; (80005b8 <erase_v_bar_graph+0x5c>)
 80005aa:	f001 f961 	bl	8001870 <u8g2_SendBuffer>
}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	200002bc 	.word	0x200002bc
 80005bc:	20000354 	.word	0x20000354
 80005c0:	20000228 	.word	0x20000228

080005c4 <draw_h_bar_graph>:
 *	variando de [[0x00] a [0x7A]] (0 a 122)
 *	FE 7C [cc] [height] FD
 *	254 124 [cc] [height] 253
 *	254 `|` [cc] [height] 253
 */
void draw_h_bar_graph(uint8_t col, uint8_t row, uint8_t lenght) {
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b084      	sub	sp, #16
 80005c8:	af02      	add	r7, sp, #8
 80005ca:	4603      	mov	r3, r0
 80005cc:	71fb      	strb	r3, [r7, #7]
 80005ce:	460b      	mov	r3, r1
 80005d0:	71bb      	strb	r3, [r7, #6]
 80005d2:	4613      	mov	r3, r2
 80005d4:	717b      	strb	r3, [r7, #5]
	cursor[0] = (col - '0') * u8g2_GetMaxCharHeight(&u8g2);
 80005d6:	79fb      	ldrb	r3, [r7, #7]
 80005d8:	3b30      	subs	r3, #48	; 0x30
 80005da:	b2db      	uxtb	r3, r3
 80005dc:	4a17      	ldr	r2, [pc, #92]	; (800063c <draw_h_bar_graph+0x78>)
 80005de:	f992 207e 	ldrsb.w	r2, [r2, #126]	; 0x7e
 80005e2:	b2d2      	uxtb	r2, r2
 80005e4:	fb02 f303 	mul.w	r3, r2, r3
 80005e8:	b2da      	uxtb	r2, r3
 80005ea:	4b15      	ldr	r3, [pc, #84]	; (8000640 <draw_h_bar_graph+0x7c>)
 80005ec:	701a      	strb	r2, [r3, #0]
	cursor[1] = (row - '0') * u8g2_GetMaxCharWidth(&u8g2);
 80005ee:	79bb      	ldrb	r3, [r7, #6]
 80005f0:	3b30      	subs	r3, #48	; 0x30
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	4a11      	ldr	r2, [pc, #68]	; (800063c <draw_h_bar_graph+0x78>)
 80005f6:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 80005fa:	b2d2      	uxtb	r2, r2
 80005fc:	fb02 f303 	mul.w	r3, r2, r3
 8000600:	b2da      	uxtb	r2, r3
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <draw_h_bar_graph+0x7c>)
 8000604:	705a      	strb	r2, [r3, #1]
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght - '0',
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <draw_h_bar_graph+0x7c>)
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	b299      	uxth	r1, r3
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <draw_h_bar_graph+0x7c>)
 800060e:	785b      	ldrb	r3, [r3, #1]
 8000610:	b29a      	uxth	r2, r3
 8000612:	797b      	ldrb	r3, [r7, #5]
 8000614:	b29b      	uxth	r3, r3
 8000616:	3b30      	subs	r3, #48	; 0x30
 8000618:	b298      	uxth	r0, r3
			u8g2_GetMaxCharHeight(&u8g2));
 800061a:	4b08      	ldr	r3, [pc, #32]	; (800063c <draw_h_bar_graph+0x78>)
 800061c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
	u8g2_DrawBox(&u8g2, cursor[0], cursor[1], lenght - '0',
 8000620:	b29b      	uxth	r3, r3
 8000622:	9300      	str	r3, [sp, #0]
 8000624:	4603      	mov	r3, r0
 8000626:	4805      	ldr	r0, [pc, #20]	; (800063c <draw_h_bar_graph+0x78>)
 8000628:	f001 f81c 	bl	8001664 <u8g2_DrawBox>
	u8g2_SendBuffer(&u8g2);
 800062c:	4803      	ldr	r0, [pc, #12]	; (800063c <draw_h_bar_graph+0x78>)
 800062e:	f001 f91f 	bl	8001870 <u8g2_SendBuffer>
	//u8g2_DrawVLine(&u8g2, col, u8g2_uint_t y, u8g2_uint_t h);
}
 8000632:	bf00      	nop
 8000634:	3708      	adds	r7, #8
 8000636:	46bd      	mov	sp, r7
 8000638:	bd80      	pop	{r7, pc}
 800063a:	bf00      	nop
 800063c:	200002bc 	.word	0x200002bc
 8000640:	20000354 	.word	0x20000354

08000644 <put_pixel>:
 *	Desenha um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 * 	FE 70 [x] [y] FD
 *	254 112 [x] [y] 253
 *	254 `p` [x] [y] 253
 */
void put_pixel(uint8_t x, uint8_t y) {
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	4603      	mov	r3, r0
 800064c:	460a      	mov	r2, r1
 800064e:	71fb      	strb	r3, [r7, #7]
 8000650:	4613      	mov	r3, r2
 8000652:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 1);
 8000654:	2101      	movs	r1, #1
 8000656:	480b      	ldr	r0, [pc, #44]	; (8000684 <put_pixel+0x40>)
 8000658:	f002 faf8 	bl	8002c4c <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x - '0', y - '0');
 800065c:	79fb      	ldrb	r3, [r7, #7]
 800065e:	b29b      	uxth	r3, r3
 8000660:	3b30      	subs	r3, #48	; 0x30
 8000662:	b299      	uxth	r1, r3
 8000664:	79bb      	ldrb	r3, [r7, #6]
 8000666:	b29b      	uxth	r3, r3
 8000668:	3b30      	subs	r3, #48	; 0x30
 800066a:	b29b      	uxth	r3, r3
 800066c:	461a      	mov	r2, r3
 800066e:	4805      	ldr	r0, [pc, #20]	; (8000684 <put_pixel+0x40>)
 8000670:	f002 fab9 	bl	8002be6 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 8000674:	4803      	ldr	r0, [pc, #12]	; (8000684 <put_pixel+0x40>)
 8000676:	f001 f8fb 	bl	8001870 <u8g2_SendBuffer>
}
 800067a:	bf00      	nop
 800067c:	3708      	adds	r7, #8
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}
 8000682:	bf00      	nop
 8000684:	200002bc 	.word	0x200002bc

08000688 <erase_pixel>:
 *	Apaga um pixel na posição (x,y). X varia de 0-121 e y varia 0-31
 *	FE 71 [x] [y] FD
 *	254 113 [x] [y] 253
 *	254 `q` [x] [y] 253
 */
void erase_pixel(uint8_t x, uint8_t y) {
 8000688:	b580      	push	{r7, lr}
 800068a:	b082      	sub	sp, #8
 800068c:	af00      	add	r7, sp, #0
 800068e:	4603      	mov	r3, r0
 8000690:	460a      	mov	r2, r1
 8000692:	71fb      	strb	r3, [r7, #7]
 8000694:	4613      	mov	r3, r2
 8000696:	71bb      	strb	r3, [r7, #6]
	u8g2_SetDrawColor(&u8g2, 0);
 8000698:	2100      	movs	r1, #0
 800069a:	480b      	ldr	r0, [pc, #44]	; (80006c8 <erase_pixel+0x40>)
 800069c:	f002 fad6 	bl	8002c4c <u8g2_SetDrawColor>
	u8g2_DrawPixel(&u8g2, x - '0', y - '0');
 80006a0:	79fb      	ldrb	r3, [r7, #7]
 80006a2:	b29b      	uxth	r3, r3
 80006a4:	3b30      	subs	r3, #48	; 0x30
 80006a6:	b299      	uxth	r1, r3
 80006a8:	79bb      	ldrb	r3, [r7, #6]
 80006aa:	b29b      	uxth	r3, r3
 80006ac:	3b30      	subs	r3, #48	; 0x30
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	461a      	mov	r2, r3
 80006b2:	4805      	ldr	r0, [pc, #20]	; (80006c8 <erase_pixel+0x40>)
 80006b4:	f002 fa97 	bl	8002be6 <u8g2_DrawPixel>
	u8g2_SendBuffer(&u8g2);
 80006b8:	4803      	ldr	r0, [pc, #12]	; (80006c8 <erase_pixel+0x40>)
 80006ba:	f001 f8d9 	bl	8001870 <u8g2_SendBuffer>
}
 80006be:	bf00      	nop
 80006c0:	3708      	adds	r7, #8
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	200002bc 	.word	0x200002bc

080006cc <lcd_soft_reset>:
 *		254 86 253
 *		254 'V' 253
 *	@retval
 */

void lcd_soft_reset(void) {
 80006cc:	b580      	push	{r7, lr}
 80006ce:	af00      	add	r7, sp, #0
	u8g2_SendF(&u8g2, "c", 0x0e2);
 80006d0:	22e2      	movs	r2, #226	; 0xe2
 80006d2:	4904      	ldr	r1, [pc, #16]	; (80006e4 <lcd_soft_reset+0x18>)
 80006d4:	4804      	ldr	r0, [pc, #16]	; (80006e8 <lcd_soft_reset+0x1c>)
 80006d6:	f002 fc2a 	bl	8002f2e <u8g2_SendF>
	disp_splash();
 80006da:	f000 f83d 	bl	8000758 <disp_splash>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	08006398 	.word	0x08006398
 80006e8:	200002bc 	.word	0x200002bc

080006ec <clear_display>:
 *   	FE 58 FD
 *		254 88 253
 *		254 'X' 253
 *	@retval  flag confirmando que o comando foi executado
 */
void clear_display(void) {
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
	text_insertion_point(0 + '0', 0 + '0');
 80006f0:	2130      	movs	r1, #48	; 0x30
 80006f2:	2030      	movs	r0, #48	; 0x30
 80006f4:	f7ff febc 	bl	8000470 <text_insertion_point>
	u8g2_ClearDisplay(&u8g2);
 80006f8:	4802      	ldr	r0, [pc, #8]	; (8000704 <clear_display+0x18>)
 80006fa:	f001 fa67 	bl	8001bcc <u8g2_ClearDisplay>
}
 80006fe:	bf00      	nop
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	200002bc 	.word	0x200002bc

08000708 <enable_backlight>:
 *  Desabilita o Backlight
 *   	FE 46 FD
 *		254 70 253
 *		254 'F' 253
 */
void enable_backlight(bool enable) {
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	71fb      	strb	r3, [r7, #7]
	//liga a backlight
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4,
 8000712:	79fb      	ldrb	r3, [r7, #7]
 8000714:	461a      	mov	r2, r3
 8000716:	2110      	movs	r1, #16
 8000718:	4803      	ldr	r0, [pc, #12]	; (8000728 <enable_backlight+0x20>)
 800071a:	f003 fcc7 	bl	80040ac <HAL_GPIO_WritePin>
			enable ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 800071e:	bf00      	nop
 8000720:	3708      	adds	r7, #8
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	40010800 	.word	0x40010800

0800072c <set_contrast>:
 * define o contraste da tela, range [[0x00]-[0x1C]] - 0 a 25
 *    	FE 68 FD
 *		254 104 253
 *		254 'h' 253
 */
void set_contrast(uint8_t contrast) {
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	4603      	mov	r3, r0
 8000734:	71fb      	strb	r3, [r7, #7]
	u8g2_SetContrast(&u8g2, (contrast - '0') * 9);
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	461a      	mov	r2, r3
 800073a:	00d2      	lsls	r2, r2, #3
 800073c:	4413      	add	r3, r2
 800073e:	b2db      	uxtb	r3, r3
 8000740:	3350      	adds	r3, #80	; 0x50
 8000742:	b2db      	uxtb	r3, r3
 8000744:	4619      	mov	r1, r3
 8000746:	4803      	ldr	r0, [pc, #12]	; (8000754 <set_contrast+0x28>)
 8000748:	f003 f88d 	bl	8003866 <u8x8_SetContrast>
}
 800074c:	bf00      	nop
 800074e:	3708      	adds	r7, #8
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	200002bc 	.word	0x200002bc

08000758 <disp_splash>:
 * Desenha a splash screen/boot-up na tela imediatamente
 *  	FE 69 FD
 *		254 106 253
 *		254 'j' 253
 */
void disp_splash(void) {
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af02      	add	r7, sp, #8

	u8g2_DrawXBM(&u8g2, ((display_w / 2) - (vc_width / 2)),
 800075e:	4b08      	ldr	r3, [pc, #32]	; (8000780 <disp_splash+0x28>)
 8000760:	9301      	str	r3, [sp, #4]
 8000762:	2318      	movs	r3, #24
 8000764:	9300      	str	r3, [sp, #0]
 8000766:	23b4      	movs	r3, #180	; 0xb4
 8000768:	2214      	movs	r2, #20
 800076a:	2106      	movs	r1, #6
 800076c:	4805      	ldr	r0, [pc, #20]	; (8000784 <disp_splash+0x2c>)
 800076e:	f000 ff36 	bl	80015de <u8g2_DrawXBM>
			((display_h / 2) - (vc_height / 2)), vc_width, vc_height, &vc_bits);
	u8g2_SendBuffer(&u8g2);
 8000772:	4804      	ldr	r0, [pc, #16]	; (8000784 <disp_splash+0x2c>)
 8000774:	f001 f87c 	bl	8001870 <u8g2_SendBuffer>

}
 8000778:	bf00      	nop
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	20000000 	.word	0x20000000
 8000784:	200002bc 	.word	0x200002bc

08000788 <str_warper>:

/** @brief write a string on screen														(Default: N/A)
 * escreve um array na tela.
 *
 */
void str_warper(txt_wrap *wrap, uint8_t *txt) {
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	6039      	str	r1, [r7, #0]
	uint8_t index = 0, aux = 1;
 8000792:	2300      	movs	r3, #0
 8000794:	73fb      	strb	r3, [r7, #15]
 8000796:	2301      	movs	r3, #1
 8000798:	73bb      	strb	r3, [r7, #14]

	for (index = 0; txt[index] != '\0'; index++)
 800079a:	2300      	movs	r3, #0
 800079c:	73fb      	strb	r3, [r7, #15]
 800079e:	e002      	b.n	80007a6 <str_warper+0x1e>
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	3301      	adds	r3, #1
 80007a4:	73fb      	strb	r3, [r7, #15]
 80007a6:	7bfb      	ldrb	r3, [r7, #15]
 80007a8:	683a      	ldr	r2, [r7, #0]
 80007aa:	4413      	add	r3, r2
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d1f6      	bne.n	80007a0 <str_warper+0x18>
		;
	index++;
 80007b2:	7bfb      	ldrb	r3, [r7, #15]
 80007b4:	3301      	adds	r3, #1
 80007b6:	73fb      	strb	r3, [r7, #15]
	wrap->wrap_times = index
			/ (u8g2_GetDisplayWidth(&u8g2) / u8g2_GetMaxCharWidth(&u8g2));
 80007b8:	7bfa      	ldrb	r2, [r7, #15]
 80007ba:	4b17      	ldr	r3, [pc, #92]	; (8000818 <str_warper+0x90>)
 80007bc:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80007c0:	4619      	mov	r1, r3
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <str_warper+0x90>)
 80007c4:	f993 307d 	ldrsb.w	r3, [r3, #125]	; 0x7d
 80007c8:	fb91 f3f3 	sdiv	r3, r1, r3
 80007cc:	fb92 f3f3 	sdiv	r3, r2, r3
	wrap->wrap_times = index
 80007d0:	b2da      	uxtb	r2, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	751a      	strb	r2, [r3, #20]
	do {
		wrap->wrap_str[aux] = &txt[aux
				* (u8g2_GetDisplayWidth(&u8g2) / u8g2_GetMaxCharWidth(&u8g2))];
 80007d6:	7bbb      	ldrb	r3, [r7, #14]
 80007d8:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <str_warper+0x90>)
 80007da:	f8b2 2044 	ldrh.w	r2, [r2, #68]	; 0x44
 80007de:	4611      	mov	r1, r2
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <str_warper+0x90>)
 80007e2:	f992 207d 	ldrsb.w	r2, [r2, #125]	; 0x7d
 80007e6:	fb91 f2f2 	sdiv	r2, r1, r2
 80007ea:	fb02 f303 	mul.w	r3, r2, r3
 80007ee:	4619      	mov	r1, r3
		wrap->wrap_str[aux] = &txt[aux
 80007f0:	7bba      	ldrb	r2, [r7, #14]
 80007f2:	683b      	ldr	r3, [r7, #0]
 80007f4:	4419      	add	r1, r3
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		aux++;
 80007fc:	7bbb      	ldrb	r3, [r7, #14]
 80007fe:	3301      	adds	r3, #1
 8000800:	73bb      	strb	r3, [r7, #14]
	} while (aux != wrap->wrap_times);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	7d1b      	ldrb	r3, [r3, #20]
 8000806:	7bba      	ldrb	r2, [r7, #14]
 8000808:	429a      	cmp	r2, r3
 800080a:	d1e4      	bne.n	80007d6 <str_warper+0x4e>
}
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	3714      	adds	r7, #20
 8000812:	46bd      	mov	sp, r7
 8000814:	bc80      	pop	{r7}
 8000816:	4770      	bx	lr
 8000818:	200002bc 	.word	0x200002bc

0800081c <lcd_print>:

void lcd_print(uint8_t *txt) {
 800081c:	b580      	push	{r7, lr}
 800081e:	b08e      	sub	sp, #56	; 0x38
 8000820:	af04      	add	r7, sp, #16
 8000822:	6078      	str	r0, [r7, #4]
	txt_wrap wrap;
	wrap.wrap_str[0] = txt;
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	60fb      	str	r3, [r7, #12]
	wrap.wrap_times = 0;
 8000828:	2300      	movs	r3, #0
 800082a:	f887 3020 	strb.w	r3, [r7, #32]
	uint8_t aux = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	if (text_invertion) {
 8000834:	4b95      	ldr	r3, [pc, #596]	; (8000a8c <lcd_print+0x270>)
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	2b00      	cmp	r3, #0
 800083a:	f000 809a 	beq.w	8000972 <lcd_print+0x156>
		if (text_wrap) {
 800083e:	4b94      	ldr	r3, [pc, #592]	; (8000a90 <lcd_print+0x274>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b00      	cmp	r3, #0
 8000844:	d072      	beq.n	800092c <lcd_print+0x110>
			str_warper(&wrap, txt);
 8000846:	f107 030c 	add.w	r3, r7, #12
 800084a:	6879      	ldr	r1, [r7, #4]
 800084c:	4618      	mov	r0, r3
 800084e:	f7ff ff9b 	bl	8000788 <str_warper>
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 8000852:	2300      	movs	r3, #0
 8000854:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8000858:	e061      	b.n	800091e <lcd_print+0x102>
				cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 800085a:	4b8e      	ldr	r3, [pc, #568]	; (8000a94 <lcd_print+0x278>)
 800085c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000860:	b2db      	uxtb	r3, r3
 8000862:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000866:	fb02 f303 	mul.w	r3, r2, r3
 800086a:	b2da      	uxtb	r2, r3
 800086c:	4b8a      	ldr	r3, [pc, #552]	; (8000a98 <lcd_print+0x27c>)
 800086e:	705a      	strb	r2, [r3, #1]
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 8000870:	4b89      	ldr	r3, [pc, #548]	; (8000a98 <lcd_print+0x27c>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	b299      	uxth	r1, r3
 8000876:	4b88      	ldr	r3, [pc, #544]	; (8000a98 <lcd_print+0x27c>)
 8000878:	785b      	ldrb	r3, [r3, #1]
 800087a:	b29a      	uxth	r2, r3
 800087c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
						0, 0, 0, wrap.wrap_str[aux]);
 8000880:	009b      	lsls	r3, r3, #2
 8000882:	3328      	adds	r3, #40	; 0x28
 8000884:	443b      	add	r3, r7
 8000886:	f853 3c1c 	ldr.w	r3, [r3, #-28]
				u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV,
 800088a:	9303      	str	r3, [sp, #12]
 800088c:	2300      	movs	r3, #0
 800088e:	9302      	str	r3, [sp, #8]
 8000890:	2300      	movs	r3, #0
 8000892:	9301      	str	r3, [sp, #4]
 8000894:	2300      	movs	r3, #0
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	2320      	movs	r3, #32
 800089a:	487e      	ldr	r0, [pc, #504]	; (8000a94 <lcd_print+0x278>)
 800089c:	f001 f942 	bl	8001b24 <u8g2_DrawButtonUTF8>
				u8g2_SendBuffer(&u8g2);
 80008a0:	487c      	ldr	r0, [pc, #496]	; (8000a94 <lcd_print+0x278>)
 80008a2:	f000 ffe5 	bl	8001870 <u8g2_SendBuffer>

				if (u8g2_GetStrWidth(&u8g2,
						wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 80008a6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008aa:	3b01      	subs	r3, #1
 80008ac:	009b      	lsls	r3, r3, #2
 80008ae:	3328      	adds	r3, #40	; 0x28
 80008b0:	443b      	add	r3, r7
 80008b2:	f853 3c1c 	ldr.w	r3, [r3, #-28]
				if (u8g2_GetStrWidth(&u8g2,
 80008b6:	4619      	mov	r1, r3
 80008b8:	4876      	ldr	r0, [pc, #472]	; (8000a94 <lcd_print+0x278>)
 80008ba:	f002 f841 	bl	8002940 <u8g2_GetStrWidth>
 80008be:	4603      	mov	r3, r0
 80008c0:	461a      	mov	r2, r3
						wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 80008c2:	4b74      	ldr	r3, [pc, #464]	; (8000a94 <lcd_print+0x278>)
 80008c4:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
				if (u8g2_GetStrWidth(&u8g2,
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d90e      	bls.n	80008ea <lcd_print+0xce>
					cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 80008cc:	4b71      	ldr	r3, [pc, #452]	; (8000a94 <lcd_print+0x278>)
 80008ce:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80008d8:	fb02 f303 	mul.w	r3, r2, r3
 80008dc:	b2da      	uxtb	r2, r3
 80008de:	4b6e      	ldr	r3, [pc, #440]	; (8000a98 <lcd_print+0x27c>)
 80008e0:	705a      	strb	r2, [r3, #1]
					cursor[0] = 0;
 80008e2:	4b6d      	ldr	r3, [pc, #436]	; (8000a98 <lcd_print+0x27c>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
 80008e8:	e014      	b.n	8000914 <lcd_print+0xf8>
				} else {
					cursor[0] += u8g2_GetStrWidth(&u8g2,
							wrap.wrap_str[aux - 1]);
 80008ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80008ee:	3b01      	subs	r3, #1
 80008f0:	009b      	lsls	r3, r3, #2
 80008f2:	3328      	adds	r3, #40	; 0x28
 80008f4:	443b      	add	r3, r7
 80008f6:	f853 3c1c 	ldr.w	r3, [r3, #-28]
					cursor[0] += u8g2_GetStrWidth(&u8g2,
 80008fa:	4619      	mov	r1, r3
 80008fc:	4865      	ldr	r0, [pc, #404]	; (8000a94 <lcd_print+0x278>)
 80008fe:	f002 f81f 	bl	8002940 <u8g2_GetStrWidth>
 8000902:	4603      	mov	r3, r0
 8000904:	4619      	mov	r1, r3
 8000906:	4b64      	ldr	r3, [pc, #400]	; (8000a98 <lcd_print+0x27c>)
 8000908:	781a      	ldrb	r2, [r3, #0]
 800090a:	b2cb      	uxtb	r3, r1
 800090c:	4413      	add	r3, r2
 800090e:	b2da      	uxtb	r2, r3
 8000910:	4b61      	ldr	r3, [pc, #388]	; (8000a98 <lcd_print+0x27c>)
 8000912:	701a      	strb	r2, [r3, #0]
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 8000914:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000918:	3301      	adds	r3, #1
 800091a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800091e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000922:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000926:	429a      	cmp	r2, r3
 8000928:	d397      	bcc.n	800085a <lcd_print+0x3e>

			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
		}
	}

}
 800092a:	e0ab      	b.n	8000a84 <lcd_print+0x268>
			u8g2_DrawButtonUTF8(&u8g2, cursor[0], cursor[1], U8G2_BTN_INV, 0, 0,
 800092c:	4b5a      	ldr	r3, [pc, #360]	; (8000a98 <lcd_print+0x27c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	b299      	uxth	r1, r3
 8000932:	4b59      	ldr	r3, [pc, #356]	; (8000a98 <lcd_print+0x27c>)
 8000934:	785b      	ldrb	r3, [r3, #1]
 8000936:	b29a      	uxth	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	9303      	str	r3, [sp, #12]
 800093c:	2300      	movs	r3, #0
 800093e:	9302      	str	r3, [sp, #8]
 8000940:	2300      	movs	r3, #0
 8000942:	9301      	str	r3, [sp, #4]
 8000944:	2300      	movs	r3, #0
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2320      	movs	r3, #32
 800094a:	4852      	ldr	r0, [pc, #328]	; (8000a94 <lcd_print+0x278>)
 800094c:	f001 f8ea 	bl	8001b24 <u8g2_DrawButtonUTF8>
			u8g2_SendBuffer(&u8g2);
 8000950:	4850      	ldr	r0, [pc, #320]	; (8000a94 <lcd_print+0x278>)
 8000952:	f000 ff8d 	bl	8001870 <u8g2_SendBuffer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000956:	6879      	ldr	r1, [r7, #4]
 8000958:	484e      	ldr	r0, [pc, #312]	; (8000a94 <lcd_print+0x278>)
 800095a:	f001 fff1 	bl	8002940 <u8g2_GetStrWidth>
 800095e:	4603      	mov	r3, r0
 8000960:	4619      	mov	r1, r3
 8000962:	4b4d      	ldr	r3, [pc, #308]	; (8000a98 <lcd_print+0x27c>)
 8000964:	781a      	ldrb	r2, [r3, #0]
 8000966:	b2cb      	uxtb	r3, r1
 8000968:	4413      	add	r3, r2
 800096a:	b2da      	uxtb	r2, r3
 800096c:	4b4a      	ldr	r3, [pc, #296]	; (8000a98 <lcd_print+0x27c>)
 800096e:	701a      	strb	r2, [r3, #0]
}
 8000970:	e088      	b.n	8000a84 <lcd_print+0x268>
		if (text_wrap) {
 8000972:	4b47      	ldr	r3, [pc, #284]	; (8000a90 <lcd_print+0x274>)
 8000974:	781b      	ldrb	r3, [r3, #0]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d06a      	beq.n	8000a50 <lcd_print+0x234>
			str_warper(&wrap, txt);
 800097a:	f107 030c 	add.w	r3, r7, #12
 800097e:	6879      	ldr	r1, [r7, #4]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff ff01 	bl	8000788 <str_warper>
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 8000986:	2300      	movs	r3, #0
 8000988:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800098c:	e022      	b.n	80009d4 <lcd_print+0x1b8>
				cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 800098e:	4b41      	ldr	r3, [pc, #260]	; (8000a94 <lcd_print+0x278>)
 8000990:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000994:	b2db      	uxtb	r3, r3
 8000996:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800099a:	fb02 f303 	mul.w	r3, r2, r3
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	4b3d      	ldr	r3, [pc, #244]	; (8000a98 <lcd_print+0x27c>)
 80009a2:	705a      	strb	r2, [r3, #1]
				u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], wrap.wrap_str[aux]);
 80009a4:	4b3c      	ldr	r3, [pc, #240]	; (8000a98 <lcd_print+0x27c>)
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	b299      	uxth	r1, r3
 80009aa:	4b3b      	ldr	r3, [pc, #236]	; (8000a98 <lcd_print+0x27c>)
 80009ac:	785b      	ldrb	r3, [r3, #1]
 80009ae:	b29a      	uxth	r2, r3
 80009b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	3328      	adds	r3, #40	; 0x28
 80009b8:	443b      	add	r3, r7
 80009ba:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 80009be:	4835      	ldr	r0, [pc, #212]	; (8000a94 <lcd_print+0x278>)
 80009c0:	f001 fe82 	bl	80026c8 <u8g2_DrawUTF8>
				u8g2_SendBuffer(&u8g2);
 80009c4:	4833      	ldr	r0, [pc, #204]	; (8000a94 <lcd_print+0x278>)
 80009c6:	f000 ff53 	bl	8001870 <u8g2_SendBuffer>
			for (aux = 0; aux + 1 <= wrap.wrap_times; aux++) {
 80009ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009ce:	3301      	adds	r3, #1
 80009d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80009d4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80009d8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80009dc:	429a      	cmp	r2, r3
 80009de:	d3d6      	bcc.n	800098e <lcd_print+0x172>
					wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 80009e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80009e4:	3b01      	subs	r3, #1
 80009e6:	009b      	lsls	r3, r3, #2
 80009e8:	3328      	adds	r3, #40	; 0x28
 80009ea:	443b      	add	r3, r7
 80009ec:	f853 3c1c 	ldr.w	r3, [r3, #-28]
			if (u8g2_GetStrWidth(&u8g2,
 80009f0:	4619      	mov	r1, r3
 80009f2:	4828      	ldr	r0, [pc, #160]	; (8000a94 <lcd_print+0x278>)
 80009f4:	f001 ffa4 	bl	8002940 <u8g2_GetStrWidth>
 80009f8:	4603      	mov	r3, r0
 80009fa:	461a      	mov	r2, r3
					wrap.wrap_str[aux - 1]) > u8g2_GetDisplayWidth(&u8g2)) {
 80009fc:	4b25      	ldr	r3, [pc, #148]	; (8000a94 <lcd_print+0x278>)
 80009fe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
			if (u8g2_GetStrWidth(&u8g2,
 8000a02:	429a      	cmp	r2, r3
 8000a04:	d90e      	bls.n	8000a24 <lcd_print+0x208>
				cursor[1] = (aux * u8g2_GetMaxCharHeight(&u8g2));
 8000a06:	4b23      	ldr	r3, [pc, #140]	; (8000a94 <lcd_print+0x278>)
 8000a08:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8000a12:	fb02 f303 	mul.w	r3, r2, r3
 8000a16:	b2da      	uxtb	r2, r3
 8000a18:	4b1f      	ldr	r3, [pc, #124]	; (8000a98 <lcd_print+0x27c>)
 8000a1a:	705a      	strb	r2, [r3, #1]
				cursor[0] = 0;
 8000a1c:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <lcd_print+0x27c>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	701a      	strb	r2, [r3, #0]
}
 8000a22:	e02f      	b.n	8000a84 <lcd_print+0x268>
				cursor[0] += u8g2_GetStrWidth(&u8g2, wrap.wrap_str[aux - 1]);
 8000a24:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000a28:	3b01      	subs	r3, #1
 8000a2a:	009b      	lsls	r3, r3, #2
 8000a2c:	3328      	adds	r3, #40	; 0x28
 8000a2e:	443b      	add	r3, r7
 8000a30:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8000a34:	4619      	mov	r1, r3
 8000a36:	4817      	ldr	r0, [pc, #92]	; (8000a94 <lcd_print+0x278>)
 8000a38:	f001 ff82 	bl	8002940 <u8g2_GetStrWidth>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4b15      	ldr	r3, [pc, #84]	; (8000a98 <lcd_print+0x27c>)
 8000a42:	781a      	ldrb	r2, [r3, #0]
 8000a44:	b2cb      	uxtb	r3, r1
 8000a46:	4413      	add	r3, r2
 8000a48:	b2da      	uxtb	r2, r3
 8000a4a:	4b13      	ldr	r3, [pc, #76]	; (8000a98 <lcd_print+0x27c>)
 8000a4c:	701a      	strb	r2, [r3, #0]
}
 8000a4e:	e019      	b.n	8000a84 <lcd_print+0x268>
			u8g2_DrawUTF8(&u8g2, cursor[0], cursor[1], txt);
 8000a50:	4b11      	ldr	r3, [pc, #68]	; (8000a98 <lcd_print+0x27c>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b299      	uxth	r1, r3
 8000a56:	4b10      	ldr	r3, [pc, #64]	; (8000a98 <lcd_print+0x27c>)
 8000a58:	785b      	ldrb	r3, [r3, #1]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <lcd_print+0x278>)
 8000a60:	f001 fe32 	bl	80026c8 <u8g2_DrawUTF8>
			u8g2_SendBuffer(&u8g2);
 8000a64:	480b      	ldr	r0, [pc, #44]	; (8000a94 <lcd_print+0x278>)
 8000a66:	f000 ff03 	bl	8001870 <u8g2_SendBuffer>
			cursor[0] += u8g2_GetStrWidth(&u8g2, txt);
 8000a6a:	6879      	ldr	r1, [r7, #4]
 8000a6c:	4809      	ldr	r0, [pc, #36]	; (8000a94 <lcd_print+0x278>)
 8000a6e:	f001 ff67 	bl	8002940 <u8g2_GetStrWidth>
 8000a72:	4603      	mov	r3, r0
 8000a74:	4619      	mov	r1, r3
 8000a76:	4b08      	ldr	r3, [pc, #32]	; (8000a98 <lcd_print+0x27c>)
 8000a78:	781a      	ldrb	r2, [r3, #0]
 8000a7a:	b2cb      	uxtb	r3, r1
 8000a7c:	4413      	add	r3, r2
 8000a7e:	b2da      	uxtb	r2, r3
 8000a80:	4b05      	ldr	r3, [pc, #20]	; (8000a98 <lcd_print+0x27c>)
 8000a82:	701a      	strb	r2, [r3, #0]
}
 8000a84:	bf00      	nop
 8000a86:	3728      	adds	r7, #40	; 0x28
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}
 8000a8c:	20000350 	.word	0x20000350
 8000a90:	20000351 	.word	0x20000351
 8000a94:	200002bc 	.word	0x200002bc
 8000a98:	20000354 	.word	0x20000354

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa0:	f002 ff96 	bl	80039d0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa4:	f000 f80c 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa8:	f000 f8fe 	bl	8000ca8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000aac:	f000 f84e 	bl	8000b4c <MX_SPI1_Init>
  MX_USART1_UART_Init();
 8000ab0:	f000 f8d0 	bl	8000c54 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8000ab4:	f000 f880 	bl	8000bb8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  start();
 8000ab8:	f7ff fc06 	bl	80002c8 <start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  __WFI();
 8000abc:	bf30      	wfi
 8000abe:	e7fd      	b.n	8000abc <main+0x20>

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b090      	sub	sp, #64	; 0x40
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0318 	add.w	r3, r7, #24
 8000aca:	2228      	movs	r2, #40	; 0x28
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f004 ffaa 	bl	8005a28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	601a      	str	r2, [r3, #0]
 8000ada:	605a      	str	r2, [r3, #4]
 8000adc:	609a      	str	r2, [r3, #8]
 8000ade:	60da      	str	r2, [r3, #12]
 8000ae0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ae6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000aea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000aec:	2300      	movs	r3, #0
 8000aee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af0:	2301      	movs	r3, #1
 8000af2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000af4:	2302      	movs	r3, #2
 8000af6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000af8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000afc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000afe:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000b02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b04:	f107 0318 	add.w	r3, r7, #24
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f003 fb19 	bl	8004140 <HAL_RCC_OscConfig>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000b14:	f000 f964 	bl	8000de0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b18:	230f      	movs	r3, #15
 8000b1a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b20:	2300      	movs	r3, #0
 8000b22:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b2e:	1d3b      	adds	r3, r7, #4
 8000b30:	2102      	movs	r1, #2
 8000b32:	4618      	mov	r0, r3
 8000b34:	f003 fd86 	bl	8004644 <HAL_RCC_ClockConfig>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d001      	beq.n	8000b42 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000b3e:	f000 f94f 	bl	8000de0 <Error_Handler>
  }
}
 8000b42:	bf00      	nop
 8000b44:	3740      	adds	r7, #64	; 0x40
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
	...

08000b4c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b52:	4a18      	ldr	r2, [pc, #96]	; (8000bb4 <MX_SPI1_Init+0x68>)
 8000b54:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b56:	4b16      	ldr	r3, [pc, #88]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b58:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b5c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b5e:	4b14      	ldr	r3, [pc, #80]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b64:	4b12      	ldr	r3, [pc, #72]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b6a:	4b11      	ldr	r3, [pc, #68]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b70:	4b0f      	ldr	r3, [pc, #60]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b76:	4b0e      	ldr	r3, [pc, #56]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b78:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b7c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000b7e:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b80:	2208      	movs	r2, #8
 8000b82:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b84:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b8a:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b98:	220a      	movs	r2, #10
 8000b9a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b9c:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <MX_SPI1_Init+0x64>)
 8000b9e:	f003 fee9 	bl	8004974 <HAL_SPI_Init>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b00      	cmp	r3, #0
 8000ba6:	d001      	beq.n	8000bac <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ba8:	f000 f91a 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	20000358 	.word	0x20000358
 8000bb4:	40013000 	.word	0x40013000

08000bb8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bbe:	f107 0308 	add.w	r3, r7, #8
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	601a      	str	r2, [r3, #0]
 8000bc6:	605a      	str	r2, [r3, #4]
 8000bc8:	609a      	str	r2, [r3, #8]
 8000bca:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bcc:	463b      	mov	r3, r7
 8000bce:	2200      	movs	r2, #0
 8000bd0:	601a      	str	r2, [r3, #0]
 8000bd2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000bd4:	4b1e      	ldr	r3, [pc, #120]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000bd6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000bda:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 685;
 8000bdc:	4b1c      	ldr	r3, [pc, #112]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000bde:	f240 22ad 	movw	r2, #685	; 0x2ad
 8000be2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 52499;
 8000bea:	4b19      	ldr	r3, [pc, #100]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000bec:	f64c 5213 	movw	r2, #52499	; 0xcd13
 8000bf0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bf8:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000bfe:	4814      	ldr	r0, [pc, #80]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000c00:	f004 f91e 	bl	8004e40 <HAL_TIM_Base_Init>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8000c0a:	f000 f8e9 	bl	8000de0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c12:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c14:	f107 0308 	add.w	r3, r7, #8
 8000c18:	4619      	mov	r1, r3
 8000c1a:	480d      	ldr	r0, [pc, #52]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000c1c:	f004 fae2 	bl	80051e4 <HAL_TIM_ConfigClockSource>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8000c26:	f000 f8db 	bl	8000de0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c32:	463b      	mov	r3, r7
 8000c34:	4619      	mov	r1, r3
 8000c36:	4806      	ldr	r0, [pc, #24]	; (8000c50 <MX_TIM2_Init+0x98>)
 8000c38:	f004 fcaa 	bl	8005590 <HAL_TIMEx_MasterConfigSynchronization>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000c42:	f000 f8cd 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c46:	bf00      	nop
 8000c48:	3718      	adds	r7, #24
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	200003b0 	.word	0x200003b0

08000c54 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c58:	4b11      	ldr	r3, [pc, #68]	; (8000ca0 <MX_USART1_UART_Init+0x4c>)
 8000c5a:	4a12      	ldr	r2, [pc, #72]	; (8000ca4 <MX_USART1_UART_Init+0x50>)
 8000c5c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 19500;
 8000c5e:	4b10      	ldr	r3, [pc, #64]	; (8000ca0 <MX_USART1_UART_Init+0x4c>)
 8000c60:	f644 422c 	movw	r2, #19500	; 0x4c2c
 8000c64:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c66:	4b0e      	ldr	r3, [pc, #56]	; (8000ca0 <MX_USART1_UART_Init+0x4c>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c6c:	4b0c      	ldr	r3, [pc, #48]	; (8000ca0 <MX_USART1_UART_Init+0x4c>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c72:	4b0b      	ldr	r3, [pc, #44]	; (8000ca0 <MX_USART1_UART_Init+0x4c>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c78:	4b09      	ldr	r3, [pc, #36]	; (8000ca0 <MX_USART1_UART_Init+0x4c>)
 8000c7a:	220c      	movs	r2, #12
 8000c7c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c7e:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <MX_USART1_UART_Init+0x4c>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c84:	4b06      	ldr	r3, [pc, #24]	; (8000ca0 <MX_USART1_UART_Init+0x4c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c8a:	4805      	ldr	r0, [pc, #20]	; (8000ca0 <MX_USART1_UART_Init+0x4c>)
 8000c8c:	f004 fcea 	bl	8005664 <HAL_UART_Init>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c96:	f000 f8a3 	bl	8000de0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	200003f8 	.word	0x200003f8
 8000ca4:	40013800 	.word	0x40013800

08000ca8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cae:	f107 0310 	add.w	r3, r7, #16
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbc:	4b43      	ldr	r3, [pc, #268]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cbe:	699b      	ldr	r3, [r3, #24]
 8000cc0:	4a42      	ldr	r2, [pc, #264]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cc2:	f043 0310 	orr.w	r3, r3, #16
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b40      	ldr	r3, [pc, #256]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f003 0310 	and.w	r3, r3, #16
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000cd4:	4b3d      	ldr	r3, [pc, #244]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a3c      	ldr	r2, [pc, #240]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cda:	f043 0320 	orr.w	r3, r3, #32
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b3a      	ldr	r3, [pc, #232]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0320 	and.w	r3, r3, #32
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cec:	4b37      	ldr	r3, [pc, #220]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	4a36      	ldr	r2, [pc, #216]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cf2:	f043 0304 	orr.w	r3, r3, #4
 8000cf6:	6193      	str	r3, [r2, #24]
 8000cf8:	4b34      	ldr	r3, [pc, #208]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000cfa:	699b      	ldr	r3, [r3, #24]
 8000cfc:	f003 0304 	and.w	r3, r3, #4
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d04:	4b31      	ldr	r3, [pc, #196]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000d06:	699b      	ldr	r3, [r3, #24]
 8000d08:	4a30      	ldr	r2, [pc, #192]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000d0a:	f043 0308 	orr.w	r3, r3, #8
 8000d0e:	6193      	str	r3, [r2, #24]
 8000d10:	4b2e      	ldr	r3, [pc, #184]	; (8000dcc <MX_GPIO_Init+0x124>)
 8000d12:	699b      	ldr	r3, [r3, #24]
 8000d14:	f003 0308 	and.w	r3, r3, #8
 8000d18:	603b      	str	r3, [r7, #0]
 8000d1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d22:	482b      	ldr	r0, [pc, #172]	; (8000dd0 <MX_GPIO_Init+0x128>)
 8000d24:	f003 f9c2 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000d28:	2201      	movs	r2, #1
 8000d2a:	2110      	movs	r1, #16
 8000d2c:	4829      	ldr	r0, [pc, #164]	; (8000dd4 <MX_GPIO_Init+0x12c>)
 8000d2e:	f003 f9bd 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	2140      	movs	r1, #64	; 0x40
 8000d36:	4827      	ldr	r0, [pc, #156]	; (8000dd4 <MX_GPIO_Init+0x12c>)
 8000d38:	f003 f9b8 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1, GPIO_PIN_RESET);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	2103      	movs	r1, #3
 8000d40:	4825      	ldr	r0, [pc, #148]	; (8000dd8 <MX_GPIO_Init+0x130>)
 8000d42:	f003 f9b3 	bl	80040ac <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000d46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000d4a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d50:	2300      	movs	r3, #0
 8000d52:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d54:	2302      	movs	r3, #2
 8000d56:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d58:	f107 0310 	add.w	r3, r7, #16
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	481c      	ldr	r0, [pc, #112]	; (8000dd0 <MX_GPIO_Init+0x128>)
 8000d60:	f003 f828 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8000d64:	2350      	movs	r3, #80	; 0x50
 8000d66:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d68:	2301      	movs	r3, #1
 8000d6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d70:	2302      	movs	r3, #2
 8000d72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d74:	f107 0310 	add.w	r3, r7, #16
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4816      	ldr	r0, [pc, #88]	; (8000dd4 <MX_GPIO_Init+0x12c>)
 8000d7c:	f003 f81a 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000d80:	2303      	movs	r3, #3
 8000d82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d84:	2301      	movs	r3, #1
 8000d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	4619      	mov	r1, r3
 8000d96:	4810      	ldr	r0, [pc, #64]	; (8000dd8 <MX_GPIO_Init+0x130>)
 8000d98:	f003 f80c 	bl	8003db4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000d9c:	2310      	movs	r3, #16
 8000d9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000da0:	4b0e      	ldr	r3, [pc, #56]	; (8000ddc <MX_GPIO_Init+0x134>)
 8000da2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000da4:	2301      	movs	r3, #1
 8000da6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da8:	f107 0310 	add.w	r3, r7, #16
 8000dac:	4619      	mov	r1, r3
 8000dae:	480a      	ldr	r0, [pc, #40]	; (8000dd8 <MX_GPIO_Init+0x130>)
 8000db0:	f003 f800 	bl	8003db4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000db4:	2200      	movs	r2, #0
 8000db6:	2100      	movs	r1, #0
 8000db8:	200a      	movs	r0, #10
 8000dba:	f002 ffa8 	bl	8003d0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000dbe:	200a      	movs	r0, #10
 8000dc0:	f002 ffc1 	bl	8003d46 <HAL_NVIC_EnableIRQ>

}
 8000dc4:	bf00      	nop
 8000dc6:	3720      	adds	r7, #32
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	40011000 	.word	0x40011000
 8000dd4:	40010800 	.word	0x40010800
 8000dd8:	40010c00 	.word	0x40010c00
 8000ddc:	10210000 	.word	0x10210000

08000de0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000de4:	b672      	cpsid	i
}
 8000de6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000de8:	e7fe      	b.n	8000de8 <Error_Handler+0x8>
	...

08000dec <monitor_send_string>:
uint8_t ans[ANS_BUF_SIZE];
queue * Queue;
uint32_t size;
bool new_cmd;

void monitor_send_string(uint8_t *data) {
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart1, (uint8_t*) data, strlen(data), 100);
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f7ff f9a9 	bl	800014c <strlen>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	b29a      	uxth	r2, r3
 8000dfe:	2364      	movs	r3, #100	; 0x64
 8000e00:	6879      	ldr	r1, [r7, #4]
 8000e02:	4803      	ldr	r0, [pc, #12]	; (8000e10 <monitor_send_string+0x24>)
 8000e04:	f004 fc7b 	bl	80056fe <HAL_UART_Transmit>

}
 8000e08:	bf00      	nop
 8000e0a:	3708      	adds	r7, #8
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200003f8 	.word	0x200003f8

08000e14 <monitor_check_cmd>:

void monitor_check_cmd(char *cmd, uint32_t size) {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b084      	sub	sp, #16
 8000e18:	af02      	add	r7, sp, #8
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
	if (strncmp(cmd, "help", 4) == 0) {
 8000e1e:	2204      	movs	r2, #4
 8000e20:	498e      	ldr	r1, [pc, #568]	; (800105c <monitor_check_cmd+0x248>)
 8000e22:	6878      	ldr	r0, [r7, #4]
 8000e24:	f004 fe3c 	bl	8005aa0 <strncmp>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d108      	bne.n	8000e40 <monitor_check_cmd+0x2c>

		snprintf((char*) ans, CMD_BUF_SIZE,
 8000e2e:	4a8c      	ldr	r2, [pc, #560]	; (8001060 <monitor_check_cmd+0x24c>)
 8000e30:	2164      	movs	r1, #100	; 0x64
 8000e32:	488c      	ldr	r0, [pc, #560]	; (8001064 <monitor_check_cmd+0x250>)
 8000e34:	f004 fe00 	bl	8005a38 <sniprintf>
				"aqui eu deveria imprimir toda a tabela de comandos\r\n");
		monitor_send_string(ans);
 8000e38:	488a      	ldr	r0, [pc, #552]	; (8001064 <monitor_check_cmd+0x250>)
 8000e3a:	f7ff ffd7 	bl	8000dec <monitor_send_string>
	}
	//se não era comando, tenta escrever na tela
	else {
		lcd_print(cmd);
	}
}
 8000e3e:	e109      	b.n	8001054 <monitor_check_cmd+0x240>
	else if (cmd[0] == 254) {
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2bfe      	cmp	r3, #254	; 0xfe
 8000e46:	f040 8102 	bne.w	800104e <monitor_check_cmd+0x23a>
		if (cmd[1] == LCD_FIRMWARE_NUMBER) {
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3301      	adds	r3, #1
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b31      	cmp	r3, #49	; 0x31
 8000e52:	d109      	bne.n	8000e68 <monitor_check_cmd+0x54>
			snprintf((char*) ans, CMD_BUF_SIZE, "Firmware Version: %s\r\n",
 8000e54:	4b84      	ldr	r3, [pc, #528]	; (8001068 <monitor_check_cmd+0x254>)
 8000e56:	4a85      	ldr	r2, [pc, #532]	; (800106c <monitor_check_cmd+0x258>)
 8000e58:	2164      	movs	r1, #100	; 0x64
 8000e5a:	4882      	ldr	r0, [pc, #520]	; (8001064 <monitor_check_cmd+0x250>)
 8000e5c:	f004 fdec 	bl	8005a38 <sniprintf>
			monitor_send_string(ans);
 8000e60:	4880      	ldr	r0, [pc, #512]	; (8001064 <monitor_check_cmd+0x250>)
 8000e62:	f7ff ffc3 	bl	8000dec <monitor_send_string>
}
 8000e66:	e0f5      	b.n	8001054 <monitor_check_cmd+0x240>
		} else if (cmd[1] == LCD_MODEL_NUMBER) {
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3301      	adds	r3, #1
 8000e6c:	781b      	ldrb	r3, [r3, #0]
 8000e6e:	2b30      	cmp	r3, #48	; 0x30
 8000e70:	d109      	bne.n	8000e86 <monitor_check_cmd+0x72>
			snprintf((char*) ans, CMD_BUF_SIZE, "Model Version: %s\r\n",
 8000e72:	4b7d      	ldr	r3, [pc, #500]	; (8001068 <monitor_check_cmd+0x254>)
 8000e74:	4a7e      	ldr	r2, [pc, #504]	; (8001070 <monitor_check_cmd+0x25c>)
 8000e76:	2164      	movs	r1, #100	; 0x64
 8000e78:	487a      	ldr	r0, [pc, #488]	; (8001064 <monitor_check_cmd+0x250>)
 8000e7a:	f004 fddd 	bl	8005a38 <sniprintf>
			monitor_send_string(ans);
 8000e7e:	4879      	ldr	r0, [pc, #484]	; (8001064 <monitor_check_cmd+0x250>)
 8000e80:	f7ff ffb4 	bl	8000dec <monitor_send_string>
}
 8000e84:	e0e6      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_SOFT_RESET) {
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	3301      	adds	r3, #1
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b56      	cmp	r3, #86	; 0x56
 8000e8e:	d102      	bne.n	8000e96 <monitor_check_cmd+0x82>
			lcd_soft_reset();
 8000e90:	f7ff fc1c 	bl	80006cc <lcd_soft_reset>
}
 8000e94:	e0de      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_BACKLIGHT_ON) {
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	3301      	adds	r3, #1
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b42      	cmp	r3, #66	; 0x42
 8000e9e:	d103      	bne.n	8000ea8 <monitor_check_cmd+0x94>
			enable_backlight(true);
 8000ea0:	2001      	movs	r0, #1
 8000ea2:	f7ff fc31 	bl	8000708 <enable_backlight>
}
 8000ea6:	e0d5      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_BACKLIGHT_OFF) {
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	781b      	ldrb	r3, [r3, #0]
 8000eae:	2b46      	cmp	r3, #70	; 0x46
 8000eb0:	d103      	bne.n	8000eba <monitor_check_cmd+0xa6>
			enable_backlight(false);
 8000eb2:	2000      	movs	r0, #0
 8000eb4:	f7ff fc28 	bl	8000708 <enable_backlight>
}
 8000eb8:	e0cc      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_INVERSE_TEXT_ON) {
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	3301      	adds	r3, #1
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	2b66      	cmp	r3, #102	; 0x66
 8000ec2:	d103      	bne.n	8000ecc <monitor_check_cmd+0xb8>
			inverse_text(true);
 8000ec4:	2001      	movs	r0, #1
 8000ec6:	f7ff faed 	bl	80004a4 <inverse_text>
}
 8000eca:	e0c3      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_INVERSE_TEXT_OFF) {
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3301      	adds	r3, #1
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	2b67      	cmp	r3, #103	; 0x67
 8000ed4:	d103      	bne.n	8000ede <monitor_check_cmd+0xca>
			inverse_text(false);
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	f7ff fae4 	bl	80004a4 <inverse_text>
}
 8000edc:	e0ba      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_CLEAR) {
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	3301      	adds	r3, #1
 8000ee2:	781b      	ldrb	r3, [r3, #0]
 8000ee4:	2b58      	cmp	r3, #88	; 0x58
 8000ee6:	d102      	bne.n	8000eee <monitor_check_cmd+0xda>
			clear_display();
 8000ee8:	f7ff fc00 	bl	80006ec <clear_display>
}
 8000eec:	e0b2      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_PUT_PIXEL) {
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	3301      	adds	r3, #1
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b70      	cmp	r3, #112	; 0x70
 8000ef6:	d10a      	bne.n	8000f0e <monitor_check_cmd+0xfa>
			put_pixel(cmd[3], cmd[2]);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3303      	adds	r3, #3
 8000efc:	781a      	ldrb	r2, [r3, #0]
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	3302      	adds	r3, #2
 8000f02:	781b      	ldrb	r3, [r3, #0]
 8000f04:	4619      	mov	r1, r3
 8000f06:	4610      	mov	r0, r2
 8000f08:	f7ff fb9c 	bl	8000644 <put_pixel>
}
 8000f0c:	e0a2      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_CLEAR_PIXEL) {
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	3301      	adds	r3, #1
 8000f12:	781b      	ldrb	r3, [r3, #0]
 8000f14:	2b71      	cmp	r3, #113	; 0x71
 8000f16:	d10a      	bne.n	8000f2e <monitor_check_cmd+0x11a>
			erase_pixel(cmd[3], cmd[2]);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	3303      	adds	r3, #3
 8000f1c:	781a      	ldrb	r2, [r3, #0]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	3302      	adds	r3, #2
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4610      	mov	r0, r2
 8000f28:	f7ff fbae 	bl	8000688 <erase_pixel>
}
 8000f2c:	e092      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_WRAP_ENABLE) {
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	3301      	adds	r3, #1
 8000f32:	781b      	ldrb	r3, [r3, #0]
 8000f34:	2b43      	cmp	r3, #67	; 0x43
 8000f36:	d103      	bne.n	8000f40 <monitor_check_cmd+0x12c>
				auto_line_wrap(true);
 8000f38:	2001      	movs	r0, #1
 8000f3a:	f7ff fa89 	bl	8000450 <auto_line_wrap>
}
 8000f3e:	e089      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_WRAP_DISABLE) {
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	3301      	adds	r3, #1
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	2b44      	cmp	r3, #68	; 0x44
 8000f48:	d103      	bne.n	8000f52 <monitor_check_cmd+0x13e>
				auto_line_wrap(false);
 8000f4a:	2000      	movs	r0, #0
 8000f4c:	f7ff fa80 	bl	8000450 <auto_line_wrap>
}
 8000f50:	e080      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_SET_INSERT) {
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	3301      	adds	r3, #1
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b47      	cmp	r3, #71	; 0x47
 8000f5a:	d10a      	bne.n	8000f72 <monitor_check_cmd+0x15e>
			text_insertion_point(cmd[2], cmd[3]);
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	3302      	adds	r3, #2
 8000f60:	781a      	ldrb	r2, [r3, #0]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	3303      	adds	r3, #3
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4610      	mov	r0, r2
 8000f6c:	f7ff fa80 	bl	8000470 <text_insertion_point>
}
 8000f70:	e070      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_HOME_INSERT) {
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	3301      	adds	r3, #1
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	2b48      	cmp	r3, #72	; 0x48
 8000f7a:	d104      	bne.n	8000f86 <monitor_check_cmd+0x172>
			text_insertion_point(0, 0);
 8000f7c:	2100      	movs	r1, #0
 8000f7e:	2000      	movs	r0, #0
 8000f80:	f7ff fa76 	bl	8000470 <text_insertion_point>
}
 8000f84:	e066      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_READ_GPI) {
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	3301      	adds	r3, #1
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	2b65      	cmp	r3, #101	; 0x65
 8000f8e:	d114      	bne.n	8000fba <monitor_check_cmd+0x1a6>
			if(cmd[2] == '0'){
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	3302      	adds	r3, #2
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	2b30      	cmp	r3, #48	; 0x30
 8000f98:	d15c      	bne.n	8001054 <monitor_check_cmd+0x240>
				snprintf((char*) ans, CMD_BUF_SIZE, "%d.%d V\r\n",ddp[0],ddp[1]);
 8000f9a:	4b36      	ldr	r3, [pc, #216]	; (8001074 <monitor_check_cmd+0x260>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	4b34      	ldr	r3, [pc, #208]	; (8001074 <monitor_check_cmd+0x260>)
 8000fa2:	785b      	ldrb	r3, [r3, #1]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	4613      	mov	r3, r2
 8000fa8:	4a33      	ldr	r2, [pc, #204]	; (8001078 <monitor_check_cmd+0x264>)
 8000faa:	2164      	movs	r1, #100	; 0x64
 8000fac:	482d      	ldr	r0, [pc, #180]	; (8001064 <monitor_check_cmd+0x250>)
 8000fae:	f004 fd43 	bl	8005a38 <sniprintf>
				monitor_send_string(ans);
 8000fb2:	482c      	ldr	r0, [pc, #176]	; (8001064 <monitor_check_cmd+0x250>)
 8000fb4:	f7ff ff1a 	bl	8000dec <monitor_send_string>
}
 8000fb8:	e04c      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_DISPLAY_SPLASH) {
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	3301      	adds	r3, #1
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	2b69      	cmp	r3, #105	; 0x69
 8000fc2:	d102      	bne.n	8000fca <monitor_check_cmd+0x1b6>
				disp_splash();
 8000fc4:	f7ff fbc8 	bl	8000758 <disp_splash>
}
 8000fc8:	e044      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_DEF_THICK_VERTICAL_BAR) {
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b76      	cmp	r3, #118	; 0x76
 8000fd2:	d102      	bne.n	8000fda <monitor_check_cmd+0x1c6>
			 def_thick_v_bar();
 8000fd4:	f7ff fa76 	bl	80004c4 <def_thick_v_bar>
}
 8000fd8:	e03c      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_DEF_THIN_VERTICAL_BAR) {
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	2b73      	cmp	r3, #115	; 0x73
 8000fe2:	d102      	bne.n	8000fea <monitor_check_cmd+0x1d6>
			 def_thin_v_bar();
 8000fe4:	f7ff fa7a 	bl	80004dc <def_thin_v_bar>
}
 8000fe8:	e034      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	3301      	adds	r3, #1
 8000fee:	781b      	ldrb	r3, [r3, #0]
 8000ff0:	2b3d      	cmp	r3, #61	; 0x3d
 8000ff2:	d10a      	bne.n	800100a <monitor_check_cmd+0x1f6>
			 draw_v_bar_graph(cmd[2], cmd[3]);
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	3302      	adds	r3, #2
 8000ff8:	781a      	ldrb	r2, [r3, #0]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	3303      	adds	r3, #3
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	4619      	mov	r1, r3
 8001002:	4610      	mov	r0, r2
 8001004:	f7ff fa76 	bl	80004f4 <draw_v_bar_graph>
}
 8001008:	e024      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_DRAW_VERTICAL_BAR_GRAPH) {
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3301      	adds	r3, #1
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	2b3d      	cmp	r3, #61	; 0x3d
 8001012:	d10a      	bne.n	800102a <monitor_check_cmd+0x216>
			erase_v_bar_graph(cmd[2], cmd[3]);
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3302      	adds	r3, #2
 8001018:	781a      	ldrb	r2, [r3, #0]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	3303      	adds	r3, #3
 800101e:	781b      	ldrb	r3, [r3, #0]
 8001020:	4619      	mov	r1, r3
 8001022:	4610      	mov	r0, r2
 8001024:	f7ff fa9a 	bl	800055c <erase_v_bar_graph>
}
 8001028:	e014      	b.n	8001054 <monitor_check_cmd+0x240>
		else if (cmd[1] == LCD_DRAW_HORIZONTAL_BAR_GRAPH ) {
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	3301      	adds	r3, #1
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	2b7c      	cmp	r3, #124	; 0x7c
 8001032:	d10f      	bne.n	8001054 <monitor_check_cmd+0x240>
			 draw_h_bar_graph(cmd[2], cmd[3] ,cmd[4]);
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	3302      	adds	r3, #2
 8001038:	7818      	ldrb	r0, [r3, #0]
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	3303      	adds	r3, #3
 800103e:	7819      	ldrb	r1, [r3, #0]
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	3304      	adds	r3, #4
 8001044:	781b      	ldrb	r3, [r3, #0]
 8001046:	461a      	mov	r2, r3
 8001048:	f7ff fabc 	bl	80005c4 <draw_h_bar_graph>
}
 800104c:	e002      	b.n	8001054 <monitor_check_cmd+0x240>
		lcd_print(cmd);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff fbe4 	bl	800081c <lcd_print>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}
 800105c:	0800639c 	.word	0x0800639c
 8001060:	080063a4 	.word	0x080063a4
 8001064:	200004a0 	.word	0x200004a0
 8001068:	080063dc 	.word	0x080063dc
 800106c:	080063e0 	.word	0x080063e0
 8001070:	080063f8 	.word	0x080063f8
 8001074:	2000022c 	.word	0x2000022c
 8001078:	0800640c 	.word	0x0800640c

0800107c <monitor_irq_handler>:

void monitor_irq_handler(void) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
	uint8_t c;
	uint32_t sr;
	USART_TypeDef *h = USART_PORT;
 8001082:	4b29      	ldr	r3, [pc, #164]	; (8001128 <monitor_irq_handler+0xac>)
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	60bb      	str	r3, [r7, #8]

	sr = h->SR;
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	60fb      	str	r3, [r7, #12]
	while (sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)) {
 800108e:	e005      	b.n	800109c <monitor_irq_handler+0x20>
		sr = h->SR;
 8001090:	68bb      	ldr	r3, [r7, #8]
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
		c = h->DR;
 8001096:	68bb      	ldr	r3, [r7, #8]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	71fb      	strb	r3, [r7, #7]
	while (sr & (UART_FLAG_ORE | UART_FLAG_PE | UART_FLAG_FE | UART_FLAG_NE)) {
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	f003 030f 	and.w	r3, r3, #15
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d1f4      	bne.n	8001090 <monitor_irq_handler+0x14>
	}

	if (sr & UART_FLAG_RXNE) {
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	f003 0320 	and.w	r3, r3, #32
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d034      	beq.n	800111a <monitor_irq_handler+0x9e>
		c = h->DR;
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	685b      	ldr	r3, [r3, #4]
 80010b4:	71fb      	strb	r3, [r7, #7]

		if (c == 253) {
 80010b6:	79fb      	ldrb	r3, [r7, #7]
 80010b8:	2bfd      	cmp	r3, #253	; 0xfd
 80010ba:	d10f      	bne.n	80010dc <monitor_irq_handler+0x60>
			cmd[size] = 253;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <monitor_irq_handler+0xb0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a1b      	ldr	r2, [pc, #108]	; (8001130 <monitor_irq_handler+0xb4>)
 80010c2:	21fd      	movs	r1, #253	; 0xfd
 80010c4:	54d1      	strb	r1, [r2, r3]
			enQueue(Queue, c);
 80010c6:	4b1b      	ldr	r3, [pc, #108]	; (8001134 <monitor_irq_handler+0xb8>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	79fa      	ldrb	r2, [r7, #7]
 80010cc:	4611      	mov	r1, r2
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff f991 	bl	80003f6 <enQueue>
			new_cmd = true;
 80010d4:	4b18      	ldr	r3, [pc, #96]	; (8001138 <monitor_irq_handler+0xbc>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
 80010da:	e01e      	b.n	800111a <monitor_irq_handler+0x9e>
		}

		else if (!new_cmd) {
 80010dc:	4b16      	ldr	r3, [pc, #88]	; (8001138 <monitor_irq_handler+0xbc>)
 80010de:	781b      	ldrb	r3, [r3, #0]
 80010e0:	f083 0301 	eor.w	r3, r3, #1
 80010e4:	b2db      	uxtb	r3, r3
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d017      	beq.n	800111a <monitor_irq_handler+0x9e>
			cmd[size] = c;
 80010ea:	4b10      	ldr	r3, [pc, #64]	; (800112c <monitor_irq_handler+0xb0>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4910      	ldr	r1, [pc, #64]	; (8001130 <monitor_irq_handler+0xb4>)
 80010f0:	79fa      	ldrb	r2, [r7, #7]
 80010f2:	54ca      	strb	r2, [r1, r3]
			enQueue(Queue, c);
 80010f4:	4b0f      	ldr	r3, [pc, #60]	; (8001134 <monitor_irq_handler+0xb8>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	79fa      	ldrb	r2, [r7, #7]
 80010fa:	4611      	mov	r1, r2
 80010fc:	4618      	mov	r0, r3
 80010fe:	f7ff f97a 	bl	80003f6 <enQueue>
			size++;
 8001102:	4b0a      	ldr	r3, [pc, #40]	; (800112c <monitor_irq_handler+0xb0>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	4a08      	ldr	r2, [pc, #32]	; (800112c <monitor_irq_handler+0xb0>)
 800110a:	6013      	str	r3, [r2, #0]

			if (size >= CMD_BUF_SIZE)
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <monitor_irq_handler+0xb0>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b63      	cmp	r3, #99	; 0x63
 8001112:	d902      	bls.n	800111a <monitor_irq_handler+0x9e>
				size = 0;
 8001114:	4b05      	ldr	r3, [pc, #20]	; (800112c <monitor_irq_handler+0xb0>)
 8001116:	2200      	movs	r2, #0
 8001118:	601a      	str	r2, [r3, #0]
		}
	}
	monitor_interrupt();
 800111a:	f000 f80f 	bl	800113c <monitor_interrupt>
}
 800111e:	bf00      	nop
 8001120:	3710      	adds	r7, #16
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	200003f8 	.word	0x200003f8
 800112c:	20000508 	.word	0x20000508
 8001130:	2000043c 	.word	0x2000043c
 8001134:	20000504 	.word	0x20000504
 8001138:	2000050c 	.word	0x2000050c

0800113c <monitor_interrupt>:

monitor_interrupt(){
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
	if (new_cmd) {
 8001140:	4b08      	ldr	r3, [pc, #32]	; (8001164 <monitor_interrupt+0x28>)
 8001142:	781b      	ldrb	r3, [r3, #0]
 8001144:	2b00      	cmp	r3, #0
 8001146:	d00b      	beq.n	8001160 <monitor_interrupt+0x24>
		monitor_check_cmd((char*) cmd, size);
 8001148:	4b07      	ldr	r3, [pc, #28]	; (8001168 <monitor_interrupt+0x2c>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4619      	mov	r1, r3
 800114e:	4807      	ldr	r0, [pc, #28]	; (800116c <monitor_interrupt+0x30>)
 8001150:	f7ff fe60 	bl	8000e14 <monitor_check_cmd>
		size = 0;
 8001154:	4b04      	ldr	r3, [pc, #16]	; (8001168 <monitor_interrupt+0x2c>)
 8001156:	2200      	movs	r2, #0
 8001158:	601a      	str	r2, [r3, #0]
		new_cmd = false;
 800115a:	4b02      	ldr	r3, [pc, #8]	; (8001164 <monitor_interrupt+0x28>)
 800115c:	2200      	movs	r2, #0
 800115e:	701a      	strb	r2, [r3, #0]
	}
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}
 8001164:	2000050c 	.word	0x2000050c
 8001168:	20000508 	.word	0x20000508
 800116c:	2000043c 	.word	0x2000043c

08001170 <serial_begin>:

void serial_begin(void) {
 8001170:	b580      	push	{r7, lr}
 8001172:	af00      	add	r7, sp, #0
	size = 0;
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <serial_begin+0x6c>)
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
	new_cmd = false;
 800117a:	4b19      	ldr	r3, [pc, #100]	; (80011e0 <serial_begin+0x70>)
 800117c:	2200      	movs	r2, #0
 800117e:	701a      	strb	r2, [r3, #0]
	Queue =  createQueue(CMD_BUF_SIZE);
 8001180:	2064      	movs	r0, #100	; 0x64
 8001182:	f7ff f8db 	bl	800033c <createQueue>
 8001186:	4603      	mov	r3, r0
 8001188:	4a16      	ldr	r2, [pc, #88]	; (80011e4 <serial_begin+0x74>)
 800118a:	6013      	str	r3, [r2, #0]

	// enabling interrupts for errors
	//   (Frame error, noise error, overrun error)
	huart1.Instance->CR3 |= USART_CR3_EIE;
 800118c:	4b16      	ldr	r3, [pc, #88]	; (80011e8 <serial_begin+0x78>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	695a      	ldr	r2, [r3, #20]
 8001192:	4b15      	ldr	r3, [pc, #84]	; (80011e8 <serial_begin+0x78>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f042 0201 	orr.w	r2, r2, #1
 800119a:	615a      	str	r2, [r3, #20]
	// enabling interrupt for parity errors and rx
	huart1.Instance->CR1 |= USART_CR1_PEIE | USART_CR1_RXNEIE;
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <serial_begin+0x78>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	68da      	ldr	r2, [r3, #12]
 80011a2:	4b11      	ldr	r3, [pc, #68]	; (80011e8 <serial_begin+0x78>)
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 80011aa:	60da      	str	r2, [r3, #12]

	HAL_NVIC_SetPriority(USART1_IRQn, 2, 0);
 80011ac:	2200      	movs	r2, #0
 80011ae:	2102      	movs	r1, #2
 80011b0:	2025      	movs	r0, #37	; 0x25
 80011b2:	f002 fdac 	bl	8003d0e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011b6:	2025      	movs	r0, #37	; 0x25
 80011b8:	f002 fdc5 	bl	8003d46 <HAL_NVIC_EnableIRQ>
	HAL_NVIC_ClearPendingIRQ(USART1_IRQn);
 80011bc:	2025      	movs	r0, #37	; 0x25
 80011be:	f002 fdea 	bl	8003d96 <HAL_NVIC_ClearPendingIRQ>

	//mensagem de inicialização
	snprintf((char*) ans, CMD_BUF_SIZE, "hora do show!\r\n");
 80011c2:	4a0a      	ldr	r2, [pc, #40]	; (80011ec <serial_begin+0x7c>)
 80011c4:	2164      	movs	r1, #100	; 0x64
 80011c6:	480a      	ldr	r0, [pc, #40]	; (80011f0 <serial_begin+0x80>)
 80011c8:	f004 fc36 	bl	8005a38 <sniprintf>
	monitor_send_string(ans);
 80011cc:	4808      	ldr	r0, [pc, #32]	; (80011f0 <serial_begin+0x80>)
 80011ce:	f7ff fe0d 	bl	8000dec <monitor_send_string>

	monitor_interrupt();
 80011d2:	f7ff ffb3 	bl	800113c <monitor_interrupt>
}
 80011d6:	bf00      	nop
 80011d8:	bd80      	pop	{r7, pc}
 80011da:	bf00      	nop
 80011dc:	20000508 	.word	0x20000508
 80011e0:	2000050c 	.word	0x2000050c
 80011e4:	20000504 	.word	0x20000504
 80011e8:	200003f8 	.word	0x200003f8
 80011ec:	08006418 	.word	0x08006418
 80011f0:	200004a0 	.word	0x200004a0

080011f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80011fa:	4b1d      	ldr	r3, [pc, #116]	; (8001270 <HAL_MspInit+0x7c>)
 80011fc:	699b      	ldr	r3, [r3, #24]
 80011fe:	4a1c      	ldr	r2, [pc, #112]	; (8001270 <HAL_MspInit+0x7c>)
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	6193      	str	r3, [r2, #24]
 8001206:	4b1a      	ldr	r3, [pc, #104]	; (8001270 <HAL_MspInit+0x7c>)
 8001208:	699b      	ldr	r3, [r3, #24]
 800120a:	f003 0301 	and.w	r3, r3, #1
 800120e:	60bb      	str	r3, [r7, #8]
 8001210:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001212:	4b17      	ldr	r3, [pc, #92]	; (8001270 <HAL_MspInit+0x7c>)
 8001214:	69db      	ldr	r3, [r3, #28]
 8001216:	4a16      	ldr	r2, [pc, #88]	; (8001270 <HAL_MspInit+0x7c>)
 8001218:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121c:	61d3      	str	r3, [r2, #28]
 800121e:	4b14      	ldr	r3, [pc, #80]	; (8001270 <HAL_MspInit+0x7c>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001226:	607b      	str	r3, [r7, #4]
 8001228:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800122a:	2200      	movs	r2, #0
 800122c:	2100      	movs	r1, #0
 800122e:	2005      	movs	r0, #5
 8001230:	f002 fd6d 	bl	8003d0e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001234:	2005      	movs	r0, #5
 8001236:	f002 fd86 	bl	8003d46 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800123a:	2200      	movs	r2, #0
 800123c:	2100      	movs	r1, #0
 800123e:	2005      	movs	r0, #5
 8001240:	f002 fd65 	bl	8003d0e <HAL_NVIC_SetPriority>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001244:	2005      	movs	r0, #5
 8001246:	f002 fd7e 	bl	8003d46 <HAL_NVIC_EnableIRQ>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <HAL_MspInit+0x80>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	60fb      	str	r3, [r7, #12]
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001256:	60fb      	str	r3, [r7, #12]
 8001258:	68fb      	ldr	r3, [r7, #12]
 800125a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800125e:	60fb      	str	r3, [r7, #12]
 8001260:	4a04      	ldr	r2, [pc, #16]	; (8001274 <HAL_MspInit+0x80>)
 8001262:	68fb      	ldr	r3, [r7, #12]
 8001264:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001266:	bf00      	nop
 8001268:	3710      	adds	r7, #16
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40021000 	.word	0x40021000
 8001274:	40010000 	.word	0x40010000

08001278 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b088      	sub	sp, #32
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001280:	f107 0310 	add.w	r3, r7, #16
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	4a15      	ldr	r2, [pc, #84]	; (80012e8 <HAL_SPI_MspInit+0x70>)
 8001294:	4293      	cmp	r3, r2
 8001296:	d123      	bne.n	80012e0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001298:	4b14      	ldr	r3, [pc, #80]	; (80012ec <HAL_SPI_MspInit+0x74>)
 800129a:	699b      	ldr	r3, [r3, #24]
 800129c:	4a13      	ldr	r2, [pc, #76]	; (80012ec <HAL_SPI_MspInit+0x74>)
 800129e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80012a2:	6193      	str	r3, [r2, #24]
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <HAL_SPI_MspInit+0x74>)
 80012a6:	699b      	ldr	r3, [r3, #24]
 80012a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80012ac:	60fb      	str	r3, [r7, #12]
 80012ae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_SPI_MspInit+0x74>)
 80012b2:	699b      	ldr	r3, [r3, #24]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_SPI_MspInit+0x74>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6193      	str	r3, [r2, #24]
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_SPI_MspInit+0x74>)
 80012be:	699b      	ldr	r3, [r3, #24]
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	60bb      	str	r3, [r7, #8]
 80012c6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80012c8:	23a0      	movs	r3, #160	; 0xa0
 80012ca:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012cc:	2302      	movs	r3, #2
 80012ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80012d0:	2303      	movs	r3, #3
 80012d2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012d4:	f107 0310 	add.w	r3, r7, #16
 80012d8:	4619      	mov	r1, r3
 80012da:	4805      	ldr	r0, [pc, #20]	; (80012f0 <HAL_SPI_MspInit+0x78>)
 80012dc:	f002 fd6a 	bl	8003db4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012e0:	bf00      	nop
 80012e2:	3720      	adds	r7, #32
 80012e4:	46bd      	mov	sp, r7
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	40013000 	.word	0x40013000
 80012ec:	40021000 	.word	0x40021000
 80012f0:	40010800 	.word	0x40010800

080012f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001304:	d113      	bne.n	800132e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <HAL_TIM_Base_MspInit+0x44>)
 8001308:	69db      	ldr	r3, [r3, #28]
 800130a:	4a0b      	ldr	r2, [pc, #44]	; (8001338 <HAL_TIM_Base_MspInit+0x44>)
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	61d3      	str	r3, [r2, #28]
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <HAL_TIM_Base_MspInit+0x44>)
 8001314:	69db      	ldr	r3, [r3, #28]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	60fb      	str	r3, [r7, #12]
 800131c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800131e:	2200      	movs	r2, #0
 8001320:	2100      	movs	r1, #0
 8001322:	201c      	movs	r0, #28
 8001324:	f002 fcf3 	bl	8003d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001328:	201c      	movs	r0, #28
 800132a:	f002 fd0c 	bl	8003d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800132e:	bf00      	nop
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40021000 	.word	0x40021000

0800133c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b088      	sub	sp, #32
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	f107 0310 	add.w	r3, r7, #16
 8001348:	2200      	movs	r2, #0
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	605a      	str	r2, [r3, #4]
 800134e:	609a      	str	r2, [r3, #8]
 8001350:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <HAL_UART_MspInit+0x9c>)
 8001358:	4293      	cmp	r3, r2
 800135a:	d139      	bne.n	80013d0 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <HAL_UART_MspInit+0xa0>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_UART_MspInit+0xa0>)
 8001362:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <HAL_UART_MspInit+0xa0>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001374:	4b19      	ldr	r3, [pc, #100]	; (80013dc <HAL_UART_MspInit+0xa0>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a18      	ldr	r2, [pc, #96]	; (80013dc <HAL_UART_MspInit+0xa0>)
 800137a:	f043 0304 	orr.w	r3, r3, #4
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_UART_MspInit+0xa0>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0304 	and.w	r3, r3, #4
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800138c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001390:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001392:	2302      	movs	r3, #2
 8001394:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001396:	2303      	movs	r3, #3
 8001398:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800139a:	f107 0310 	add.w	r3, r7, #16
 800139e:	4619      	mov	r1, r3
 80013a0:	480f      	ldr	r0, [pc, #60]	; (80013e0 <HAL_UART_MspInit+0xa4>)
 80013a2:	f002 fd07 	bl	8003db4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80013a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013ac:	2300      	movs	r3, #0
 80013ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b4:	f107 0310 	add.w	r3, r7, #16
 80013b8:	4619      	mov	r1, r3
 80013ba:	4809      	ldr	r0, [pc, #36]	; (80013e0 <HAL_UART_MspInit+0xa4>)
 80013bc:	f002 fcfa 	bl	8003db4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80013c0:	2200      	movs	r2, #0
 80013c2:	2100      	movs	r1, #0
 80013c4:	2025      	movs	r0, #37	; 0x25
 80013c6:	f002 fca2 	bl	8003d0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80013ca:	2025      	movs	r0, #37	; 0x25
 80013cc:	f002 fcbb 	bl	8003d46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80013d0:	bf00      	nop
 80013d2:	3720      	adds	r7, #32
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40013800 	.word	0x40013800
 80013dc:	40021000 	.word	0x40021000
 80013e0:	40010800 	.word	0x40010800

080013e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013e4:	b480      	push	{r7}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <NMI_Handler+0x4>

080013ea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013ea:	b480      	push	{r7}
 80013ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013ee:	e7fe      	b.n	80013ee <HardFault_Handler+0x4>

080013f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013f4:	e7fe      	b.n	80013f4 <MemManage_Handler+0x4>

080013f6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013f6:	b480      	push	{r7}
 80013f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <BusFault_Handler+0x4>

080013fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler+0x4>

08001402 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001402:	b480      	push	{r7}
 8001404:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001406:	bf00      	nop
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800140e:	b480      	push	{r7}
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001412:	bf00      	nop
 8001414:	46bd      	mov	sp, r7
 8001416:	bc80      	pop	{r7}
 8001418:	4770      	bx	lr

0800141a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800141a:	b480      	push	{r7}
 800141c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141e:	bf00      	nop
 8001420:	46bd      	mov	sp, r7
 8001422:	bc80      	pop	{r7}
 8001424:	4770      	bx	lr

08001426 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
	//SystickCallback();
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800142a:	f002 fb17 	bl	8003a5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	bd80      	pop	{r7, pc}

08001432 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8001436:	bf00      	nop
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_4);
 8001442:	2010      	movs	r0, #16
 8001444:	f002 fe64 	bl	8004110 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8001448:	bf00      	nop
 800144a:	bd80      	pop	{r7, pc}

0800144c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001450:	4802      	ldr	r0, [pc, #8]	; (800145c <TIM2_IRQHandler+0x10>)
 8001452:	f003 fdbf 	bl	8004fd4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001456:	bf00      	nop
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200003b0 	.word	0x200003b0

08001460 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
if(0){
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
  /* USER CODE BEGIN USART1_IRQn 1 */
}
  monitor_irq_handler();
 8001464:	f7ff fe0a 	bl	800107c <monitor_irq_handler>
  /* USER CODE END USART1_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	bd80      	pop	{r7, pc}

0800146c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001474:	4a14      	ldr	r2, [pc, #80]	; (80014c8 <_sbrk+0x5c>)
 8001476:	4b15      	ldr	r3, [pc, #84]	; (80014cc <_sbrk+0x60>)
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001480:	4b13      	ldr	r3, [pc, #76]	; (80014d0 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d102      	bne.n	800148e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001488:	4b11      	ldr	r3, [pc, #68]	; (80014d0 <_sbrk+0x64>)
 800148a:	4a12      	ldr	r2, [pc, #72]	; (80014d4 <_sbrk+0x68>)
 800148c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800148e:	4b10      	ldr	r3, [pc, #64]	; (80014d0 <_sbrk+0x64>)
 8001490:	681a      	ldr	r2, [r3, #0]
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4413      	add	r3, r2
 8001496:	693a      	ldr	r2, [r7, #16]
 8001498:	429a      	cmp	r2, r3
 800149a:	d207      	bcs.n	80014ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800149c:	f004 fa9a 	bl	80059d4 <__errno>
 80014a0:	4603      	mov	r3, r0
 80014a2:	220c      	movs	r2, #12
 80014a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014aa:	e009      	b.n	80014c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014ac:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <_sbrk+0x64>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014b2:	4b07      	ldr	r3, [pc, #28]	; (80014d0 <_sbrk+0x64>)
 80014b4:	681a      	ldr	r2, [r3, #0]
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	4413      	add	r3, r2
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <_sbrk+0x64>)
 80014bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014be:	68fb      	ldr	r3, [r7, #12]
}
 80014c0:	4618      	mov	r0, r3
 80014c2:	3718      	adds	r7, #24
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	20002800 	.word	0x20002800
 80014cc:	00000400 	.word	0x00000400
 80014d0:	20000510 	.word	0x20000510
 80014d4:	20000b28 	.word	0x20000b28

080014d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80014d8:	b480      	push	{r7}
 80014da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	bc80      	pop	{r7}
 80014e2:	4770      	bx	lr

080014e4 <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
 80014ec:	460b      	mov	r3, r1
 80014ee:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	78fa      	ldrb	r2, [r7, #3]
 80014f4:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 80014f8:	bf00      	nop
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	bc80      	pop	{r7}
 8001500:	4770      	bx	lr

08001502 <u8g2_DrawHXBM>:
}



void u8g2_DrawHXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, const uint8_t *b)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b088      	sub	sp, #32
 8001506:	af02      	add	r7, sp, #8
 8001508:	60f8      	str	r0, [r7, #12]
 800150a:	4608      	mov	r0, r1
 800150c:	4611      	mov	r1, r2
 800150e:	461a      	mov	r2, r3
 8001510:	4603      	mov	r3, r0
 8001512:	817b      	strh	r3, [r7, #10]
 8001514:	460b      	mov	r3, r1
 8001516:	813b      	strh	r3, [r7, #8]
 8001518:	4613      	mov	r3, r2
 800151a:	80fb      	strh	r3, [r7, #6]
  uint8_t mask;
  uint8_t color = u8g2->draw_color;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001522:	75bb      	strb	r3, [r7, #22]
  uint8_t ncolor = (color == 0 ? 1 : 0);
 8001524:	7dbb      	ldrb	r3, [r7, #22]
 8001526:	2b00      	cmp	r3, #0
 8001528:	bf0c      	ite	eq
 800152a:	2301      	moveq	r3, #1
 800152c:	2300      	movne	r3, #0
 800152e:	b2db      	uxtb	r3, r3
 8001530:	757b      	strb	r3, [r7, #21]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
 8001532:	897a      	ldrh	r2, [r7, #10]
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	4413      	add	r3, r2
 8001538:	b298      	uxth	r0, r3
 800153a:	893b      	ldrh	r3, [r7, #8]
 800153c:	3301      	adds	r3, #1
 800153e:	b29b      	uxth	r3, r3
 8001540:	893a      	ldrh	r2, [r7, #8]
 8001542:	8979      	ldrh	r1, [r7, #10]
 8001544:	9300      	str	r3, [sp, #0]
 8001546:	4603      	mov	r3, r0
 8001548:	68f8      	ldr	r0, [r7, #12]
 800154a:	f001 fbc8 	bl	8002cde <u8g2_IsIntersection>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d040      	beq.n	80015d6 <u8g2_DrawHXBM+0xd4>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  mask = 1;
 8001554:	2301      	movs	r3, #1
 8001556:	75fb      	strb	r3, [r7, #23]
  while(len > 0) {
 8001558:	e035      	b.n	80015c6 <u8g2_DrawHXBM+0xc4>
    if ( *b & mask ) {
 800155a:	6a3b      	ldr	r3, [r7, #32]
 800155c:	781a      	ldrb	r2, [r3, #0]
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	4013      	ands	r3, r2
 8001562:	b2db      	uxtb	r3, r3
 8001564:	2b00      	cmp	r3, #0
 8001566:	d00c      	beq.n	8001582 <u8g2_DrawHXBM+0x80>
      u8g2->draw_color = color;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	7dba      	ldrb	r2, [r7, #22]
 800156c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001570:	893a      	ldrh	r2, [r7, #8]
 8001572:	8979      	ldrh	r1, [r7, #10]
 8001574:	2300      	movs	r3, #0
 8001576:	9300      	str	r3, [sp, #0]
 8001578:	2301      	movs	r3, #1
 800157a:	68f8      	ldr	r0, [r7, #12]
 800157c:	f001 fa76 	bl	8002a6c <u8g2_DrawHVLine>
 8001580:	e010      	b.n	80015a4 <u8g2_DrawHXBM+0xa2>
    } else if ( u8g2->bitmap_transparency == 0 ) {
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8001588:	2b00      	cmp	r3, #0
 800158a:	d10b      	bne.n	80015a4 <u8g2_DrawHXBM+0xa2>
      u8g2->draw_color = ncolor;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	7d7a      	ldrb	r2, [r7, #21]
 8001590:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8001594:	893a      	ldrh	r2, [r7, #8]
 8001596:	8979      	ldrh	r1, [r7, #10]
 8001598:	2300      	movs	r3, #0
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2301      	movs	r3, #1
 800159e:	68f8      	ldr	r0, [r7, #12]
 80015a0:	f001 fa64 	bl	8002a6c <u8g2_DrawHVLine>
    }
    x++;
 80015a4:	897b      	ldrh	r3, [r7, #10]
 80015a6:	3301      	adds	r3, #1
 80015a8:	817b      	strh	r3, [r7, #10]
    mask <<= 1;
 80015aa:	7dfb      	ldrb	r3, [r7, #23]
 80015ac:	005b      	lsls	r3, r3, #1
 80015ae:	75fb      	strb	r3, [r7, #23]
    if ( mask == 0 )
 80015b0:	7dfb      	ldrb	r3, [r7, #23]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d104      	bne.n	80015c0 <u8g2_DrawHXBM+0xbe>
    {
      mask = 1;
 80015b6:	2301      	movs	r3, #1
 80015b8:	75fb      	strb	r3, [r7, #23]
      b++;
 80015ba:	6a3b      	ldr	r3, [r7, #32]
 80015bc:	3301      	adds	r3, #1
 80015be:	623b      	str	r3, [r7, #32]
    }
    len--;
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	3b01      	subs	r3, #1
 80015c4:	80fb      	strh	r3, [r7, #6]
  while(len > 0) {
 80015c6:	88fb      	ldrh	r3, [r7, #6]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d1c6      	bne.n	800155a <u8g2_DrawHXBM+0x58>
  }
  u8g2->draw_color = color;
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	7dba      	ldrb	r2, [r7, #22]
 80015d0:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
 80015d4:	e000      	b.n	80015d8 <u8g2_DrawHXBM+0xd6>
    return;
 80015d6:	bf00      	nop
}
 80015d8:	3718      	adds	r7, #24
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}

080015de <u8g2_DrawXBM>:


void u8g2_DrawXBM(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h, const uint8_t *bitmap)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b088      	sub	sp, #32
 80015e2:	af02      	add	r7, sp, #8
 80015e4:	60f8      	str	r0, [r7, #12]
 80015e6:	4608      	mov	r0, r1
 80015e8:	4611      	mov	r1, r2
 80015ea:	461a      	mov	r2, r3
 80015ec:	4603      	mov	r3, r0
 80015ee:	817b      	strh	r3, [r7, #10]
 80015f0:	460b      	mov	r3, r1
 80015f2:	813b      	strh	r3, [r7, #8]
 80015f4:	4613      	mov	r3, r2
 80015f6:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t blen;
  blen = w;
 80015f8:	88fb      	ldrh	r3, [r7, #6]
 80015fa:	82fb      	strh	r3, [r7, #22]
  blen += 7;
 80015fc:	8afb      	ldrh	r3, [r7, #22]
 80015fe:	3307      	adds	r3, #7
 8001600:	82fb      	strh	r3, [r7, #22]
  blen >>= 3;
 8001602:	8afb      	ldrh	r3, [r7, #22]
 8001604:	08db      	lsrs	r3, r3, #3
 8001606:	82fb      	strh	r3, [r7, #22]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001608:	897a      	ldrh	r2, [r7, #10]
 800160a:	88fb      	ldrh	r3, [r7, #6]
 800160c:	4413      	add	r3, r2
 800160e:	b298      	uxth	r0, r3
 8001610:	893a      	ldrh	r2, [r7, #8]
 8001612:	8c3b      	ldrh	r3, [r7, #32]
 8001614:	4413      	add	r3, r2
 8001616:	b29b      	uxth	r3, r3
 8001618:	893a      	ldrh	r2, [r7, #8]
 800161a:	8979      	ldrh	r1, [r7, #10]
 800161c:	9300      	str	r3, [sp, #0]
 800161e:	4603      	mov	r3, r0
 8001620:	68f8      	ldr	r0, [r7, #12]
 8001622:	f001 fb5c 	bl	8002cde <u8g2_IsIntersection>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d017      	beq.n	800165c <u8g2_DrawXBM+0x7e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  while( h > 0 )
 800162c:	e012      	b.n	8001654 <u8g2_DrawXBM+0x76>
  {
    u8g2_DrawHXBM(u8g2, x, y, w, bitmap);
 800162e:	88f8      	ldrh	r0, [r7, #6]
 8001630:	893a      	ldrh	r2, [r7, #8]
 8001632:	8979      	ldrh	r1, [r7, #10]
 8001634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001636:	9300      	str	r3, [sp, #0]
 8001638:	4603      	mov	r3, r0
 800163a:	68f8      	ldr	r0, [r7, #12]
 800163c:	f7ff ff61 	bl	8001502 <u8g2_DrawHXBM>
    bitmap += blen;
 8001640:	8afb      	ldrh	r3, [r7, #22]
 8001642:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001644:	4413      	add	r3, r2
 8001646:	627b      	str	r3, [r7, #36]	; 0x24
    y++;
 8001648:	893b      	ldrh	r3, [r7, #8]
 800164a:	3301      	adds	r3, #1
 800164c:	813b      	strh	r3, [r7, #8]
    h--;
 800164e:	8c3b      	ldrh	r3, [r7, #32]
 8001650:	3b01      	subs	r3, #1
 8001652:	843b      	strh	r3, [r7, #32]
  while( h > 0 )
 8001654:	8c3b      	ldrh	r3, [r7, #32]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d1e9      	bne.n	800162e <u8g2_DrawXBM+0x50>
 800165a:	e000      	b.n	800165e <u8g2_DrawXBM+0x80>
    return;
 800165c:	bf00      	nop
  }
}
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}

08001664 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af02      	add	r7, sp, #8
 800166a:	60f8      	str	r0, [r7, #12]
 800166c:	4608      	mov	r0, r1
 800166e:	4611      	mov	r1, r2
 8001670:	461a      	mov	r2, r3
 8001672:	4603      	mov	r3, r0
 8001674:	817b      	strh	r3, [r7, #10]
 8001676:	460b      	mov	r3, r1
 8001678:	813b      	strh	r3, [r7, #8]
 800167a:	4613      	mov	r3, r2
 800167c:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 800167e:	897a      	ldrh	r2, [r7, #10]
 8001680:	88fb      	ldrh	r3, [r7, #6]
 8001682:	4413      	add	r3, r2
 8001684:	b298      	uxth	r0, r3
 8001686:	893a      	ldrh	r2, [r7, #8]
 8001688:	8b3b      	ldrh	r3, [r7, #24]
 800168a:	4413      	add	r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	893a      	ldrh	r2, [r7, #8]
 8001690:	8979      	ldrh	r1, [r7, #10]
 8001692:	9300      	str	r3, [sp, #0]
 8001694:	4603      	mov	r3, r0
 8001696:	68f8      	ldr	r0, [r7, #12]
 8001698:	f001 fb21 	bl	8002cde <u8g2_IsIntersection>
 800169c:	4603      	mov	r3, r0
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d012      	beq.n	80016c8 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 80016a2:	e00d      	b.n	80016c0 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 80016a4:	88fb      	ldrh	r3, [r7, #6]
 80016a6:	893a      	ldrh	r2, [r7, #8]
 80016a8:	8979      	ldrh	r1, [r7, #10]
 80016aa:	2000      	movs	r0, #0
 80016ac:	9000      	str	r0, [sp, #0]
 80016ae:	68f8      	ldr	r0, [r7, #12]
 80016b0:	f001 f9dc 	bl	8002a6c <u8g2_DrawHVLine>
    y++;    
 80016b4:	893b      	ldrh	r3, [r7, #8]
 80016b6:	3301      	adds	r3, #1
 80016b8:	813b      	strh	r3, [r7, #8]
    h--;
 80016ba:	8b3b      	ldrh	r3, [r7, #24]
 80016bc:	3b01      	subs	r3, #1
 80016be:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 80016c0:	8b3b      	ldrh	r3, [r7, #24]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d1ee      	bne.n	80016a4 <u8g2_DrawBox+0x40>
 80016c6:	e000      	b.n	80016ca <u8g2_DrawBox+0x66>
    return;
 80016c8:	bf00      	nop
  }
}
 80016ca:	3710      	adds	r7, #16
 80016cc:	46bd      	mov	sp, r7
 80016ce:	bd80      	pop	{r7, pc}

080016d0 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b088      	sub	sp, #32
 80016d4:	af02      	add	r7, sp, #8
 80016d6:	60f8      	str	r0, [r7, #12]
 80016d8:	4608      	mov	r0, r1
 80016da:	4611      	mov	r1, r2
 80016dc:	461a      	mov	r2, r3
 80016de:	4603      	mov	r3, r0
 80016e0:	817b      	strh	r3, [r7, #10]
 80016e2:	460b      	mov	r3, r1
 80016e4:	813b      	strh	r3, [r7, #8]
 80016e6:	4613      	mov	r3, r2
 80016e8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 80016ea:	897b      	ldrh	r3, [r7, #10]
 80016ec:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 80016ee:	897a      	ldrh	r2, [r7, #10]
 80016f0:	88fb      	ldrh	r3, [r7, #6]
 80016f2:	4413      	add	r3, r2
 80016f4:	b298      	uxth	r0, r3
 80016f6:	893a      	ldrh	r2, [r7, #8]
 80016f8:	8c3b      	ldrh	r3, [r7, #32]
 80016fa:	4413      	add	r3, r2
 80016fc:	b29b      	uxth	r3, r3
 80016fe:	893a      	ldrh	r2, [r7, #8]
 8001700:	8979      	ldrh	r1, [r7, #10]
 8001702:	9300      	str	r3, [sp, #0]
 8001704:	4603      	mov	r3, r0
 8001706:	68f8      	ldr	r0, [r7, #12]
 8001708:	f001 fae9 	bl	8002cde <u8g2_IsIntersection>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d037      	beq.n	8001782 <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8001712:	88fb      	ldrh	r3, [r7, #6]
 8001714:	893a      	ldrh	r2, [r7, #8]
 8001716:	8979      	ldrh	r1, [r7, #10]
 8001718:	2000      	movs	r0, #0
 800171a:	9000      	str	r0, [sp, #0]
 800171c:	68f8      	ldr	r0, [r7, #12]
 800171e:	f001 f9a5 	bl	8002a6c <u8g2_DrawHVLine>
  if (h >= 2) {
 8001722:	8c3b      	ldrh	r3, [r7, #32]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d92d      	bls.n	8001784 <u8g2_DrawFrame+0xb4>
    h-=2;
 8001728:	8c3b      	ldrh	r3, [r7, #32]
 800172a:	3b02      	subs	r3, #2
 800172c:	843b      	strh	r3, [r7, #32]
    y++;
 800172e:	893b      	ldrh	r3, [r7, #8]
 8001730:	3301      	adds	r3, #1
 8001732:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8001734:	8c3b      	ldrh	r3, [r7, #32]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d01a      	beq.n	8001770 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 800173a:	8c3b      	ldrh	r3, [r7, #32]
 800173c:	893a      	ldrh	r2, [r7, #8]
 800173e:	8979      	ldrh	r1, [r7, #10]
 8001740:	2001      	movs	r0, #1
 8001742:	9000      	str	r0, [sp, #0]
 8001744:	68f8      	ldr	r0, [r7, #12]
 8001746:	f001 f991 	bl	8002a6c <u8g2_DrawHVLine>
      x+=w;
 800174a:	897a      	ldrh	r2, [r7, #10]
 800174c:	88fb      	ldrh	r3, [r7, #6]
 800174e:	4413      	add	r3, r2
 8001750:	817b      	strh	r3, [r7, #10]
      x--;
 8001752:	897b      	ldrh	r3, [r7, #10]
 8001754:	3b01      	subs	r3, #1
 8001756:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001758:	8c3b      	ldrh	r3, [r7, #32]
 800175a:	893a      	ldrh	r2, [r7, #8]
 800175c:	8979      	ldrh	r1, [r7, #10]
 800175e:	2001      	movs	r0, #1
 8001760:	9000      	str	r0, [sp, #0]
 8001762:	68f8      	ldr	r0, [r7, #12]
 8001764:	f001 f982 	bl	8002a6c <u8g2_DrawHVLine>
      y+=h;
 8001768:	893a      	ldrh	r2, [r7, #8]
 800176a:	8c3b      	ldrh	r3, [r7, #32]
 800176c:	4413      	add	r3, r2
 800176e:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 8001770:	88fb      	ldrh	r3, [r7, #6]
 8001772:	893a      	ldrh	r2, [r7, #8]
 8001774:	8af9      	ldrh	r1, [r7, #22]
 8001776:	2000      	movs	r0, #0
 8001778:	9000      	str	r0, [sp, #0]
 800177a:	68f8      	ldr	r0, [r7, #12]
 800177c:	f001 f976 	bl	8002a6c <u8g2_DrawHVLine>
 8001780:	e000      	b.n	8001784 <u8g2_DrawFrame+0xb4>
    return;
 8001782:	bf00      	nop
  }
}
 8001784:	3718      	adds	r7, #24
 8001786:	46bd      	mov	sp, r7
 8001788:	bd80      	pop	{r7, pc}

0800178a <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 800178a:	b580      	push	{r7, lr}
 800178c:	b084      	sub	sp, #16
 800178e:	af00      	add	r7, sp, #0
 8001790:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	7c1b      	ldrb	r3, [r3, #16]
 8001798:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80017a0:	461a      	mov	r2, r3
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	fb02 f303 	mul.w	r3, r2, r3
 80017a8:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	00db      	lsls	r3, r3, #3
 80017ae:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017b4:	68fa      	ldr	r2, [r7, #12]
 80017b6:	2100      	movs	r1, #0
 80017b8:	4618      	mov	r0, r3
 80017ba:	f004 f935 	bl	8005a28 <memset>
}
 80017be:	bf00      	nop
 80017c0:	3710      	adds	r7, #16
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}

080017c6 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 80017c6:	b580      	push	{r7, lr}
 80017c8:	b086      	sub	sp, #24
 80017ca:	af02      	add	r7, sp, #8
 80017cc:	6078      	str	r0, [r7, #4]
 80017ce:	460b      	mov	r3, r1
 80017d0:	70fb      	strb	r3, [r7, #3]
 80017d2:	4613      	mov	r3, r2
 80017d4:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	7c1b      	ldrb	r3, [r3, #16]
 80017dc:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017e6:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80017e8:	7bfb      	ldrb	r3, [r7, #15]
 80017ea:	b29b      	uxth	r3, r3
 80017ec:	89ba      	ldrh	r2, [r7, #12]
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80017f4:	89bb      	ldrh	r3, [r7, #12]
 80017f6:	00db      	lsls	r3, r3, #3
 80017f8:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80017fa:	89bb      	ldrh	r3, [r7, #12]
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	4413      	add	r3, r2
 8001800:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8001802:	7bf9      	ldrb	r1, [r7, #15]
 8001804:	78ba      	ldrb	r2, [r7, #2]
 8001806:	68bb      	ldr	r3, [r7, #8]
 8001808:	9300      	str	r3, [sp, #0]
 800180a:	460b      	mov	r3, r1
 800180c:	2100      	movs	r1, #0
 800180e:	6878      	ldr	r0, [r7, #4]
 8001810:	f001 ffd8 	bl	80037c4 <u8x8_DrawTile>
}
 8001814:	bf00      	nop
 8001816:	3710      	adds	r7, #16
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b084      	sub	sp, #16
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8001824:	2300      	movs	r3, #0
 8001826:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800182e:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001836:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	7c5b      	ldrb	r3, [r3, #17]
 800183e:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001840:	7bba      	ldrb	r2, [r7, #14]
 8001842:	7bfb      	ldrb	r3, [r7, #15]
 8001844:	4619      	mov	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ffbd 	bl	80017c6 <u8g2_send_tile_row>
    src_row++;
 800184c:	7bfb      	ldrb	r3, [r7, #15]
 800184e:	3301      	adds	r3, #1
 8001850:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001852:	7bbb      	ldrb	r3, [r7, #14]
 8001854:	3301      	adds	r3, #1
 8001856:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001858:	7bfa      	ldrb	r2, [r7, #15]
 800185a:	7b7b      	ldrb	r3, [r7, #13]
 800185c:	429a      	cmp	r2, r3
 800185e:	d203      	bcs.n	8001868 <u8g2_send_buffer+0x4c>
 8001860:	7bba      	ldrb	r2, [r7, #14]
 8001862:	7b3b      	ldrb	r3, [r7, #12]
 8001864:	429a      	cmp	r2, r3
 8001866:	d3eb      	bcc.n	8001840 <u8g2_send_buffer+0x24>
}
 8001868:	bf00      	nop
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff ffcf 	bl	800181c <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f002 f802 	bl	8003888 <u8x8_RefreshDisplay>
}
 8001884:	bf00      	nop
 8001886:	3708      	adds	r7, #8
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	460b      	mov	r3, r1
 8001896:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	78fa      	ldrb	r2, [r7, #3]
 800189c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	6878      	ldr	r0, [r7, #4]
 80018b2:	4798      	blx	r3
}
 80018b4:	bf00      	nop
 80018b6:	3708      	adds	r7, #8
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d002      	beq.n	80018d4 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 80018ce:	6878      	ldr	r0, [r7, #4]
 80018d0:	f7ff ff5b 	bl	800178a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 80018d4:	2100      	movs	r1, #0
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	f7ff ffd8 	bl	800188c <u8g2_SetBufferCurrTileRow>
}
 80018dc:	bf00      	nop
 80018de:	3708      	adds	r7, #8
 80018e0:	46bd      	mov	sp, r7
 80018e2:	bd80      	pop	{r7, pc}

080018e4 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80018e4:	b580      	push	{r7, lr}
 80018e6:	b084      	sub	sp, #16
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	f7ff ff95 	bl	800181c <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80018f8:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001900:	7bfb      	ldrb	r3, [r7, #15]
 8001902:	4413      	add	r3, r2
 8001904:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	7c5b      	ldrb	r3, [r3, #17]
 800190c:	7bfa      	ldrb	r2, [r7, #15]
 800190e:	429a      	cmp	r2, r3
 8001910:	d304      	bcc.n	800191c <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001912:	6878      	ldr	r0, [r7, #4]
 8001914:	f001 ffb8 	bl	8003888 <u8x8_RefreshDisplay>
    return 0;
 8001918:	2300      	movs	r3, #0
 800191a:	e00d      	b.n	8001938 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001926:	6878      	ldr	r0, [r7, #4]
 8001928:	f7ff ff2f 	bl	800178a <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800192c:	7bfb      	ldrb	r3, [r7, #15]
 800192e:	4619      	mov	r1, r3
 8001930:	6878      	ldr	r0, [r7, #4]
 8001932:	f7ff ffab 	bl	800188c <u8g2_SetBufferCurrTileRow>
  return 1;
 8001936:	2301      	movs	r3, #1
}
 8001938:	4618      	mov	r0, r3
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}

08001940 <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b08c      	sub	sp, #48	; 0x30
 8001944:	af02      	add	r7, sp, #8
 8001946:	60f8      	str	r0, [r7, #12]
 8001948:	4608      	mov	r0, r1
 800194a:	4611      	mov	r1, r2
 800194c:	461a      	mov	r2, r3
 800194e:	4603      	mov	r3, r0
 8001950:	817b      	strh	r3, [r7, #10]
 8001952:	460b      	mov	r3, r1
 8001954:	813b      	strh	r3, [r7, #8]
 8001956:	4613      	mov	r3, r2
 8001958:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 800195a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800195c:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 800195e:	2308      	movs	r3, #8
 8001960:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 8001962:	88fb      	ldrh	r3, [r7, #6]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 8001970:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8001978:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001980:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001988:	2b00      	cmp	r3, #0
 800198a:	d007      	beq.n	800199c <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 800198c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800198e:	3301      	adds	r3, #1
 8001990:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 8001992:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001994:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 8001996:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001998:	3301      	adds	r3, #1
 800199a:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 800199c:	897b      	ldrh	r3, [r7, #10]
 800199e:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 80019a0:	8b7a      	ldrh	r2, [r7, #26]
 80019a2:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 80019a8:	8b7a      	ldrh	r2, [r7, #26]
 80019aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 80019b0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80019b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019b4:	4413      	add	r3, r2
 80019b6:	b29b      	uxth	r3, r3
 80019b8:	005b      	lsls	r3, r3, #1
 80019ba:	b29a      	uxth	r2, r3
 80019bc:	8c3b      	ldrh	r3, [r7, #32]
 80019be:	4413      	add	r3, r2
 80019c0:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 80019c2:	893b      	ldrh	r3, [r7, #8]
 80019c4:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	68f8      	ldr	r0, [r7, #12]
 80019cc:	4798      	blx	r3
 80019ce:	4603      	mov	r3, r0
 80019d0:	461a      	mov	r2, r3
 80019d2:	8afb      	ldrh	r3, [r7, #22]
 80019d4:	4413      	add	r3, r2
 80019d6:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 80019d8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019dc:	b29b      	uxth	r3, r3
 80019de:	8afa      	ldrh	r2, [r7, #22]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 80019e4:	8afa      	ldrh	r2, [r7, #22]
 80019e6:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 80019ec:	8afa      	ldrh	r2, [r7, #22]
 80019ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 80019f4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80019f8:	b21a      	sxth	r2, r3
 80019fa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80019fe:	b21b      	sxth	r3, r3
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	b21b      	sxth	r3, r3
 8001a04:	b29a      	uxth	r2, r3
 8001a06:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001a08:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001a0a:	440b      	add	r3, r1
 8001a0c:	b29b      	uxth	r3, r3
 8001a0e:	005b      	lsls	r3, r3, #1
 8001a10:	b29b      	uxth	r3, r3
 8001a12:	4413      	add	r3, r2
 8001a14:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 8001a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d067      	beq.n	8001aec <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 8001a1c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a1e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d109      	bne.n	8001a38 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 8001a24:	7f7b      	ldrb	r3, [r7, #29]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	bf0c      	ite	eq
 8001a2a:	2301      	moveq	r3, #1
 8001a2c:	2300      	movne	r3, #0
 8001a2e:	b2db      	uxtb	r3, r3
 8001a30:	4619      	mov	r1, r3
 8001a32:	68f8      	ldr	r0, [r7, #12]
 8001a34:	f001 f90a 	bl	8002c4c <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 8001a38:	8b38      	ldrh	r0, [r7, #24]
 8001a3a:	8afa      	ldrh	r2, [r7, #22]
 8001a3c:	8b79      	ldrh	r1, [r7, #26]
 8001a3e:	8abb      	ldrh	r3, [r7, #20]
 8001a40:	9300      	str	r3, [sp, #0]
 8001a42:	4603      	mov	r3, r0
 8001a44:	68f8      	ldr	r0, [r7, #12]
 8001a46:	f7ff fe43 	bl	80016d0 <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001a4a:	7f7b      	ldrb	r3, [r7, #29]
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	68f8      	ldr	r0, [r7, #12]
 8001a50:	f001 f8fc 	bl	8002c4c <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 8001a54:	88fb      	ldrh	r3, [r7, #6]
 8001a56:	f003 0318 	and.w	r3, r3, #24
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d042      	beq.n	8001ae4 <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 8001a5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001a60:	88fb      	ldrh	r3, [r7, #6]
 8001a62:	f003 0307 	and.w	r3, r3, #7
 8001a66:	429a      	cmp	r2, r3
 8001a68:	d13c      	bne.n	8001ae4 <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 8001a6a:	88fb      	ldrh	r3, [r7, #6]
 8001a6c:	10db      	asrs	r3, r3, #3
 8001a6e:	b29b      	uxth	r3, r3
 8001a70:	f003 0303 	and.w	r3, r3, #3
 8001a74:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 8001a76:	8a7b      	ldrh	r3, [r7, #18]
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	847b      	strh	r3, [r7, #34]	; 0x22
 8001a80:	e02c      	b.n	8001adc <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 8001a82:	8b7a      	ldrh	r2, [r7, #26]
 8001a84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a86:	4413      	add	r3, r2
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	8a7b      	ldrh	r3, [r7, #18]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	b299      	uxth	r1, r3
 8001a90:	8afa      	ldrh	r2, [r7, #22]
 8001a92:	8abb      	ldrh	r3, [r7, #20]
 8001a94:	4413      	add	r3, r2
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001a9a:	4413      	add	r3, r2
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	8a7b      	ldrh	r3, [r7, #18]
 8001aa0:	4413      	add	r3, r2
 8001aa2:	b29a      	uxth	r2, r3
 8001aa4:	8b3b      	ldrh	r3, [r7, #24]
 8001aa6:	68f8      	ldr	r0, [r7, #12]
 8001aa8:	f001 f86b 	bl	8002b82 <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 8001aac:	8b7a      	ldrh	r2, [r7, #26]
 8001aae:	8b3b      	ldrh	r3, [r7, #24]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b29a      	uxth	r2, r3
 8001ab4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ab6:	4413      	add	r3, r2
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	8a7b      	ldrh	r3, [r7, #18]
 8001abc:	4413      	add	r3, r2
 8001abe:	b299      	uxth	r1, r3
 8001ac0:	8afa      	ldrh	r2, [r7, #22]
 8001ac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ac4:	4413      	add	r3, r2
 8001ac6:	b29a      	uxth	r2, r3
 8001ac8:	8a7b      	ldrh	r3, [r7, #18]
 8001aca:	4413      	add	r3, r2
 8001acc:	b29a      	uxth	r2, r3
 8001ace:	8abb      	ldrh	r3, [r7, #20]
 8001ad0:	68f8      	ldr	r0, [r7, #12]
 8001ad2:	f001 f86f 	bl	8002bb4 <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 8001ad6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001ad8:	3301      	adds	r3, #1
 8001ada:	847b      	strh	r3, [r7, #34]	; 0x22
 8001adc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001ade:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d3ce      	bcc.n	8001a82 <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 8001ae4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001ae6:	3b01      	subs	r3, #1
 8001ae8:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 8001aea:	e757      	b.n	800199c <u8g2_DrawButtonFrame+0x5c>
      break;
 8001aec:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 8001aee:	88fb      	ldrh	r3, [r7, #6]
 8001af0:	f003 0320 	and.w	r3, r3, #32
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d011      	beq.n	8001b1c <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 8001af8:	2102      	movs	r1, #2
 8001afa:	68f8      	ldr	r0, [r7, #12]
 8001afc:	f001 f8a6 	bl	8002c4c <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 8001b00:	8b38      	ldrh	r0, [r7, #24]
 8001b02:	8afa      	ldrh	r2, [r7, #22]
 8001b04:	8b79      	ldrh	r1, [r7, #26]
 8001b06:	8abb      	ldrh	r3, [r7, #20]
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f7ff fda9 	bl	8001664 <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001b12:	7f7b      	ldrb	r3, [r7, #29]
 8001b14:	4619      	mov	r1, r3
 8001b16:	68f8      	ldr	r0, [r7, #12]
 8001b18:	f001 f898 	bl	8002c4c <u8g2_SetDrawColor>
  }
}
 8001b1c:	bf00      	nop
 8001b1e:	3728      	adds	r7, #40	; 0x28
 8001b20:	46bd      	mov	sp, r7
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b08a      	sub	sp, #40	; 0x28
 8001b28:	af04      	add	r7, sp, #16
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	4608      	mov	r0, r1
 8001b2e:	4611      	mov	r1, r2
 8001b30:	461a      	mov	r2, r3
 8001b32:	4603      	mov	r3, r0
 8001b34:	817b      	strh	r3, [r7, #10]
 8001b36:	460b      	mov	r3, r1
 8001b38:	813b      	strh	r3, [r7, #8]
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 8001b3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001b40:	68f8      	ldr	r0, [r7, #12]
 8001b42:	f000 ff11 	bl	8002968 <u8g2_GetUTF8Width>
 8001b46:	4603      	mov	r3, r0
 8001b48:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 8001b4e:	88fb      	ldrh	r3, [r7, #6]
 8001b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d009      	beq.n	8001b6c <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 8001b58:	8afb      	ldrh	r3, [r7, #22]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	0fda      	lsrs	r2, r3, #31
 8001b5e:	4413      	add	r3, r2
 8001b60:	105b      	asrs	r3, r3, #1
 8001b62:	425b      	negs	r3, r3
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	897b      	ldrh	r3, [r7, #10]
 8001b68:	4413      	add	r3, r2
 8001b6a:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 8001b6c:	8afa      	ldrh	r2, [r7, #22]
 8001b6e:	8c3b      	ldrh	r3, [r7, #32]
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d20d      	bcs.n	8001b90 <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 8001b74:	88fb      	ldrh	r3, [r7, #6]
 8001b76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 8001b7e:	8c3a      	ldrh	r2, [r7, #32]
 8001b80:	8afb      	ldrh	r3, [r7, #22]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	0fda      	lsrs	r2, r3, #31
 8001b86:	4413      	add	r3, r2
 8001b88:	105b      	asrs	r3, r3, #1
 8001b8a:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 8001b8c:	8c3b      	ldrh	r3, [r7, #32]
 8001b8e:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 8001b90:	2101      	movs	r1, #1
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f000 fcda 	bl	800254c <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8001b98:	893a      	ldrh	r2, [r7, #8]
 8001b9a:	8979      	ldrh	r1, [r7, #10]
 8001b9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001b9e:	68f8      	ldr	r0, [r7, #12]
 8001ba0:	f000 fd92 	bl	80026c8 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 8001ba4:	897a      	ldrh	r2, [r7, #10]
 8001ba6:	8abb      	ldrh	r3, [r7, #20]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	b299      	uxth	r1, r3
 8001bac:	88f8      	ldrh	r0, [r7, #6]
 8001bae:	893a      	ldrh	r2, [r7, #8]
 8001bb0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bb2:	9302      	str	r3, [sp, #8]
 8001bb4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bb6:	9301      	str	r3, [sp, #4]
 8001bb8:	8afb      	ldrh	r3, [r7, #22]
 8001bba:	9300      	str	r3, [sp, #0]
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	68f8      	ldr	r0, [r7, #12]
 8001bc0:	f7ff febe 	bl	8001940 <u8g2_DrawButtonFrame>
  
}
 8001bc4:	bf00      	nop
 8001bc6:	3718      	adds	r7, #24
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}

08001bcc <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8001bd4:	6878      	ldr	r0, [r7, #4]
 8001bd6:	f7ff fe71 	bl	80018bc <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff fe82 	bl	80018e4 <u8g2_NextPage>
 8001be0:	4603      	mov	r3, r0
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d1f9      	bne.n	8001bda <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8001be6:	2100      	movs	r1, #0
 8001be8:	6878      	ldr	r0, [r7, #4]
 8001bea:	f7ff fe4f 	bl	800188c <u8g2_SetBufferCurrTileRow>
}
 8001bee:	bf00      	nop
 8001bf0:	3708      	adds	r7, #8
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
	...

08001bf8 <u8g2_m_24_8_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_24_8_f(uint8_t *page_cnt)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	b083      	sub	sp, #12
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1536];
  *page_cnt = 8;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2208      	movs	r2, #8
 8001c04:	701a      	strb	r2, [r3, #0]
  return buf;
 8001c06:	4b03      	ldr	r3, [pc, #12]	; (8001c14 <u8g2_m_24_8_f+0x1c>)
  #endif
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bc80      	pop	{r7}
 8001c10:	4770      	bx	lr
 8001c12:	bf00      	nop
 8001c14:	20000514 	.word	0x20000514

08001c18 <u8g2_Setup_uc1604_jlx19264_f>:
  buf = u8g2_m_24_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* uc1604 f */
void u8g2_Setup_uc1604_jlx19264_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b088      	sub	sp, #32
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	60f8      	str	r0, [r7, #12]
 8001c20:	60b9      	str	r1, [r7, #8]
 8001c22:	607a      	str	r2, [r7, #4]
 8001c24:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_uc1604_jlx19264, u8x8_cad_001, byte_cb, gpio_and_delay_cb);
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	9300      	str	r3, [sp, #0]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a0b      	ldr	r2, [pc, #44]	; (8001c5c <u8g2_Setup_uc1604_jlx19264_f+0x44>)
 8001c2e:	490c      	ldr	r1, [pc, #48]	; (8001c60 <u8g2_Setup_uc1604_jlx19264_f+0x48>)
 8001c30:	68f8      	ldr	r0, [r7, #12]
 8001c32:	f001 fe89 	bl	8003948 <u8x8_Setup>
  buf = u8g2_m_24_8_f(&tile_buf_height);
 8001c36:	f107 0313 	add.w	r3, r7, #19
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f7ff ffdc 	bl	8001bf8 <u8g2_m_24_8_f>
 8001c40:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001c42:	7cfa      	ldrb	r2, [r7, #19]
 8001c44:	68bb      	ldr	r3, [r7, #8]
 8001c46:	9300      	str	r3, [sp, #0]
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <u8g2_Setup_uc1604_jlx19264_f+0x4c>)
 8001c4a:	6979      	ldr	r1, [r7, #20]
 8001c4c:	68f8      	ldr	r0, [r7, #12]
 8001c4e:	f001 f92f 	bl	8002eb0 <u8g2_SetupBuffer>
}
 8001c52:	bf00      	nop
 8001c54:	3718      	adds	r7, #24
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	080034e1 	.word	0x080034e1
 8001c60:	080036c1 	.word	0x080036c1
 8001c64:	08002d35 	.word	0x08002d35

08001c68 <u8g2_font_get_byte>:
/*========================================================================*/
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) {
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	70fb      	strb	r3, [r7, #3]
	font += offset;
 8001c74:	78fb      	ldrb	r3, [r7, #3]
 8001c76:	687a      	ldr	r2, [r7, #4]
 8001c78:	4413      	add	r3, r2
 8001c7a:	607b      	str	r3, [r7, #4]
	return u8x8_pgm_read(font);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	781b      	ldrb	r3, [r3, #0]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	370c      	adds	r7, #12
 8001c84:	46bd      	mov	sp, r7
 8001c86:	bc80      	pop	{r7}
 8001c88:	4770      	bx	lr

08001c8a <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) {
 8001c8a:	b480      	push	{r7}
 8001c8c:	b085      	sub	sp, #20
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	460b      	mov	r3, r1
 8001c94:	70fb      	strb	r3, [r7, #3]
	uint16_t pos;
	font += offset;
 8001c96:	78fb      	ldrb	r3, [r7, #3]
 8001c98:	687a      	ldr	r2, [r7, #4]
 8001c9a:	4413      	add	r3, r2
 8001c9c:	607b      	str	r3, [r7, #4]
	pos = u8x8_pgm_read(font);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	81fb      	strh	r3, [r7, #14]
	font++;
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	3301      	adds	r3, #1
 8001ca8:	607b      	str	r3, [r7, #4]
	pos <<= 8;
 8001caa:	89fb      	ldrh	r3, [r7, #14]
 8001cac:	021b      	lsls	r3, r3, #8
 8001cae:	81fb      	strh	r3, [r7, #14]
	pos += u8x8_pgm_read(font);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	b29a      	uxth	r2, r3
 8001cb6:	89fb      	ldrh	r3, [r7, #14]
 8001cb8:	4413      	add	r3, r2
 8001cba:	81fb      	strh	r3, [r7, #14]
	return pos;
 8001cbc:	89fb      	ldrh	r3, [r7, #14]
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3714      	adds	r7, #20
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font) {
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b082      	sub	sp, #8
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
	/* offset 0 */
	font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001cd2:	2100      	movs	r1, #0
 8001cd4:	6838      	ldr	r0, [r7, #0]
 8001cd6:	f7ff ffc7 	bl	8001c68 <u8g2_font_get_byte>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	461a      	mov	r2, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	701a      	strb	r2, [r3, #0]
	font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 8001ce2:	2101      	movs	r1, #1
 8001ce4:	6838      	ldr	r0, [r7, #0]
 8001ce6:	f7ff ffbf 	bl	8001c68 <u8g2_font_get_byte>
 8001cea:	4603      	mov	r3, r0
 8001cec:	461a      	mov	r2, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	705a      	strb	r2, [r3, #1]
	font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 8001cf2:	2102      	movs	r1, #2
 8001cf4:	6838      	ldr	r0, [r7, #0]
 8001cf6:	f7ff ffb7 	bl	8001c68 <u8g2_font_get_byte>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	709a      	strb	r2, [r3, #2]
	font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 8001d02:	2103      	movs	r1, #3
 8001d04:	6838      	ldr	r0, [r7, #0]
 8001d06:	f7ff ffaf 	bl	8001c68 <u8g2_font_get_byte>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	70da      	strb	r2, [r3, #3]

	/* offset 4 */
	font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 8001d12:	2104      	movs	r1, #4
 8001d14:	6838      	ldr	r0, [r7, #0]
 8001d16:	f7ff ffa7 	bl	8001c68 <u8g2_font_get_byte>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	711a      	strb	r2, [r3, #4]
	font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 8001d22:	2105      	movs	r1, #5
 8001d24:	6838      	ldr	r0, [r7, #0]
 8001d26:	f7ff ff9f 	bl	8001c68 <u8g2_font_get_byte>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	461a      	mov	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	715a      	strb	r2, [r3, #5]
	font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 8001d32:	2106      	movs	r1, #6
 8001d34:	6838      	ldr	r0, [r7, #0]
 8001d36:	f7ff ff97 	bl	8001c68 <u8g2_font_get_byte>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	461a      	mov	r2, r3
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	719a      	strb	r2, [r3, #6]
	font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001d42:	2107      	movs	r1, #7
 8001d44:	6838      	ldr	r0, [r7, #0]
 8001d46:	f7ff ff8f 	bl	8001c68 <u8g2_font_get_byte>
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	71da      	strb	r2, [r3, #7]
	font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001d52:	2108      	movs	r1, #8
 8001d54:	6838      	ldr	r0, [r7, #0]
 8001d56:	f7ff ff87 	bl	8001c68 <u8g2_font_get_byte>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	721a      	strb	r2, [r3, #8]

	/* offset 9 */
	font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001d62:	2109      	movs	r1, #9
 8001d64:	6838      	ldr	r0, [r7, #0]
 8001d66:	f7ff ff7f 	bl	8001c68 <u8g2_font_get_byte>
 8001d6a:	4603      	mov	r3, r0
 8001d6c:	b25a      	sxtb	r2, r3
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	725a      	strb	r2, [r3, #9]
	font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001d72:	210a      	movs	r1, #10
 8001d74:	6838      	ldr	r0, [r7, #0]
 8001d76:	f7ff ff77 	bl	8001c68 <u8g2_font_get_byte>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b25a      	sxtb	r2, r3
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	729a      	strb	r2, [r3, #10]
	font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001d82:	210b      	movs	r1, #11
 8001d84:	6838      	ldr	r0, [r7, #0]
 8001d86:	f7ff ff6f 	bl	8001c68 <u8g2_font_get_byte>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	b25a      	sxtb	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	72da      	strb	r2, [r3, #11]
	font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001d92:	210c      	movs	r1, #12
 8001d94:	6838      	ldr	r0, [r7, #0]
 8001d96:	f7ff ff67 	bl	8001c68 <u8g2_font_get_byte>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	b25a      	sxtb	r2, r3
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	731a      	strb	r2, [r3, #12]

	/* offset 13 */
	font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001da2:	210d      	movs	r1, #13
 8001da4:	6838      	ldr	r0, [r7, #0]
 8001da6:	f7ff ff5f 	bl	8001c68 <u8g2_font_get_byte>
 8001daa:	4603      	mov	r3, r0
 8001dac:	b25a      	sxtb	r2, r3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	735a      	strb	r2, [r3, #13]
	font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001db2:	210e      	movs	r1, #14
 8001db4:	6838      	ldr	r0, [r7, #0]
 8001db6:	f7ff ff57 	bl	8001c68 <u8g2_font_get_byte>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	b25a      	sxtb	r2, r3
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	739a      	strb	r2, [r3, #14]
	font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	6838      	ldr	r0, [r7, #0]
 8001dc6:	f7ff ff4f 	bl	8001c68 <u8g2_font_get_byte>
 8001dca:	4603      	mov	r3, r0
 8001dcc:	b25a      	sxtb	r2, r3
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	73da      	strb	r2, [r3, #15]
	font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001dd2:	2110      	movs	r1, #16
 8001dd4:	6838      	ldr	r0, [r7, #0]
 8001dd6:	f7ff ff47 	bl	8001c68 <u8g2_font_get_byte>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	b25a      	sxtb	r2, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	741a      	strb	r2, [r3, #16]

	/* offset 17 */
	font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 8001de2:	2111      	movs	r1, #17
 8001de4:	6838      	ldr	r0, [r7, #0]
 8001de6:	f7ff ff50 	bl	8001c8a <u8g2_font_get_word>
 8001dea:	4603      	mov	r3, r0
 8001dec:	461a      	mov	r2, r3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	825a      	strh	r2, [r3, #18]
	font_info->start_pos_lower_a = u8g2_font_get_word(font, 19);
 8001df2:	2113      	movs	r1, #19
 8001df4:	6838      	ldr	r0, [r7, #0]
 8001df6:	f7ff ff48 	bl	8001c8a <u8g2_font_get_word>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	829a      	strh	r2, [r3, #20]

	/* offset 21 */
#ifdef U8G2_WITH_UNICODE
	font_info->start_pos_unicode = u8g2_font_get_word(font, 21);
 8001e02:	2115      	movs	r1, #21
 8001e04:	6838      	ldr	r0, [r7, #0]
 8001e06:	f7ff ff40 	bl	8001c8a <u8g2_font_get_word>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	461a      	mov	r2, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	82da      	strh	r2, [r3, #22]
#endif
}
 8001e12:	bf00      	nop
 8001e14:	3708      	adds	r7, #8
 8001e16:	46bd      	mov	sp, r7
 8001e18:	bd80      	pop	{r7, pc}

08001e1a <u8g2_font_decode_get_unsigned_bits>:

/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	460b      	mov	r3, r1
 8001e24:	70fb      	strb	r3, [r7, #3]
	uint8_t val;
	uint8_t bit_pos = f->decode_bit_pos;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	7b1b      	ldrb	r3, [r3, #12]
 8001e2a:	737b      	strb	r3, [r7, #13]
	uint8_t bit_pos_plus_cnt;

	//val = *(f->decode_ptr);
	val = u8x8_pgm_read(f->decode_ptr);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	781b      	ldrb	r3, [r3, #0]
 8001e32:	73fb      	strb	r3, [r7, #15]

	val >>= bit_pos;
 8001e34:	7bfa      	ldrb	r2, [r7, #15]
 8001e36:	7b7b      	ldrb	r3, [r7, #13]
 8001e38:	fa42 f303 	asr.w	r3, r2, r3
 8001e3c:	73fb      	strb	r3, [r7, #15]
	bit_pos_plus_cnt = bit_pos;
 8001e3e:	7b7b      	ldrb	r3, [r7, #13]
 8001e40:	73bb      	strb	r3, [r7, #14]
	bit_pos_plus_cnt += cnt;
 8001e42:	7bba      	ldrb	r2, [r7, #14]
 8001e44:	78fb      	ldrb	r3, [r7, #3]
 8001e46:	4413      	add	r3, r2
 8001e48:	73bb      	strb	r3, [r7, #14]
	if (bit_pos_plus_cnt >= 8) {
 8001e4a:	7bbb      	ldrb	r3, [r7, #14]
 8001e4c:	2b07      	cmp	r3, #7
 8001e4e:	d91a      	bls.n	8001e86 <u8g2_font_decode_get_unsigned_bits+0x6c>
		uint8_t s = 8;
 8001e50:	2308      	movs	r3, #8
 8001e52:	733b      	strb	r3, [r7, #12]
		s -= bit_pos;
 8001e54:	7b3a      	ldrb	r2, [r7, #12]
 8001e56:	7b7b      	ldrb	r3, [r7, #13]
 8001e58:	1ad3      	subs	r3, r2, r3
 8001e5a:	733b      	strb	r3, [r7, #12]
		f->decode_ptr++;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	1c5a      	adds	r2, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
		//val |= *(f->decode_ptr) << (8-bit_pos);
		val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	781b      	ldrb	r3, [r3, #0]
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	7b3b      	ldrb	r3, [r7, #12]
 8001e70:	fa02 f303 	lsl.w	r3, r2, r3
 8001e74:	b25a      	sxtb	r2, r3
 8001e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	b25b      	sxtb	r3, r3
 8001e7e:	73fb      	strb	r3, [r7, #15]
		//bit_pos -= 8;
		bit_pos_plus_cnt -= 8;
 8001e80:	7bbb      	ldrb	r3, [r7, #14]
 8001e82:	3b08      	subs	r3, #8
 8001e84:	73bb      	strb	r3, [r7, #14]
	}
	val &= (1U << cnt) - 1;
 8001e86:	78fb      	ldrb	r3, [r7, #3]
 8001e88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001e8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	73fb      	strb	r3, [r7, #15]
	//bit_pos += cnt;

	f->decode_bit_pos = bit_pos_plus_cnt;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	7bba      	ldrb	r2, [r7, #14]
 8001ea0:	731a      	strb	r2, [r3, #12]
	return val;
 8001ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr

08001eae <u8g2_font_decode_get_signed_bits>:
 else
 r = bits(x)+1;

 */
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt) {
 8001eae:	b580      	push	{r7, lr}
 8001eb0:	b084      	sub	sp, #16
 8001eb2:	af00      	add	r7, sp, #0
 8001eb4:	6078      	str	r0, [r7, #4]
 8001eb6:	460b      	mov	r3, r1
 8001eb8:	70fb      	strb	r3, [r7, #3]
	int8_t v, d;
	v = (int8_t) u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001eba:	78fb      	ldrb	r3, [r7, #3]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f7ff ffab 	bl	8001e1a <u8g2_font_decode_get_unsigned_bits>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	73fb      	strb	r3, [r7, #15]
	d = 1;
 8001ec8:	2301      	movs	r3, #1
 8001eca:	73bb      	strb	r3, [r7, #14]
	cnt--;
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	3b01      	subs	r3, #1
 8001ed0:	70fb      	strb	r3, [r7, #3]
	d <<= cnt;
 8001ed2:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001ed6:	78fb      	ldrb	r3, [r7, #3]
 8001ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8001edc:	73bb      	strb	r3, [r7, #14]
	v -= d;
 8001ede:	7bfa      	ldrb	r2, [r7, #15]
 8001ee0:	7bbb      	ldrb	r3, [r7, #14]
 8001ee2:	1ad3      	subs	r3, r2, r3
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	73fb      	strb	r3, [r7, #15]
	return v;
 8001ee8:	f997 300f 	ldrsb.w	r3, [r7, #15]
	//return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	3710      	adds	r7, #16
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <u8g2_add_vector_y>:

#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir) {
 8001ef4:	b490      	push	{r4, r7}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	4604      	mov	r4, r0
 8001efc:	4608      	mov	r0, r1
 8001efe:	4611      	mov	r1, r2
 8001f00:	461a      	mov	r2, r3
 8001f02:	4623      	mov	r3, r4
 8001f04:	80fb      	strh	r3, [r7, #6]
 8001f06:	4603      	mov	r3, r0
 8001f08:	717b      	strb	r3, [r7, #5]
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	713b      	strb	r3, [r7, #4]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001f12:	78fb      	ldrb	r3, [r7, #3]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d014      	beq.n	8001f42 <u8g2_add_vector_y+0x4e>
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	dc19      	bgt.n	8001f50 <u8g2_add_vector_y+0x5c>
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d002      	beq.n	8001f26 <u8g2_add_vector_y+0x32>
 8001f20:	2b01      	cmp	r3, #1
 8001f22:	d007      	beq.n	8001f34 <u8g2_add_vector_y+0x40>
 8001f24:	e014      	b.n	8001f50 <u8g2_add_vector_y+0x5c>
	case 0:
		dy += y;
 8001f26:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001f2a:	b29a      	uxth	r2, r3
 8001f2c:	88fb      	ldrh	r3, [r7, #6]
 8001f2e:	4413      	add	r3, r2
 8001f30:	80fb      	strh	r3, [r7, #6]
		break;
 8001f32:	e014      	b.n	8001f5e <u8g2_add_vector_y+0x6a>
	case 1:
		dy += x;
 8001f34:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f38:	b29a      	uxth	r2, r3
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	4413      	add	r3, r2
 8001f3e:	80fb      	strh	r3, [r7, #6]
		break;
 8001f40:	e00d      	b.n	8001f5e <u8g2_add_vector_y+0x6a>
	case 2:
		dy -= y;
 8001f42:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001f46:	b29b      	uxth	r3, r3
 8001f48:	88fa      	ldrh	r2, [r7, #6]
 8001f4a:	1ad3      	subs	r3, r2, r3
 8001f4c:	80fb      	strh	r3, [r7, #6]
		break;
 8001f4e:	e006      	b.n	8001f5e <u8g2_add_vector_y+0x6a>
	default:
		dy -= x;
 8001f50:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	88fa      	ldrh	r2, [r7, #6]
 8001f58:	1ad3      	subs	r3, r2, r3
 8001f5a:	80fb      	strh	r3, [r7, #6]
		break;
 8001f5c:	bf00      	nop
	}
	return dy;
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3708      	adds	r7, #8
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc90      	pop	{r4, r7}
 8001f68:	4770      	bx	lr

08001f6a <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir) {
 8001f6a:	b490      	push	{r4, r7}
 8001f6c:	b082      	sub	sp, #8
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	4604      	mov	r4, r0
 8001f72:	4608      	mov	r0, r1
 8001f74:	4611      	mov	r1, r2
 8001f76:	461a      	mov	r2, r3
 8001f78:	4623      	mov	r3, r4
 8001f7a:	80fb      	strh	r3, [r7, #6]
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	717b      	strb	r3, [r7, #5]
 8001f80:	460b      	mov	r3, r1
 8001f82:	713b      	strb	r3, [r7, #4]
 8001f84:	4613      	mov	r3, r2
 8001f86:	70fb      	strb	r3, [r7, #3]
	switch (dir) {
 8001f88:	78fb      	ldrb	r3, [r7, #3]
 8001f8a:	2b02      	cmp	r3, #2
 8001f8c:	d014      	beq.n	8001fb8 <u8g2_add_vector_x+0x4e>
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	dc19      	bgt.n	8001fc6 <u8g2_add_vector_x+0x5c>
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <u8g2_add_vector_x+0x32>
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d007      	beq.n	8001faa <u8g2_add_vector_x+0x40>
 8001f9a:	e014      	b.n	8001fc6 <u8g2_add_vector_x+0x5c>
	case 0:
		dx += x;
 8001f9c:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001fa0:	b29a      	uxth	r2, r3
 8001fa2:	88fb      	ldrh	r3, [r7, #6]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	80fb      	strh	r3, [r7, #6]
		break;
 8001fa8:	e014      	b.n	8001fd4 <u8g2_add_vector_x+0x6a>
	case 1:
		dx -= y;
 8001faa:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	88fa      	ldrh	r2, [r7, #6]
 8001fb2:	1ad3      	subs	r3, r2, r3
 8001fb4:	80fb      	strh	r3, [r7, #6]
		break;
 8001fb6:	e00d      	b.n	8001fd4 <u8g2_add_vector_x+0x6a>
	case 2:
		dx -= x;
 8001fb8:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001fbc:	b29b      	uxth	r3, r3
 8001fbe:	88fa      	ldrh	r2, [r7, #6]
 8001fc0:	1ad3      	subs	r3, r2, r3
 8001fc2:	80fb      	strh	r3, [r7, #6]
		break;
 8001fc4:	e006      	b.n	8001fd4 <u8g2_add_vector_x+0x6a>
	default:
		dx += y;
 8001fc6:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001fca:	b29a      	uxth	r2, r3
 8001fcc:	88fb      	ldrh	r3, [r7, #6]
 8001fce:	4413      	add	r3, r2
 8001fd0:	80fb      	strh	r3, [r7, #6]
		break;
 8001fd2:	bf00      	nop
	}
	return dx;
 8001fd4:	88fb      	ldrh	r3, [r7, #6]
}
 8001fd6:	4618      	mov	r0, r3
 8001fd8:	3708      	adds	r7, #8
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bc90      	pop	{r4, r7}
 8001fde:	4770      	bx	lr

08001fe0 <u8g2_font_decode_len>:
 u8g2_Draw90Line()
 Called by:
 u8g2_font_decode_glyph()
 */
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground) {
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b088      	sub	sp, #32
 8001fe4:	af02      	add	r7, sp, #8
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	460b      	mov	r3, r1
 8001fea:	70fb      	strb	r3, [r7, #3]
 8001fec:	4613      	mov	r3, r2
 8001fee:	70bb      	strb	r3, [r7, #2]
	uint8_t lx, ly;

	/* target position on the screen */
	u8g2_uint_t x, y;

	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	3360      	adds	r3, #96	; 0x60
 8001ff4:	613b      	str	r3, [r7, #16]

	cnt = len;
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	75fb      	strb	r3, [r7, #23]

	/* get the local position */
	lx = decode->x;
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8002000:	757b      	strb	r3, [r7, #21]
	ly = decode->y;
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8002008:	753b      	strb	r3, [r7, #20]

	for (;;) {
		/* calculate the number of pixel to the right edge of the glyph */
		rem = decode->glyph_width;
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002010:	73fb      	strb	r3, [r7, #15]
		rem -= lx;
 8002012:	7bfa      	ldrb	r2, [r7, #15]
 8002014:	7d7b      	ldrb	r3, [r7, #21]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	73fb      	strb	r3, [r7, #15]

		/* calculate how many pixel to draw. This is either to the right edge */
		/* or lesser, if not enough pixel are left */
		current = rem;
 800201a:	7bfb      	ldrb	r3, [r7, #15]
 800201c:	75bb      	strb	r3, [r7, #22]
		if (cnt < rem)
 800201e:	7dfa      	ldrb	r2, [r7, #23]
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	429a      	cmp	r2, r3
 8002024:	d201      	bcs.n	800202a <u8g2_font_decode_len+0x4a>
			current = cnt;
 8002026:	7dfb      	ldrb	r3, [r7, #23]
 8002028:	75bb      	strb	r3, [r7, #22]

		/* now draw the line, but apply the rotation around the glyph target position */
		//u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);
		/* get target position */
		x = decode->target_x;
 800202a:	693b      	ldr	r3, [r7, #16]
 800202c:	889b      	ldrh	r3, [r3, #4]
 800202e:	81bb      	strh	r3, [r7, #12]
		y = decode->target_y;
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	88db      	ldrh	r3, [r3, #6]
 8002034:	817b      	strh	r3, [r7, #10]

		/* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION

		x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8002036:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800203a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	7c1b      	ldrb	r3, [r3, #16]
 8002042:	89b8      	ldrh	r0, [r7, #12]
 8002044:	f7ff ff91 	bl	8001f6a <u8g2_add_vector_x>
 8002048:	4603      	mov	r3, r0
 800204a:	81bb      	strh	r3, [r7, #12]
		y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800204c:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8002050:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8002054:	693b      	ldr	r3, [r7, #16]
 8002056:	7c1b      	ldrb	r3, [r3, #16]
 8002058:	8978      	ldrh	r0, [r7, #10]
 800205a:	f7ff ff4b 	bl	8001ef4 <u8g2_add_vector_y>
 800205e:	4603      	mov	r3, r0
 8002060:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif

		/* draw foreground and background (if required) */
		if (is_foreground) {
 8002062:	78bb      	ldrb	r3, [r7, #2]
 8002064:	2b00      	cmp	r3, #0
 8002066:	d010      	beq.n	800208a <u8g2_font_decode_len+0xaa>
			u8g2->draw_color = decode->fg_color; /* draw_color will be restored later */
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	7b9a      	ldrb	r2, [r3, #14]
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 8002072:	7dbb      	ldrb	r3, [r7, #22]
 8002074:	b298      	uxth	r0, r3
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	7c1b      	ldrb	r3, [r3, #16]
 800207a:	897a      	ldrh	r2, [r7, #10]
 800207c:	89b9      	ldrh	r1, [r7, #12]
 800207e:	9300      	str	r3, [sp, #0]
 8002080:	4603      	mov	r3, r0
 8002082:	6878      	ldr	r0, [r7, #4]
 8002084:	f000 fcf2 	bl	8002a6c <u8g2_DrawHVLine>
 8002088:	e013      	b.n	80020b2 <u8g2_font_decode_len+0xd2>
					/* dir */decode->dir
#else
	0
#endif
					);
		} else if (decode->is_transparent == 0) {
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	7b5b      	ldrb	r3, [r3, #13]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d10f      	bne.n	80020b2 <u8g2_font_decode_len+0xd2>
			u8g2->draw_color = decode->bg_color; /* draw_color will be restored later */
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	7bda      	ldrb	r2, [r3, #15]
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
			u8g2_DrawHVLine(u8g2, x, y, current,
 800209c:	7dbb      	ldrb	r3, [r7, #22]
 800209e:	b298      	uxth	r0, r3
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	7c1b      	ldrb	r3, [r3, #16]
 80020a4:	897a      	ldrh	r2, [r7, #10]
 80020a6:	89b9      	ldrh	r1, [r7, #12]
 80020a8:	9300      	str	r3, [sp, #0]
 80020aa:	4603      	mov	r3, r0
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f000 fcdd 	bl	8002a6c <u8g2_DrawHVLine>
#endif
					);
		}

		/* check, whether the end of the run length code has been reached */
		if (cnt < rem)
 80020b2:	7dfa      	ldrb	r2, [r7, #23]
 80020b4:	7bfb      	ldrb	r3, [r7, #15]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d309      	bcc.n	80020ce <u8g2_font_decode_len+0xee>
			break;
		cnt -= rem;
 80020ba:	7dfa      	ldrb	r2, [r7, #23]
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	75fb      	strb	r3, [r7, #23]
		lx = 0;
 80020c2:	2300      	movs	r3, #0
 80020c4:	757b      	strb	r3, [r7, #21]
		ly++;
 80020c6:	7d3b      	ldrb	r3, [r7, #20]
 80020c8:	3301      	adds	r3, #1
 80020ca:	753b      	strb	r3, [r7, #20]
		rem = decode->glyph_width;
 80020cc:	e79d      	b.n	800200a <u8g2_font_decode_len+0x2a>
			break;
 80020ce:	bf00      	nop
	}
	lx += cnt;
 80020d0:	7d7a      	ldrb	r2, [r7, #21]
 80020d2:	7dfb      	ldrb	r3, [r7, #23]
 80020d4:	4413      	add	r3, r2
 80020d6:	757b      	strb	r3, [r7, #21]

	decode->x = lx;
 80020d8:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	721a      	strb	r2, [r3, #8]
	decode->y = ly;
 80020e0:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	725a      	strb	r2, [r3, #9]

}
 80020e8:	bf00      	nop
 80020ea:	3718      	adds	r7, #24
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}

080020f0 <u8g2_font_setup_decode>:

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data) {
 80020f0:	b580      	push	{r7, lr}
 80020f2:	b084      	sub	sp, #16
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
 80020f8:	6039      	str	r1, [r7, #0]
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	3360      	adds	r3, #96	; 0x60
 80020fe:	60fb      	str	r3, [r7, #12]
	decode->decode_ptr = glyph_data;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	601a      	str	r2, [r3, #0]
	decode->decode_bit_pos = 0;
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	2200      	movs	r2, #0
 800210a:	731a      	strb	r2, [r3, #12]
	/*
	 decode->decode_ptr += 1;
	 decode->decode_ptr += 1;
	 */

	decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode,
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8002112:	4619      	mov	r1, r3
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	f7ff fe80 	bl	8001e1a <u8g2_font_decode_get_unsigned_bits>
 800211a:	4603      	mov	r3, r0
 800211c:	b25a      	sxtb	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	729a      	strb	r2, [r3, #10]
			u8g2->font_info.bits_per_char_width);
	decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8002128:	4619      	mov	r1, r3
 800212a:	68f8      	ldr	r0, [r7, #12]
 800212c:	f7ff fe75 	bl	8001e1a <u8g2_font_decode_get_unsigned_bits>
 8002130:	4603      	mov	r3, r0
 8002132:	b25a      	sxtb	r2, r3
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	72da      	strb	r2, [r3, #11]
			u8g2->font_info.bits_per_char_height);

	decode->fg_color = u8g2->draw_color;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	739a      	strb	r2, [r3, #14]
	decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	7b9b      	ldrb	r3, [r3, #14]
 8002146:	2b00      	cmp	r3, #0
 8002148:	bf0c      	ite	eq
 800214a:	2301      	moveq	r3, #1
 800214c:	2300      	movne	r3, #0
 800214e:	b2db      	uxtb	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	73da      	strb	r2, [r3, #15]
}
 8002156:	bf00      	nop
 8002158:	3710      	adds	r7, #16
 800215a:	46bd      	mov	sp, r7
 800215c:	bd80      	pop	{r7, pc}
	...

08002160 <u8g2_font_decode_glyph>:
 Width (delta x advance) of the glyph.
 Calls:
 u8g2_font_decode_len()
 */
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data) {
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	; 0x28
 8002164:	af02      	add	r7, sp, #8
 8002166:	6078      	str	r0, [r7, #4]
 8002168:	6039      	str	r1, [r7, #0]
	uint8_t a, b;
	int8_t x, y;
	int8_t d;
	int8_t h;
	u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	3360      	adds	r3, #96	; 0x60
 800216e:	617b      	str	r3, [r7, #20]

	u8g2_font_setup_decode(u8g2, glyph_data); /* set values in u8g2->font_decode data structure */
 8002170:	6839      	ldr	r1, [r7, #0]
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff ffbc 	bl	80020f0 <u8g2_font_setup_decode>
	h = u8g2->font_decode.glyph_height;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 800217e:	74fb      	strb	r3, [r7, #19]

	x = u8g2_font_decode_get_signed_bits(decode,
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002186:	4619      	mov	r1, r3
 8002188:	6978      	ldr	r0, [r7, #20]
 800218a:	f7ff fe90 	bl	8001eae <u8g2_font_decode_get_signed_bits>
 800218e:	4603      	mov	r3, r0
 8002190:	74bb      	strb	r3, [r7, #18]
			u8g2->font_info.bits_per_char_x);
	y = u8g2_font_decode_get_signed_bits(decode,
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002198:	4619      	mov	r1, r3
 800219a:	6978      	ldr	r0, [r7, #20]
 800219c:	f7ff fe87 	bl	8001eae <u8g2_font_decode_get_signed_bits>
 80021a0:	4603      	mov	r3, r0
 80021a2:	747b      	strb	r3, [r7, #17]
			u8g2->font_info.bits_per_char_y);
	d = u8g2_font_decode_get_signed_bits(decode,
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80021aa:	4619      	mov	r1, r3
 80021ac:	6978      	ldr	r0, [r7, #20]
 80021ae:	f7ff fe7e 	bl	8001eae <u8g2_font_decode_get_signed_bits>
 80021b2:	4603      	mov	r3, r0
 80021b4:	743b      	strb	r3, [r7, #16]
			u8g2->font_info.bits_per_delta_x);

	if (decode->glyph_width > 0) {
 80021b6:	697b      	ldr	r3, [r7, #20]
 80021b8:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f340 80d7 	ble.w	8002370 <u8g2_font_decode_glyph+0x210>
#ifdef U8G2_WITH_FONT_ROTATION
		decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h + y),
 80021c2:	697b      	ldr	r3, [r7, #20]
 80021c4:	8898      	ldrh	r0, [r3, #4]
 80021c6:	7cfa      	ldrb	r2, [r7, #19]
 80021c8:	7c7b      	ldrb	r3, [r7, #17]
 80021ca:	4413      	add	r3, r2
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	425b      	negs	r3, r3
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	b25a      	sxtb	r2, r3
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	7c1b      	ldrb	r3, [r3, #16]
 80021d8:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80021dc:	f7ff fec5 	bl	8001f6a <u8g2_add_vector_x>
 80021e0:	4603      	mov	r3, r0
 80021e2:	461a      	mov	r2, r3
 80021e4:	697b      	ldr	r3, [r7, #20]
 80021e6:	809a      	strh	r2, [r3, #4]
				decode->dir);
		decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h + y),
 80021e8:	697b      	ldr	r3, [r7, #20]
 80021ea:	88d8      	ldrh	r0, [r3, #6]
 80021ec:	7cfa      	ldrb	r2, [r7, #19]
 80021ee:	7c7b      	ldrb	r3, [r7, #17]
 80021f0:	4413      	add	r3, r2
 80021f2:	b2db      	uxtb	r3, r3
 80021f4:	425b      	negs	r3, r3
 80021f6:	b2db      	uxtb	r3, r3
 80021f8:	b25a      	sxtb	r2, r3
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	7c1b      	ldrb	r3, [r3, #16]
 80021fe:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8002202:	f7ff fe77 	bl	8001ef4 <u8g2_add_vector_y>
 8002206:	4603      	mov	r3, r0
 8002208:	461a      	mov	r2, r3
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	80da      	strh	r2, [r3, #6]
		//u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
		{
			u8g2_uint_t x0, x1, y0, y1;
			x0 = decode->target_x;
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	889b      	ldrh	r3, [r3, #4]
 8002212:	83fb      	strh	r3, [r7, #30]
			y0 = decode->target_y;
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	88db      	ldrh	r3, [r3, #6]
 8002218:	837b      	strh	r3, [r7, #26]
			x1 = x0;
 800221a:	8bfb      	ldrh	r3, [r7, #30]
 800221c:	83bb      	strh	r3, [r7, #28]
			y1 = y0;
 800221e:	8b7b      	ldrh	r3, [r7, #26]
 8002220:	833b      	strh	r3, [r7, #24]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (decode->dir) {
 8002222:	697b      	ldr	r3, [r7, #20]
 8002224:	7c1b      	ldrb	r3, [r3, #16]
 8002226:	2b03      	cmp	r3, #3
 8002228:	d85a      	bhi.n	80022e0 <u8g2_font_decode_glyph+0x180>
 800222a:	a201      	add	r2, pc, #4	; (adr r2, 8002230 <u8g2_font_decode_glyph+0xd0>)
 800222c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002230:	08002241 	.word	0x08002241
 8002234:	0800225d 	.word	0x0800225d
 8002238:	08002285 	.word	0x08002285
 800223c:	080022b9 	.word	0x080022b9
			case 0:
				x1 += decode->glyph_width;
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8002246:	b29a      	uxth	r2, r3
 8002248:	8bbb      	ldrh	r3, [r7, #28]
 800224a:	4413      	add	r3, r2
 800224c:	83bb      	strh	r3, [r7, #28]
				y1 += h;
 800224e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002252:	b29a      	uxth	r2, r3
 8002254:	8b3b      	ldrh	r3, [r7, #24]
 8002256:	4413      	add	r3, r2
 8002258:	833b      	strh	r3, [r7, #24]
				break;
 800225a:	e041      	b.n	80022e0 <u8g2_font_decode_glyph+0x180>
			case 1:
				x0 -= h;
 800225c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8002260:	b29b      	uxth	r3, r3
 8002262:	8bfa      	ldrh	r2, [r7, #30]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002268:	8bfb      	ldrh	r3, [r7, #30]
 800226a:	3301      	adds	r3, #1
 800226c:	83fb      	strh	r3, [r7, #30]
				x1++;
 800226e:	8bbb      	ldrh	r3, [r7, #28]
 8002270:	3301      	adds	r3, #1
 8002272:	83bb      	strh	r3, [r7, #28]
				y1 += decode->glyph_width;
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800227a:	b29a      	uxth	r2, r3
 800227c:	8b3b      	ldrh	r3, [r7, #24]
 800227e:	4413      	add	r3, r2
 8002280:	833b      	strh	r3, [r7, #24]
				break;
 8002282:	e02d      	b.n	80022e0 <u8g2_font_decode_glyph+0x180>
			case 2:
				x0 -= decode->glyph_width;
 8002284:	697b      	ldr	r3, [r7, #20]
 8002286:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800228a:	b29b      	uxth	r3, r3
 800228c:	8bfa      	ldrh	r2, [r7, #30]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	83fb      	strh	r3, [r7, #30]
				x0++; /* shift down, because of assymetric boundaries for the interseciton test */
 8002292:	8bfb      	ldrh	r3, [r7, #30]
 8002294:	3301      	adds	r3, #1
 8002296:	83fb      	strh	r3, [r7, #30]
				x1++;
 8002298:	8bbb      	ldrh	r3, [r7, #28]
 800229a:	3301      	adds	r3, #1
 800229c:	83bb      	strh	r3, [r7, #28]
				y0 -= h;
 800229e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022a2:	b29b      	uxth	r3, r3
 80022a4:	8b7a      	ldrh	r2, [r7, #26]
 80022a6:	1ad3      	subs	r3, r2, r3
 80022a8:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80022aa:	8b7b      	ldrh	r3, [r7, #26]
 80022ac:	3301      	adds	r3, #1
 80022ae:	837b      	strh	r3, [r7, #26]
				y1++;
 80022b0:	8b3b      	ldrh	r3, [r7, #24]
 80022b2:	3301      	adds	r3, #1
 80022b4:	833b      	strh	r3, [r7, #24]
				break;
 80022b6:	e013      	b.n	80022e0 <u8g2_font_decode_glyph+0x180>
			case 3:
				x1 += h;
 80022b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80022bc:	b29a      	uxth	r2, r3
 80022be:	8bbb      	ldrh	r3, [r7, #28]
 80022c0:	4413      	add	r3, r2
 80022c2:	83bb      	strh	r3, [r7, #28]
				y0 -= decode->glyph_width;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80022ca:	b29b      	uxth	r3, r3
 80022cc:	8b7a      	ldrh	r2, [r7, #26]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	837b      	strh	r3, [r7, #26]
				y0++; /* shift down, because of assymetric boundaries for the interseciton test */
 80022d2:	8b7b      	ldrh	r3, [r7, #26]
 80022d4:	3301      	adds	r3, #1
 80022d6:	837b      	strh	r3, [r7, #26]
				y1++;
 80022d8:	8b3b      	ldrh	r3, [r7, #24]
 80022da:	3301      	adds	r3, #1
 80022dc:	833b      	strh	r3, [r7, #24]
				break;
 80022de:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif

			if (u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0)
 80022e0:	8bb8      	ldrh	r0, [r7, #28]
 80022e2:	8b7a      	ldrh	r2, [r7, #26]
 80022e4:	8bf9      	ldrh	r1, [r7, #30]
 80022e6:	8b3b      	ldrh	r3, [r7, #24]
 80022e8:	9300      	str	r3, [sp, #0]
 80022ea:	4603      	mov	r3, r0
 80022ec:	6878      	ldr	r0, [r7, #4]
 80022ee:	f000 fcf6 	bl	8002cde <u8g2_IsIntersection>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d102      	bne.n	80022fe <u8g2_font_decode_glyph+0x19e>
				return d;
 80022f8:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80022fc:	e03a      	b.n	8002374 <u8g2_font_decode_glyph+0x214>
		}
#endif /* U8G2_WITH_INTERSECTION */

		/* reset local x/y position */
		decode->x = 0;
 80022fe:	697b      	ldr	r3, [r7, #20]
 8002300:	2200      	movs	r2, #0
 8002302:	721a      	strb	r2, [r3, #8]
		decode->y = 0;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	2200      	movs	r2, #0
 8002308:	725a      	strb	r2, [r3, #9]

		/* decode glyph */
		for (;;) {
			a = u8g2_font_decode_get_unsigned_bits(decode,
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8002310:	4619      	mov	r1, r3
 8002312:	6978      	ldr	r0, [r7, #20]
 8002314:	f7ff fd81 	bl	8001e1a <u8g2_font_decode_get_unsigned_bits>
 8002318:	4603      	mov	r3, r0
 800231a:	73fb      	strb	r3, [r7, #15]
					u8g2->font_info.bits_per_0);
			b = u8g2_font_decode_get_unsigned_bits(decode,
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8002322:	4619      	mov	r1, r3
 8002324:	6978      	ldr	r0, [r7, #20]
 8002326:	f7ff fd78 	bl	8001e1a <u8g2_font_decode_get_unsigned_bits>
 800232a:	4603      	mov	r3, r0
 800232c:	73bb      	strb	r3, [r7, #14]
					u8g2->font_info.bits_per_1);
			do {
				u8g2_font_decode_len(u8g2, a, 0);
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	2200      	movs	r2, #0
 8002332:	4619      	mov	r1, r3
 8002334:	6878      	ldr	r0, [r7, #4]
 8002336:	f7ff fe53 	bl	8001fe0 <u8g2_font_decode_len>
				u8g2_font_decode_len(u8g2, b, 1);
 800233a:	7bbb      	ldrb	r3, [r7, #14]
 800233c:	2201      	movs	r2, #1
 800233e:	4619      	mov	r1, r3
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f7ff fe4d 	bl	8001fe0 <u8g2_font_decode_len>
			} while (u8g2_font_decode_get_unsigned_bits(decode, 1) != 0);
 8002346:	2101      	movs	r1, #1
 8002348:	6978      	ldr	r0, [r7, #20]
 800234a:	f7ff fd66 	bl	8001e1a <u8g2_font_decode_get_unsigned_bits>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1ec      	bne.n	800232e <u8g2_font_decode_glyph+0x1ce>

			if (decode->y >= h)
 8002354:	697b      	ldr	r3, [r7, #20]
 8002356:	f993 3009 	ldrsb.w	r3, [r3, #9]
 800235a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 800235e:	429a      	cmp	r2, r3
 8002360:	dd00      	ble.n	8002364 <u8g2_font_decode_glyph+0x204>
			a = u8g2_font_decode_get_unsigned_bits(decode,
 8002362:	e7d2      	b.n	800230a <u8g2_font_decode_glyph+0x1aa>
				break;
 8002364:	bf00      	nop
		}

		/* restore the u8g2 draw color, because this is modified by the decode algo */
		u8g2->draw_color = decode->fg_color;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	7b9a      	ldrb	r2, [r3, #14]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
	}
	return d;
 8002370:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8002374:	4618      	mov	r0, r3
 8002376:	3720      	adds	r7, #32
 8002378:	46bd      	mov	sp, r7
 800237a:	bd80      	pop	{r7, pc}

0800237c <u8g2_font_get_glyph_data>:
 Args:
 encoding: Encoding (ASCII or Unicode) of the glyph
 Return:
 Address of the glyph data or NULL, if the encoding is not avialable in the font.
 */
const uint8_t* u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding) {
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	460b      	mov	r3, r1
 8002386:	807b      	strh	r3, [r7, #2]
	const uint8_t *font = u8g2->font;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	617b      	str	r3, [r7, #20]
	font += U8G2_FONT_DATA_STRUCT_SIZE;
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	3317      	adds	r3, #23
 8002392:	617b      	str	r3, [r7, #20]

	if (encoding <= 255) {
 8002394:	887b      	ldrh	r3, [r7, #2]
 8002396:	2bff      	cmp	r3, #255	; 0xff
 8002398:	d82a      	bhi.n	80023f0 <u8g2_font_get_glyph_data+0x74>
		if (encoding >= 'a') {
 800239a:	887b      	ldrh	r3, [r7, #2]
 800239c:	2b60      	cmp	r3, #96	; 0x60
 800239e:	d907      	bls.n	80023b0 <u8g2_font_get_glyph_data+0x34>
			font += u8g2->font_info.start_pos_lower_a;
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80023a6:	461a      	mov	r2, r3
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	4413      	add	r3, r2
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	e009      	b.n	80023c4 <u8g2_font_get_glyph_data+0x48>
		} else if (encoding >= 'A') {
 80023b0:	887b      	ldrh	r3, [r7, #2]
 80023b2:	2b40      	cmp	r3, #64	; 0x40
 80023b4:	d906      	bls.n	80023c4 <u8g2_font_get_glyph_data+0x48>
			font += u8g2->font_info.start_pos_upper_A;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80023bc:	461a      	mov	r2, r3
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	4413      	add	r3, r2
 80023c2:	617b      	str	r3, [r7, #20]
		}

		for (;;) {
			if ( u8x8_pgm_read( font + 1 ) == 0)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	3301      	adds	r3, #1
 80023c8:	781b      	ldrb	r3, [r3, #0]
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d04e      	beq.n	800246c <u8g2_font_get_glyph_data+0xf0>
				break;
			if ( u8x8_pgm_read( font ) == encoding) {
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	b29b      	uxth	r3, r3
 80023d4:	887a      	ldrh	r2, [r7, #2]
 80023d6:	429a      	cmp	r2, r3
 80023d8:	d102      	bne.n	80023e0 <u8g2_font_get_glyph_data+0x64>
				return font + 2; /* skip encoding and glyph size */
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	3302      	adds	r3, #2
 80023de:	e049      	b.n	8002474 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 1);
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3301      	adds	r3, #1
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	4413      	add	r3, r2
 80023ec:	617b      	str	r3, [r7, #20]
			if ( u8x8_pgm_read( font + 1 ) == 0)
 80023ee:	e7e9      	b.n	80023c4 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

		font += u8g2->font_info.start_pos_unicode;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80023f6:	461a      	mov	r2, r3
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	4413      	add	r3, r2
 80023fc:	617b      	str	r3, [r7, #20]
		unicode_lookup_table = font;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	613b      	str	r3, [r7, #16]

		/* issue 596: search for the glyph start in the unicode lookup table */
		do {
			font += u8g2_font_get_word(unicode_lookup_table, 0);
 8002402:	2100      	movs	r1, #0
 8002404:	6938      	ldr	r0, [r7, #16]
 8002406:	f7ff fc40 	bl	8001c8a <u8g2_font_get_word>
 800240a:	4603      	mov	r3, r0
 800240c:	461a      	mov	r2, r3
 800240e:	697b      	ldr	r3, [r7, #20]
 8002410:	4413      	add	r3, r2
 8002412:	617b      	str	r3, [r7, #20]
			e = u8g2_font_get_word(unicode_lookup_table, 2);
 8002414:	2102      	movs	r1, #2
 8002416:	6938      	ldr	r0, [r7, #16]
 8002418:	f7ff fc37 	bl	8001c8a <u8g2_font_get_word>
 800241c:	4603      	mov	r3, r0
 800241e:	81fb      	strh	r3, [r7, #14]
			unicode_lookup_table += 4;
 8002420:	693b      	ldr	r3, [r7, #16]
 8002422:	3304      	adds	r3, #4
 8002424:	613b      	str	r3, [r7, #16]
		} while (e < encoding);
 8002426:	89fa      	ldrh	r2, [r7, #14]
 8002428:	887b      	ldrh	r3, [r7, #2]
 800242a:	429a      	cmp	r2, r3
 800242c:	d3e9      	bcc.n	8002402 <u8g2_font_get_glyph_data+0x86>

		for (;;) {
			e = u8x8_pgm_read(font);
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	81fb      	strh	r3, [r7, #14]
			e <<= 8;
 8002434:	89fb      	ldrh	r3, [r7, #14]
 8002436:	021b      	lsls	r3, r3, #8
 8002438:	81fb      	strh	r3, [r7, #14]
			e |= u8x8_pgm_read(font + 1);
 800243a:	697b      	ldr	r3, [r7, #20]
 800243c:	3301      	adds	r3, #1
 800243e:	781b      	ldrb	r3, [r3, #0]
 8002440:	b29a      	uxth	r2, r3
 8002442:	89fb      	ldrh	r3, [r7, #14]
 8002444:	4313      	orrs	r3, r2
 8002446:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

			if (e == 0)
 8002448:	89fb      	ldrh	r3, [r7, #14]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d010      	beq.n	8002470 <u8g2_font_get_glyph_data+0xf4>
				break;

			if (e == encoding) {
 800244e:	89fa      	ldrh	r2, [r7, #14]
 8002450:	887b      	ldrh	r3, [r7, #2]
 8002452:	429a      	cmp	r2, r3
 8002454:	d102      	bne.n	800245c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
				return font + 3; /* skip encoding and glyph size */
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	3303      	adds	r3, #3
 800245a:	e00b      	b.n	8002474 <u8g2_font_get_glyph_data+0xf8>
			}
			font += u8x8_pgm_read(font + 2);
 800245c:	697b      	ldr	r3, [r7, #20]
 800245e:	3302      	adds	r3, #2
 8002460:	781b      	ldrb	r3, [r3, #0]
 8002462:	461a      	mov	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	4413      	add	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
			e = u8x8_pgm_read(font);
 800246a:	e7e0      	b.n	800242e <u8g2_font_get_glyph_data+0xb2>
				break;
 800246c:	bf00      	nop
 800246e:	e000      	b.n	8002472 <u8g2_font_get_glyph_data+0xf6>
				break;
 8002470:	bf00      	nop
		}
	}
#endif

	return NULL;
 8002472:	2300      	movs	r3, #0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}

0800247c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x,
		u8g2_uint_t y, uint16_t encoding) {
 800247c:	b580      	push	{r7, lr}
 800247e:	b086      	sub	sp, #24
 8002480:	af00      	add	r7, sp, #0
 8002482:	60f8      	str	r0, [r7, #12]
 8002484:	4608      	mov	r0, r1
 8002486:	4611      	mov	r1, r2
 8002488:	461a      	mov	r2, r3
 800248a:	4603      	mov	r3, r0
 800248c:	817b      	strh	r3, [r7, #10]
 800248e:	460b      	mov	r3, r1
 8002490:	813b      	strh	r3, [r7, #8]
 8002492:	4613      	mov	r3, r2
 8002494:	80fb      	strh	r3, [r7, #6]
	u8g2_uint_t dx = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	82fb      	strh	r3, [r7, #22]
	u8g2->font_decode.target_x = x;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	897a      	ldrh	r2, [r7, #10]
 800249e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
	u8g2->font_decode.target_y = y;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	893a      	ldrh	r2, [r7, #8]
 80024a6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
	//u8g2->font_decode.is_transparent = is_transparent; this is already set
	//u8g2->font_decode.dir = dir;
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80024aa:	88fb      	ldrh	r3, [r7, #6]
 80024ac:	4619      	mov	r1, r3
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	f7ff ff64 	bl	800237c <u8g2_font_get_glyph_data>
 80024b4:	6138      	str	r0, [r7, #16]
	if (glyph_data != NULL) {
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d005      	beq.n	80024c8 <u8g2_font_draw_glyph+0x4c>
		dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80024bc:	6939      	ldr	r1, [r7, #16]
 80024be:	68f8      	ldr	r0, [r7, #12]
 80024c0:	f7ff fe4e 	bl	8002160 <u8g2_font_decode_glyph>
 80024c4:	4603      	mov	r3, r0
 80024c6:	82fb      	strh	r3, [r7, #22]
	}
	return dx;
 80024c8:	8afb      	ldrh	r3, [r7, #22]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3718      	adds	r7, #24
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}

080024d2 <u8g2_GetGlyphWidth>:
		return 1;
	return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding) {
 80024d2:	b580      	push	{r7, lr}
 80024d4:	b084      	sub	sp, #16
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	6078      	str	r0, [r7, #4]
 80024da:	460b      	mov	r3, r1
 80024dc:	807b      	strh	r3, [r7, #2]
	const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2,
 80024de:	887b      	ldrh	r3, [r7, #2]
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f7ff ff4a 	bl	800237c <u8g2_font_get_glyph_data>
 80024e8:	60f8      	str	r0, [r7, #12]
			requested_encoding);
	if (glyph_data == NULL)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d101      	bne.n	80024f4 <u8g2_GetGlyphWidth+0x22>
		return 0;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e027      	b.n	8002544 <u8g2_GetGlyphWidth+0x72>

	u8g2_font_setup_decode(u8g2, glyph_data);
 80024f4:	68f9      	ldr	r1, [r7, #12]
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	f7ff fdfa 	bl	80020f0 <u8g2_font_setup_decode>
	u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8002508:	4619      	mov	r1, r3
 800250a:	4610      	mov	r0, r2
 800250c:	f7ff fccf 	bl	8001eae <u8g2_font_decode_get_signed_bits>
 8002510:	4603      	mov	r3, r0
 8002512:	461a      	mov	r2, r3
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
			&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
	u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8002526:	4619      	mov	r1, r3
 8002528:	4610      	mov	r0, r2
 800252a:	f7ff fcc0 	bl	8001eae <u8g2_font_decode_get_signed_bits>
			u8g2->font_info.bits_per_char_y);

	/* glyph width is here: u8g2->font_decode.glyph_width */

	return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode),
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 800253a:	4619      	mov	r1, r3
 800253c:	4610      	mov	r0, r2
 800253e:	f7ff fcb6 	bl	8001eae <u8g2_font_decode_get_signed_bits>
 8002542:	4603      	mov	r3, r0
			u8g2->font_info.bits_per_delta_x);
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}

0800254c <u8g2_SetFontMode>:
 U8G2_FONT_MODE_TRANSPARENT
 U8G2_FONT_MODE_SOLID
 U8G2_FONT_MODE_NONE
 This has been changed for the new font procedures
 */
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent) {
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	460b      	mov	r3, r1
 8002556:	70fb      	strb	r3, [r7, #3]
	u8g2->font_decode.is_transparent = is_transparent;	// new font procedures
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	78fa      	ldrb	r2, [r7, #3]
 800255c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8002560:	bf00      	nop
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	bc80      	pop	{r7}
 8002568:	4770      	bx	lr
	...

0800256c <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		uint16_t encoding) {
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	4608      	mov	r0, r1
 8002576:	4611      	mov	r1, r2
 8002578:	461a      	mov	r2, r3
 800257a:	4603      	mov	r3, r0
 800257c:	817b      	strh	r3, [r7, #10]
 800257e:	460b      	mov	r3, r1
 8002580:	813b      	strh	r3, [r7, #8]
 8002582:	4613      	mov	r3, r2
 8002584:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
	switch (u8g2->font_decode.dir) {
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800258c:	2b03      	cmp	r3, #3
 800258e:	d833      	bhi.n	80025f8 <u8g2_DrawGlyph+0x8c>
 8002590:	a201      	add	r2, pc, #4	; (adr r2, 8002598 <u8g2_DrawGlyph+0x2c>)
 8002592:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002596:	bf00      	nop
 8002598:	080025a9 	.word	0x080025a9
 800259c:	080025bd 	.word	0x080025bd
 80025a0:	080025d1 	.word	0x080025d1
 80025a4:	080025e5 	.word	0x080025e5
	case 0:
		y += u8g2->font_calc_vref(u8g2);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	4798      	blx	r3
 80025b0:	4603      	mov	r3, r0
 80025b2:	461a      	mov	r2, r3
 80025b4:	893b      	ldrh	r3, [r7, #8]
 80025b6:	4413      	add	r3, r2
 80025b8:	813b      	strh	r3, [r7, #8]
		break;
 80025ba:	e01d      	b.n	80025f8 <u8g2_DrawGlyph+0x8c>
	case 1:
		x -= u8g2->font_calc_vref(u8g2);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025c0:	68f8      	ldr	r0, [r7, #12]
 80025c2:	4798      	blx	r3
 80025c4:	4603      	mov	r3, r0
 80025c6:	461a      	mov	r2, r3
 80025c8:	897b      	ldrh	r3, [r7, #10]
 80025ca:	1a9b      	subs	r3, r3, r2
 80025cc:	817b      	strh	r3, [r7, #10]
		break;
 80025ce:	e013      	b.n	80025f8 <u8g2_DrawGlyph+0x8c>
	case 2:
		y -= u8g2->font_calc_vref(u8g2);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025d4:	68f8      	ldr	r0, [r7, #12]
 80025d6:	4798      	blx	r3
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	893b      	ldrh	r3, [r7, #8]
 80025de:	1a9b      	subs	r3, r3, r2
 80025e0:	813b      	strh	r3, [r7, #8]
		break;
 80025e2:	e009      	b.n	80025f8 <u8g2_DrawGlyph+0x8c>
	case 3:
		x += u8g2->font_calc_vref(u8g2);
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	4798      	blx	r3
 80025ec:	4603      	mov	r3, r0
 80025ee:	461a      	mov	r2, r3
 80025f0:	897b      	ldrh	r3, [r7, #10]
 80025f2:	4413      	add	r3, r2
 80025f4:	817b      	strh	r3, [r7, #10]
		break;
 80025f6:	bf00      	nop
	}
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
	return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80025f8:	88fb      	ldrh	r3, [r7, #6]
 80025fa:	893a      	ldrh	r2, [r7, #8]
 80025fc:	8979      	ldrh	r1, [r7, #10]
 80025fe:	68f8      	ldr	r0, [r7, #12]
 8002600:	f7ff ff3c 	bl	800247c <u8g2_font_draw_glyph>
 8002604:	4603      	mov	r3, r0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3710      	adds	r7, #16
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}
 800260e:	bf00      	nop

08002610 <u8g2_draw_string>:

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 8002610:	b580      	push	{r7, lr}
 8002612:	b086      	sub	sp, #24
 8002614:	af00      	add	r7, sp, #0
 8002616:	60f8      	str	r0, [r7, #12]
 8002618:	607b      	str	r3, [r7, #4]
 800261a:	460b      	mov	r3, r1
 800261c:	817b      	strh	r3, [r7, #10]
 800261e:	4613      	mov	r3, r2
 8002620:	813b      	strh	r3, [r7, #8]
	uint16_t e;
	u8g2_uint_t delta, sum;
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8002622:	68f8      	ldr	r0, [r7, #12]
 8002624:	f000 fd9a 	bl	800315c <u8x8_utf8_init>
	sum = 0;
 8002628:	2300      	movs	r3, #0
 800262a:	82fb      	strh	r3, [r7, #22]
	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	7812      	ldrb	r2, [r2, #0]
 8002634:	4611      	mov	r1, r2
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	4798      	blx	r3
 800263a:	4603      	mov	r3, r0
 800263c:	82bb      	strh	r3, [r7, #20]
		if (e == 0x0ffff)
 800263e:	8abb      	ldrh	r3, [r7, #20]
 8002640:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002644:	4293      	cmp	r3, r2
 8002646:	d038      	beq.n	80026ba <u8g2_draw_string+0xaa>
			break;
		str++;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	3301      	adds	r3, #1
 800264c:	607b      	str	r3, [r7, #4]
		if (e != 0x0fffe) {
 800264e:	8abb      	ldrh	r3, [r7, #20]
 8002650:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002654:	4293      	cmp	r3, r2
 8002656:	d0e9      	beq.n	800262c <u8g2_draw_string+0x1c>
			delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8002658:	8abb      	ldrh	r3, [r7, #20]
 800265a:	893a      	ldrh	r2, [r7, #8]
 800265c:	8979      	ldrh	r1, [r7, #10]
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7ff ff84 	bl	800256c <u8g2_DrawGlyph>
 8002664:	4603      	mov	r3, r0
 8002666:	827b      	strh	r3, [r7, #18]

#ifdef U8G2_WITH_FONT_ROTATION
			switch (u8g2->font_decode.dir) {
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800266e:	2b03      	cmp	r3, #3
 8002670:	d81e      	bhi.n	80026b0 <u8g2_draw_string+0xa0>
 8002672:	a201      	add	r2, pc, #4	; (adr r2, 8002678 <u8g2_draw_string+0x68>)
 8002674:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002678:	08002689 	.word	0x08002689
 800267c:	08002693 	.word	0x08002693
 8002680:	0800269d 	.word	0x0800269d
 8002684:	080026a7 	.word	0x080026a7
			case 0:
				x += delta;
 8002688:	897a      	ldrh	r2, [r7, #10]
 800268a:	8a7b      	ldrh	r3, [r7, #18]
 800268c:	4413      	add	r3, r2
 800268e:	817b      	strh	r3, [r7, #10]
				break;
 8002690:	e00e      	b.n	80026b0 <u8g2_draw_string+0xa0>
			case 1:
				y += delta;
 8002692:	893a      	ldrh	r2, [r7, #8]
 8002694:	8a7b      	ldrh	r3, [r7, #18]
 8002696:	4413      	add	r3, r2
 8002698:	813b      	strh	r3, [r7, #8]
				break;
 800269a:	e009      	b.n	80026b0 <u8g2_draw_string+0xa0>
			case 2:
				x -= delta;
 800269c:	897a      	ldrh	r2, [r7, #10]
 800269e:	8a7b      	ldrh	r3, [r7, #18]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	817b      	strh	r3, [r7, #10]
				break;
 80026a4:	e004      	b.n	80026b0 <u8g2_draw_string+0xa0>
			case 3:
				y -= delta;
 80026a6:	893a      	ldrh	r2, [r7, #8]
 80026a8:	8a7b      	ldrh	r3, [r7, #18]
 80026aa:	1ad3      	subs	r3, r2, r3
 80026ac:	813b      	strh	r3, [r7, #8]
				break;
 80026ae:	bf00      	nop

#else
      x += delta;
#endif

			sum += delta;
 80026b0:	8afa      	ldrh	r2, [r7, #22]
 80026b2:	8a7b      	ldrh	r3, [r7, #18]
 80026b4:	4413      	add	r3, r2
 80026b6:	82fb      	strh	r3, [r7, #22]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80026b8:	e7b8      	b.n	800262c <u8g2_draw_string+0x1c>
			break;
 80026ba:	bf00      	nop
		}
	}
	return sum;
 80026bc:	8afb      	ldrh	r3, [r7, #22]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3718      	adds	r7, #24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop

080026c8 <u8g2_DrawUTF8>:
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y,
		const char *str) {
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	607b      	str	r3, [r7, #4]
 80026d2:	460b      	mov	r3, r1
 80026d4:	817b      	strh	r3, [r7, #10]
 80026d6:	4613      	mov	r3, r2
 80026d8:	813b      	strh	r3, [r7, #8]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	4a06      	ldr	r2, [pc, #24]	; (80026f8 <u8g2_DrawUTF8+0x30>)
 80026de:	605a      	str	r2, [r3, #4]
	return u8g2_draw_string(u8g2, x, y, str);
 80026e0:	893a      	ldrh	r2, [r7, #8]
 80026e2:	8979      	ldrh	r1, [r7, #10]
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	68f8      	ldr	r0, [r7, #12]
 80026e8:	f7ff ff92 	bl	8002610 <u8g2_draw_string>
 80026ec:	4603      	mov	r3, r0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	080031a3 	.word	0x080031a3

080026fc <u8g2_UpdateRefHeight>:

/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2) {
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
	if (u8g2->font == NULL)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002708:	2b00      	cmp	r3, #0
 800270a:	d05d      	beq.n	80027c8 <u8g2_UpdateRefHeight+0xcc>
		return;
	u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
	u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
	if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT) {
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800272a:	2b00      	cmp	r3, #0
 800272c:	d04d      	beq.n	80027ca <u8g2_UpdateRefHeight+0xce>
	} else if (u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT) {
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002734:	2b01      	cmp	r3, #1
 8002736:	d11c      	bne.n	8002772 <u8g2_UpdateRefHeight+0x76>
		if (u8g2->font_ref_ascent < u8g2->font_info.ascent_para)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8002744:	429a      	cmp	r2, r3
 8002746:	da05      	bge.n	8002754 <u8g2_UpdateRefHeight+0x58>
			u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.descent_para)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8002760:	429a      	cmp	r2, r3
 8002762:	dd32      	ble.n	80027ca <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002770:	e02b      	b.n	80027ca <u8g2_UpdateRefHeight+0xce>
	} else {
		if (u8g2->font_ref_ascent
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002778:	461a      	mov	r2, r3
				< u8g2->font_info.max_char_height + u8g2->font_info.y_offset)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002780:	4619      	mov	r1, r3
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002788:	440b      	add	r3, r1
		if (u8g2->font_ref_ascent
 800278a:	429a      	cmp	r2, r3
 800278c:	da0d      	bge.n	80027aa <u8g2_UpdateRefHeight+0xae>
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002794:	b2da      	uxtb	r2, r3
					+ u8g2->font_info.y_offset;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800279c:	b2db      	uxtb	r3, r3
 800279e:	4413      	add	r3, r2
 80027a0:	b2db      	uxtb	r3, r3
 80027a2:	b25a      	sxtb	r2, r3
			u8g2->font_ref_ascent = u8g2->font_info.max_char_height
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
		if (u8g2->font_ref_descent > u8g2->font_info.y_offset)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80027b6:	429a      	cmp	r2, r3
 80027b8:	dd07      	ble.n	80027ca <u8g2_UpdateRefHeight+0xce>
			u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80027c6:	e000      	b.n	80027ca <u8g2_UpdateRefHeight+0xce>
		return;
 80027c8:	bf00      	nop
	}
}
 80027ca:	370c      	adds	r7, #12
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr

080027d2 <u8g2_font_calc_vref_font>:
}

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2) {
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
	return 0;
 80027da:	2300      	movs	r3, #0
}
 80027dc:	4618      	mov	r0, r3
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bc80      	pop	{r7}
 80027e4:	4770      	bx	lr
	...

080027e8 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2) {
 80027e8:	b480      	push	{r7}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	4a03      	ldr	r2, [pc, #12]	; (8002800 <u8g2_SetFontPosBaseline+0x18>)
 80027f4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	bc80      	pop	{r7}
 80027fe:	4770      	bx	lr
 8002800:	080027d3 	.word	0x080027d3

08002804 <u8g2_font_calc_vref_top>:

void u8g2_SetFontPosBottom(u8g2_t *u8g2) {
	u8g2->font_calc_vref = u8g2_font_calc_vref_bottom;
}

u8g2_uint_t u8g2_font_calc_vref_top(u8g2_t *u8g2) {
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
	u8g2_uint_t tmp;
	/* reference pos is one pixel above the upper edge of the reference glyph */
	tmp = (u8g2_uint_t) (u8g2->font_ref_ascent);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8002812:	81fb      	strh	r3, [r7, #14]
	tmp++;
 8002814:	89fb      	ldrh	r3, [r7, #14]
 8002816:	3301      	adds	r3, #1
 8002818:	81fb      	strh	r3, [r7, #14]
	return tmp;
 800281a:	89fb      	ldrh	r3, [r7, #14]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3714      	adds	r7, #20
 8002820:	46bd      	mov	sp, r7
 8002822:	bc80      	pop	{r7}
 8002824:	4770      	bx	lr
	...

08002828 <u8g2_SetFontPosTop>:

void u8g2_SetFontPosTop(u8g2_t *u8g2) {
 8002828:	b480      	push	{r7}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
	u8g2->font_calc_vref = u8g2_font_calc_vref_top;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	4a03      	ldr	r2, [pc, #12]	; (8002840 <u8g2_SetFontPosTop+0x18>)
 8002834:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002836:	bf00      	nop
 8002838:	370c      	adds	r7, #12
 800283a:	46bd      	mov	sp, r7
 800283c:	bc80      	pop	{r7}
 800283e:	4770      	bx	lr
 8002840:	08002805 	.word	0x08002805

08002844 <u8g2_SetFont>:
	u8g2->font_calc_vref = u8g2_font_calc_vref_center;
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t *font) {
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
	if (u8g2->font != font) {
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002852:	683a      	ldr	r2, [r7, #0]
 8002854:	429a      	cmp	r2, r3
 8002856:	d00b      	beq.n	8002870 <u8g2_SetFont+0x2c>
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
		u8g2->font = font;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	683a      	ldr	r2, [r7, #0]
 800285c:	659a      	str	r2, [r3, #88]	; 0x58
		u8g2_read_font_info(&(u8g2->font_info), font);
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	3374      	adds	r3, #116	; 0x74
 8002862:	6839      	ldr	r1, [r7, #0]
 8002864:	4618      	mov	r0, r3
 8002866:	f7ff fa2f 	bl	8001cc8 <u8g2_read_font_info>
		u8g2_UpdateRefHeight(u8g2);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f7ff ff46 	bl	80026fc <u8g2_UpdateRefHeight>
		/* u8g2_SetFontPosBaseline(u8g2); *//* removed with issue 195 */
	}
}
 8002870:	bf00      	nop
 8002872:	3708      	adds	r7, #8
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}

08002878 <u8g2_string_width>:
	return u8g2_is_all_valid(u8g2, str);
}

/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) {
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
 8002880:	6039      	str	r1, [r7, #0]
	uint16_t e;
	u8g2_uint_t w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
	int8_t initial_x_offset = -64;
 8002882:	23c0      	movs	r3, #192	; 0xc0
 8002884:	72fb      	strb	r3, [r7, #11]
#endif 

	u8g2->font_decode.glyph_width = 0;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
	u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 fc64 	bl	800315c <u8x8_utf8_init>

	/* reset the total width to zero, this will be expanded during calculation */
	w = 0;
 8002894:	2300      	movs	r3, #0
 8002896:	81fb      	strh	r3, [r7, #14]
	dx = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	81bb      	strh	r3, [r7, #12]

	// printf("str=<%s>\n", str);

	for (;;) {
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	685b      	ldr	r3, [r3, #4]
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	4611      	mov	r1, r2
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
 80028aa:	4603      	mov	r3, r0
 80028ac:	813b      	strh	r3, [r7, #8]
		if (e == 0x0ffff)
 80028ae:	893b      	ldrh	r3, [r7, #8]
 80028b0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80028b4:	4293      	cmp	r3, r2
 80028b6:	d01c      	beq.n	80028f2 <u8g2_string_width+0x7a>
			break;
		str++;
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	3301      	adds	r3, #1
 80028bc:	603b      	str	r3, [r7, #0]
		if (e != 0x0fffe) {
 80028be:	893b      	ldrh	r3, [r7, #8]
 80028c0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d0e9      	beq.n	800289c <u8g2_string_width+0x24>
			dx = u8g2_GetGlyphWidth(u8g2, e); /* delta x value of the glyph */
 80028c8:	893b      	ldrh	r3, [r7, #8]
 80028ca:	4619      	mov	r1, r3
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f7ff fe00 	bl	80024d2 <u8g2_GetGlyphWidth>
 80028d2:	4603      	mov	r3, r0
 80028d4:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
			if (initial_x_offset == -64)
 80028d6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80028da:	f113 0f40 	cmn.w	r3, #64	; 0x40
 80028de:	d103      	bne.n	80028e8 <u8g2_string_width+0x70>
				initial_x_offset = u8g2->glyph_x_offset;
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80028e6:	72fb      	strb	r3, [r7, #11]
#endif 
			//printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
			w += dx;
 80028e8:	89fa      	ldrh	r2, [r7, #14]
 80028ea:	89bb      	ldrh	r3, [r7, #12]
 80028ec:	4413      	add	r3, r2
 80028ee:	81fb      	strh	r3, [r7, #14]
		e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t) *str);
 80028f0:	e7d4      	b.n	800289c <u8g2_string_width+0x24>
			break;
 80028f2:	bf00      	nop
		}
	}
	//printf("\n");

	/* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
	if (u8g2->font_decode.glyph_width != 0) {
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d01b      	beq.n	8002936 <u8g2_string_width+0xbe>
		//printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
		w -= dx;
 80028fe:	89fa      	ldrh	r2, [r7, #14]
 8002900:	89bb      	ldrh	r3, [r7, #12]
 8002902:	1ad3      	subs	r3, r2, r3
 8002904:	81fb      	strh	r3, [r7, #14]
		w += u8g2->font_decode.glyph_width; /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 800290c:	b29a      	uxth	r2, r3
 800290e:	89fb      	ldrh	r3, [r7, #14]
 8002910:	4413      	add	r3, r2
 8002912:	81fb      	strh	r3, [r7, #14]
		/* issue #46: we have to add the x offset also */
		w += u8g2->glyph_x_offset; /* this value is set as a side effect of u8g2_GetGlyphWidth() */
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 800291a:	b29a      	uxth	r2, r3
 800291c:	89fb      	ldrh	r3, [r7, #14]
 800291e:	4413      	add	r3, r2
 8002920:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
		/* https://github.com/olikraus/u8g2/issues/1561 */
		if (initial_x_offset > 0)
 8002922:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002926:	2b00      	cmp	r3, #0
 8002928:	dd05      	ble.n	8002936 <u8g2_string_width+0xbe>
			w += initial_x_offset;
 800292a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800292e:	b29a      	uxth	r2, r3
 8002930:	89fb      	ldrh	r3, [r7, #14]
 8002932:	4413      	add	r3, r2
 8002934:	81fb      	strh	r3, [r7, #14]
#endif 
	}
	// printf("w=%d \n", w);

	return w;
 8002936:	89fb      	ldrh	r3, [r7, #14]
}
 8002938:	4618      	mov	r0, r3
 800293a:	3710      	adds	r7, #16
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}

08002940 <u8g2_GetStrWidth>:
  return w;
	
}
#endif

u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s) {
 8002940:	b580      	push	{r7, lr}
 8002942:	b082      	sub	sp, #8
 8002944:	af00      	add	r7, sp, #0
 8002946:	6078      	str	r0, [r7, #4]
 8002948:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_ascii_next;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a05      	ldr	r2, [pc, #20]	; (8002964 <u8g2_GetStrWidth+0x24>)
 800294e:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, s);
 8002950:	6839      	ldr	r1, [r7, #0]
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff ff90 	bl	8002878 <u8g2_string_width>
 8002958:	4603      	mov	r3, r0
}
 800295a:	4618      	mov	r0, r3
 800295c:	3708      	adds	r7, #8
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	08003177 	.word	0x08003177

08002968 <u8g2_GetUTF8Width>:
 16 	U+0800 		U+FFFF 		3 		1110xxxx 	10xxxxxx 	10xxxxxx
 21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
 */
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str) {
 8002968:	b580      	push	{r7, lr}
 800296a:	b082      	sub	sp, #8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
	u8g2->u8x8.next_cb = u8x8_utf8_next;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	4a05      	ldr	r2, [pc, #20]	; (800298c <u8g2_GetUTF8Width+0x24>)
 8002976:	605a      	str	r2, [r3, #4]
	return u8g2_string_width(u8g2, str);
 8002978:	6839      	ldr	r1, [r7, #0]
 800297a:	6878      	ldr	r0, [r7, #4]
 800297c:	f7ff ff7c 	bl	8002878 <u8g2_string_width>
 8002980:	4603      	mov	r3, r0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	080031a3 	.word	0x080031a3

08002990 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8002990:	b480      	push	{r7}
 8002992:	b087      	sub	sp, #28
 8002994:	af00      	add	r7, sp, #0
 8002996:	60f8      	str	r0, [r7, #12]
 8002998:	60b9      	str	r1, [r7, #8]
 800299a:	4611      	mov	r1, r2
 800299c:	461a      	mov	r2, r3
 800299e:	460b      	mov	r3, r1
 80029a0:	80fb      	strh	r3, [r7, #6]
 80029a2:	4613      	mov	r3, r2
 80029a4:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	881b      	ldrh	r3, [r3, #0]
 80029aa:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80029ac:	8afb      	ldrh	r3, [r7, #22]
 80029ae:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80029b0:	68bb      	ldr	r3, [r7, #8]
 80029b2:	881a      	ldrh	r2, [r3, #0]
 80029b4:	8abb      	ldrh	r3, [r7, #20]
 80029b6:	4413      	add	r3, r2
 80029b8:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 80029ba:	8afa      	ldrh	r2, [r7, #22]
 80029bc:	8abb      	ldrh	r3, [r7, #20]
 80029be:	429a      	cmp	r2, r3
 80029c0:	d90b      	bls.n	80029da <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 80029c2:	8afa      	ldrh	r2, [r7, #22]
 80029c4:	88bb      	ldrh	r3, [r7, #4]
 80029c6:	429a      	cmp	r2, r3
 80029c8:	d205      	bcs.n	80029d6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 80029ca:	88bb      	ldrh	r3, [r7, #4]
 80029cc:	82bb      	strh	r3, [r7, #20]
      b--;
 80029ce:	8abb      	ldrh	r3, [r7, #20]
 80029d0:	3b01      	subs	r3, #1
 80029d2:	82bb      	strh	r3, [r7, #20]
 80029d4:	e001      	b.n	80029da <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 80029d6:	88fb      	ldrh	r3, [r7, #6]
 80029d8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 80029da:	8afa      	ldrh	r2, [r7, #22]
 80029dc:	88bb      	ldrh	r3, [r7, #4]
 80029de:	429a      	cmp	r2, r3
 80029e0:	d301      	bcc.n	80029e6 <u8g2_clip_intersection2+0x56>
    return 0;
 80029e2:	2300      	movs	r3, #0
 80029e4:	e01c      	b.n	8002a20 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80029e6:	8aba      	ldrh	r2, [r7, #20]
 80029e8:	88fb      	ldrh	r3, [r7, #6]
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d801      	bhi.n	80029f2 <u8g2_clip_intersection2+0x62>
    return 0;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e016      	b.n	8002a20 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80029f2:	8afa      	ldrh	r2, [r7, #22]
 80029f4:	88fb      	ldrh	r3, [r7, #6]
 80029f6:	429a      	cmp	r2, r3
 80029f8:	d201      	bcs.n	80029fe <u8g2_clip_intersection2+0x6e>
    a = c;
 80029fa:	88fb      	ldrh	r3, [r7, #6]
 80029fc:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80029fe:	8aba      	ldrh	r2, [r7, #20]
 8002a00:	88bb      	ldrh	r3, [r7, #4]
 8002a02:	429a      	cmp	r2, r3
 8002a04:	d901      	bls.n	8002a0a <u8g2_clip_intersection2+0x7a>
    b = d;
 8002a06:	88bb      	ldrh	r3, [r7, #4]
 8002a08:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	8afa      	ldrh	r2, [r7, #22]
 8002a0e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002a10:	8aba      	ldrh	r2, [r7, #20]
 8002a12:	8afb      	ldrh	r3, [r7, #22]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	8aba      	ldrh	r2, [r7, #20]
 8002a1c:	801a      	strh	r2, [r3, #0]
  return 1;
 8002a1e:	2301      	movs	r3, #1
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	371c      	adds	r7, #28
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bc80      	pop	{r7}
 8002a28:	4770      	bx	lr

08002a2a <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a2a:	b590      	push	{r4, r7, lr}
 8002a2c:	b087      	sub	sp, #28
 8002a2e:	af02      	add	r7, sp, #8
 8002a30:	60f8      	str	r0, [r7, #12]
 8002a32:	4608      	mov	r0, r1
 8002a34:	4611      	mov	r1, r2
 8002a36:	461a      	mov	r2, r3
 8002a38:	4603      	mov	r3, r0
 8002a3a:	817b      	strh	r3, [r7, #10]
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	813b      	strh	r3, [r7, #8]
 8002a40:	4613      	mov	r3, r2
 8002a42:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a48:	893a      	ldrh	r2, [r7, #8]
 8002a4a:	1ad3      	subs	r3, r2, r3
 8002a4c:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002a52:	88f8      	ldrh	r0, [r7, #6]
 8002a54:	893a      	ldrh	r2, [r7, #8]
 8002a56:	8979      	ldrh	r1, [r7, #10]
 8002a58:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002a5c:	9300      	str	r3, [sp, #0]
 8002a5e:	4603      	mov	r3, r0
 8002a60:	68f8      	ldr	r0, [r7, #12]
 8002a62:	47a0      	blx	r4
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd90      	pop	{r4, r7, pc}

08002a6c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002a6c:	b590      	push	{r4, r7, lr}
 8002a6e:	b087      	sub	sp, #28
 8002a70:	af02      	add	r7, sp, #8
 8002a72:	60f8      	str	r0, [r7, #12]
 8002a74:	4608      	mov	r0, r1
 8002a76:	4611      	mov	r1, r2
 8002a78:	461a      	mov	r2, r3
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	817b      	strh	r3, [r7, #10]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	813b      	strh	r3, [r7, #8]
 8002a82:	4613      	mov	r3, r2
 8002a84:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d075      	beq.n	8002b7c <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8002a90:	88fb      	ldrh	r3, [r7, #6]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d072      	beq.n	8002b7c <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002a96:	88fb      	ldrh	r3, [r7, #6]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d91a      	bls.n	8002ad2 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8002a9c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002aa0:	2b02      	cmp	r3, #2
 8002aa2:	d109      	bne.n	8002ab8 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002aa4:	897a      	ldrh	r2, [r7, #10]
 8002aa6:	88fb      	ldrh	r3, [r7, #6]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	b29b      	uxth	r3, r3
 8002aac:	817b      	strh	r3, [r7, #10]
	  x++;
 8002aae:	897b      	ldrh	r3, [r7, #10]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	b29b      	uxth	r3, r3
 8002ab4:	817b      	strh	r3, [r7, #10]
 8002ab6:	e00c      	b.n	8002ad2 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002ab8:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002abc:	2b03      	cmp	r3, #3
 8002abe:	d108      	bne.n	8002ad2 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8002ac0:	893a      	ldrh	r2, [r7, #8]
 8002ac2:	88fb      	ldrh	r3, [r7, #6]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	813b      	strh	r3, [r7, #8]
	  y++;
 8002aca:	893b      	ldrh	r3, [r7, #8]
 8002acc:	3301      	adds	r3, #1
 8002ace:	b29b      	uxth	r3, r3
 8002ad0:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002ad2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002ade:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d11a      	bne.n	8002b1c <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002aec:	893b      	ldrh	r3, [r7, #8]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d83b      	bhi.n	8002b6a <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002af8:	893b      	ldrh	r3, [r7, #8]
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d937      	bls.n	8002b6e <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002b0a:	1db9      	adds	r1, r7, #6
 8002b0c:	f107 000a 	add.w	r0, r7, #10
 8002b10:	f7ff ff3e 	bl	8002990 <u8g2_clip_intersection2>
 8002b14:	4603      	mov	r3, r0
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d11a      	bne.n	8002b50 <u8g2_DrawHVLine+0xe4>
	  return;
 8002b1a:	e02f      	b.n	8002b7c <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002b22:	897b      	ldrh	r3, [r7, #10]
 8002b24:	429a      	cmp	r2, r3
 8002b26:	d824      	bhi.n	8002b72 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002b2e:	897b      	ldrh	r3, [r7, #10]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d920      	bls.n	8002b76 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002b40:	1db9      	adds	r1, r7, #6
 8002b42:	f107 0008 	add.w	r0, r7, #8
 8002b46:	f7ff ff23 	bl	8002990 <u8g2_clip_intersection2>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d014      	beq.n	8002b7a <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b54:	689c      	ldr	r4, [r3, #8]
 8002b56:	8979      	ldrh	r1, [r7, #10]
 8002b58:	893a      	ldrh	r2, [r7, #8]
 8002b5a:	88f8      	ldrh	r0, [r7, #6]
 8002b5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b60:	9300      	str	r3, [sp, #0]
 8002b62:	4603      	mov	r3, r0
 8002b64:	68f8      	ldr	r0, [r7, #12]
 8002b66:	47a0      	blx	r4
 8002b68:	e008      	b.n	8002b7c <u8g2_DrawHVLine+0x110>
	  return;
 8002b6a:	bf00      	nop
 8002b6c:	e006      	b.n	8002b7c <u8g2_DrawHVLine+0x110>
	  return;
 8002b6e:	bf00      	nop
 8002b70:	e004      	b.n	8002b7c <u8g2_DrawHVLine+0x110>
	  return;
 8002b72:	bf00      	nop
 8002b74:	e002      	b.n	8002b7c <u8g2_DrawHVLine+0x110>
	  return;
 8002b76:	bf00      	nop
 8002b78:	e000      	b.n	8002b7c <u8g2_DrawHVLine+0x110>
	  return;
 8002b7a:	bf00      	nop
    }
}
 8002b7c:	3714      	adds	r7, #20
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd90      	pop	{r4, r7, pc}

08002b82 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002b82:	b580      	push	{r7, lr}
 8002b84:	b086      	sub	sp, #24
 8002b86:	af02      	add	r7, sp, #8
 8002b88:	60f8      	str	r0, [r7, #12]
 8002b8a:	4608      	mov	r0, r1
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	461a      	mov	r2, r3
 8002b90:	4603      	mov	r3, r0
 8002b92:	817b      	strh	r3, [r7, #10]
 8002b94:	460b      	mov	r3, r1
 8002b96:	813b      	strh	r3, [r7, #8]
 8002b98:	4613      	mov	r3, r2
 8002b9a:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	893a      	ldrh	r2, [r7, #8]
 8002ba0:	8979      	ldrh	r1, [r7, #10]
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	9000      	str	r0, [sp, #0]
 8002ba6:	68f8      	ldr	r0, [r7, #12]
 8002ba8:	f7ff ff60 	bl	8002a6c <u8g2_DrawHVLine>
}
 8002bac:	bf00      	nop
 8002bae:	3710      	adds	r7, #16
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	bd80      	pop	{r7, pc}

08002bb4 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af02      	add	r7, sp, #8
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	4608      	mov	r0, r1
 8002bbe:	4611      	mov	r1, r2
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	817b      	strh	r3, [r7, #10]
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	813b      	strh	r3, [r7, #8]
 8002bca:	4613      	mov	r3, r2
 8002bcc:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8002bce:	88fb      	ldrh	r3, [r7, #6]
 8002bd0:	893a      	ldrh	r2, [r7, #8]
 8002bd2:	8979      	ldrh	r1, [r7, #10]
 8002bd4:	2001      	movs	r0, #1
 8002bd6:	9000      	str	r0, [sp, #0]
 8002bd8:	68f8      	ldr	r0, [r7, #12]
 8002bda:	f7ff ff47 	bl	8002a6c <u8g2_DrawHVLine>
}
 8002bde:	bf00      	nop
 8002be0:	3710      	adds	r7, #16
 8002be2:	46bd      	mov	sp, r7
 8002be4:	bd80      	pop	{r7, pc}

08002be6 <u8g2_DrawPixel>:

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
 8002be6:	b580      	push	{r7, lr}
 8002be8:	b084      	sub	sp, #16
 8002bea:	af02      	add	r7, sp, #8
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	807b      	strh	r3, [r7, #2]
 8002bf2:	4613      	mov	r3, r2
 8002bf4:	803b      	strh	r3, [r7, #0]
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8002bfc:	883a      	ldrh	r2, [r7, #0]
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	d31a      	bcc.n	8002c38 <u8g2_DrawPixel+0x52>
    return;
  if ( y >= u8g2->user_y1 )
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8002c08:	883a      	ldrh	r2, [r7, #0]
 8002c0a:	429a      	cmp	r2, r3
 8002c0c:	d216      	bcs.n	8002c3c <u8g2_DrawPixel+0x56>
    return;
  if ( x < u8g2->user_x0 )
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8002c14:	887a      	ldrh	r2, [r7, #2]
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d312      	bcc.n	8002c40 <u8g2_DrawPixel+0x5a>
    return;
  if ( x >= u8g2->user_x1 )
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002c20:	887a      	ldrh	r2, [r7, #2]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d20e      	bcs.n	8002c44 <u8g2_DrawPixel+0x5e>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
 8002c26:	883a      	ldrh	r2, [r7, #0]
 8002c28:	8879      	ldrh	r1, [r7, #2]
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	9300      	str	r3, [sp, #0]
 8002c2e:	2301      	movs	r3, #1
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ff1b 	bl	8002a6c <u8g2_DrawHVLine>
 8002c36:	e006      	b.n	8002c46 <u8g2_DrawPixel+0x60>
    return;
 8002c38:	bf00      	nop
 8002c3a:	e004      	b.n	8002c46 <u8g2_DrawPixel+0x60>
    return;
 8002c3c:	bf00      	nop
 8002c3e:	e002      	b.n	8002c46 <u8g2_DrawPixel+0x60>
    return;
 8002c40:	bf00      	nop
 8002c42:	e000      	b.n	8002c46 <u8g2_DrawPixel+0x60>
    return;
 8002c44:	bf00      	nop
}
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	b083      	sub	sp, #12
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	460b      	mov	r3, r1
 8002c56:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8002c60:	78fb      	ldrb	r3, [r7, #3]
 8002c62:	2b02      	cmp	r3, #2
 8002c64:	d903      	bls.n	8002c6e <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bc80      	pop	{r7}
 8002c76:	4770      	bx	lr

08002c78 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8002c78:	b490      	push	{r4, r7}
 8002c7a:	b082      	sub	sp, #8
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	4604      	mov	r4, r0
 8002c80:	4608      	mov	r0, r1
 8002c82:	4611      	mov	r1, r2
 8002c84:	461a      	mov	r2, r3
 8002c86:	4623      	mov	r3, r4
 8002c88:	80fb      	strh	r3, [r7, #6]
 8002c8a:	4603      	mov	r3, r0
 8002c8c:	80bb      	strh	r3, [r7, #4]
 8002c8e:	460b      	mov	r3, r1
 8002c90:	807b      	strh	r3, [r7, #2]
 8002c92:	4613      	mov	r3, r2
 8002c94:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8002c96:	887a      	ldrh	r2, [r7, #2]
 8002c98:	88bb      	ldrh	r3, [r7, #4]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d20d      	bcs.n	8002cba <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002c9e:	883a      	ldrh	r2, [r7, #0]
 8002ca0:	88fb      	ldrh	r3, [r7, #6]
 8002ca2:	429a      	cmp	r2, r3
 8002ca4:	d901      	bls.n	8002caa <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e014      	b.n	8002cd4 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002caa:	887a      	ldrh	r2, [r7, #2]
 8002cac:	883b      	ldrh	r3, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d901      	bls.n	8002cb6 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e00e      	b.n	8002cd4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	e00c      	b.n	8002cd4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002cba:	883a      	ldrh	r2, [r7, #0]
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	d907      	bls.n	8002cd2 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8002cc2:	887a      	ldrh	r2, [r7, #2]
 8002cc4:	883b      	ldrh	r3, [r7, #0]
 8002cc6:	429a      	cmp	r2, r3
 8002cc8:	d901      	bls.n	8002cce <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002cca:	2301      	movs	r3, #1
 8002ccc:	e002      	b.n	8002cd4 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	e000      	b.n	8002cd4 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8002cd2:	2300      	movs	r3, #0
    }
  }
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	3708      	adds	r7, #8
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	bc90      	pop	{r4, r7}
 8002cdc:	4770      	bx	lr

08002cde <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002cde:	b580      	push	{r7, lr}
 8002ce0:	b084      	sub	sp, #16
 8002ce2:	af00      	add	r7, sp, #0
 8002ce4:	60f8      	str	r0, [r7, #12]
 8002ce6:	4608      	mov	r0, r1
 8002ce8:	4611      	mov	r1, r2
 8002cea:	461a      	mov	r2, r3
 8002cec:	4603      	mov	r3, r0
 8002cee:	817b      	strh	r3, [r7, #10]
 8002cf0:	460b      	mov	r3, r1
 8002cf2:	813b      	strh	r3, [r7, #8]
 8002cf4:	4613      	mov	r3, r2
 8002cf6:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8002d04:	8b3b      	ldrh	r3, [r7, #24]
 8002d06:	893a      	ldrh	r2, [r7, #8]
 8002d08:	f7ff ffb6 	bl	8002c78 <u8g2_is_intersection_decision_tree>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <u8g2_IsIntersection+0x38>
    return 0; 
 8002d12:	2300      	movs	r3, #0
 8002d14:	e00a      	b.n	8002d2c <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8002d22:	88fb      	ldrh	r3, [r7, #6]
 8002d24:	897a      	ldrh	r2, [r7, #10]
 8002d26:	f7ff ffa7 	bl	8002c78 <u8g2_is_intersection_decision_tree>
 8002d2a:	4603      	mov	r3, r0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3710      	adds	r7, #16
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b089      	sub	sp, #36	; 0x24
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	60f8      	str	r0, [r7, #12]
 8002d3c:	4608      	mov	r0, r1
 8002d3e:	4611      	mov	r1, r2
 8002d40:	461a      	mov	r2, r3
 8002d42:	4603      	mov	r3, r0
 8002d44:	817b      	strh	r3, [r7, #10]
 8002d46:	460b      	mov	r3, r1
 8002d48:	813b      	strh	r3, [r7, #8]
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002d4e:	893b      	ldrh	r3, [r7, #8]
 8002d50:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002d52:	7efb      	ldrb	r3, [r7, #27]
 8002d54:	f003 0307 	and.w	r3, r3, #7
 8002d58:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002d5e:	7e3a      	ldrb	r2, [r7, #24]
 8002d60:	7efb      	ldrb	r3, [r7, #27]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d801      	bhi.n	8002d7e <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002d7a:	7e3b      	ldrb	r3, [r7, #24]
 8002d7c:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d001      	beq.n	8002d8c <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8002d88:	7e3b      	ldrb	r3, [r7, #24]
 8002d8a:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002d8c:	893b      	ldrh	r3, [r7, #8]
 8002d8e:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002d90:	8afb      	ldrh	r3, [r7, #22]
 8002d92:	f023 0307 	bic.w	r3, r3, #7
 8002d96:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	7c1b      	ldrb	r3, [r3, #16]
 8002d9e:	b29b      	uxth	r3, r3
 8002da0:	8afa      	ldrh	r2, [r7, #22]
 8002da2:	fb02 f303 	mul.w	r3, r2, r3
 8002da6:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002dac:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002dae:	8afb      	ldrh	r3, [r7, #22]
 8002db0:	69fa      	ldr	r2, [r7, #28]
 8002db2:	4413      	add	r3, r2
 8002db4:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002db6:	897b      	ldrh	r3, [r7, #10]
 8002db8:	69fa      	ldr	r2, [r7, #28]
 8002dba:	4413      	add	r3, r2
 8002dbc:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002dbe:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d117      	bne.n	8002df6 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	781a      	ldrb	r2, [r3, #0]
 8002dca:	7ebb      	ldrb	r3, [r7, #26]
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	b2da      	uxtb	r2, r3
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002dd4:	69fb      	ldr	r3, [r7, #28]
 8002dd6:	781a      	ldrb	r2, [r3, #0]
 8002dd8:	7e7b      	ldrb	r3, [r7, #25]
 8002dda:	4053      	eors	r3, r2
 8002ddc:	b2da      	uxtb	r2, r3
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	701a      	strb	r2, [r3, #0]
	ptr++;
 8002de2:	69fb      	ldr	r3, [r7, #28]
 8002de4:	3301      	adds	r3, #1
 8002de6:	61fb      	str	r3, [r7, #28]
	len--;
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	3b01      	subs	r3, #1
 8002dec:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002dee:	88fb      	ldrh	r3, [r7, #6]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d1e8      	bne.n	8002dc6 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002df4:	e038      	b.n	8002e68 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	781a      	ldrb	r2, [r3, #0]
 8002dfa:	7ebb      	ldrb	r3, [r7, #26]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	781a      	ldrb	r2, [r3, #0]
 8002e08:	7e7b      	ldrb	r3, [r7, #25]
 8002e0a:	4053      	eors	r3, r2
 8002e0c:	b2da      	uxtb	r2, r3
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8002e12:	7efb      	ldrb	r3, [r7, #27]
 8002e14:	3301      	adds	r3, #1
 8002e16:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002e18:	7efb      	ldrb	r3, [r7, #27]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	76fb      	strb	r3, [r7, #27]
      len--;
 8002e20:	88fb      	ldrh	r3, [r7, #6]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002e26:	7efb      	ldrb	r3, [r7, #27]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d114      	bne.n	8002e56 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002e30:	461a      	mov	r2, r3
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	4413      	add	r3, r2
 8002e36:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d801      	bhi.n	8002e46 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002e42:	2301      	movs	r3, #1
 8002e44:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d008      	beq.n	8002e62 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002e50:	2301      	movs	r3, #1
 8002e52:	767b      	strb	r3, [r7, #25]
 8002e54:	e005      	b.n	8002e62 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002e56:	7ebb      	ldrb	r3, [r7, #26]
 8002e58:	005b      	lsls	r3, r3, #1
 8002e5a:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002e5c:	7e7b      	ldrb	r3, [r7, #25]
 8002e5e:	005b      	lsls	r3, r3, #1
 8002e60:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002e62:	88fb      	ldrh	r3, [r7, #6]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d1c6      	bne.n	8002df6 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002e68:	bf00      	nop
 8002e6a:	3724      	adds	r7, #36	; 0x24
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr

08002e72 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002e72:	b580      	push	{r7, lr}
 8002e74:	b082      	sub	sp, #8
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	2200      	movs	r2, #0
 8002e86:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e90:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e9a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea2:	685b      	ldr	r3, [r3, #4]
 8002ea4:	6878      	ldr	r0, [r7, #4]
 8002ea6:	4798      	blx	r3
}
 8002ea8:	bf00      	nop
 8002eaa:	3708      	adds	r7, #8
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}

08002eb0 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b084      	sub	sp, #16
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	60f8      	str	r0, [r7, #12]
 8002eb8:	60b9      	str	r1, [r7, #8]
 8002eba:	603b      	str	r3, [r7, #0]
 8002ebc:	4613      	mov	r3, r2
 8002ebe:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	683a      	ldr	r2, [r7, #0]
 8002eca:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	68ba      	ldr	r2, [r7, #8]
 8002ed0:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	79fa      	ldrb	r2, [r7, #7]
 8002ed6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	2200      	movs	r2, #0
 8002eee:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->draw_color = 1;
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	2201      	movs	r2, #1
 8002ef6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2201      	movs	r2, #1
 8002efe:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68f8      	ldr	r0, [r7, #12]
 8002f10:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff ffad 	bl	8002e72 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002f18:	68f8      	ldr	r0, [r7, #12]
 8002f1a:	f7ff fc65 	bl	80027e8 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2200      	movs	r2, #0
 8002f22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8002f26:	bf00      	nop
 8002f28:	3710      	adds	r7, #16
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}

08002f2e <u8g2_SendF>:
}

/*============================================*/

void u8g2_SendF(u8g2_t * u8g2, const char *fmt, ...)
{
 8002f2e:	b40e      	push	{r1, r2, r3}
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b085      	sub	sp, #20
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, fmt);
 8002f38:	f107 0320 	add.w	r3, r7, #32
 8002f3c:	60fb      	str	r3, [r7, #12]
  u8x8_cad_vsendf(u8g2_GetU8x8(u8g2), fmt, va);
 8002f3e:	68fa      	ldr	r2, [r7, #12]
 8002f40:	69f9      	ldr	r1, [r7, #28]
 8002f42:	6878      	ldr	r0, [r7, #4]
 8002f44:	f000 fa3d 	bl	80033c2 <u8x8_cad_vsendf>
  va_end(va);
}
 8002f48:	bf00      	nop
 8002f4a:	3714      	adds	r7, #20
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f52:	b003      	add	sp, #12
 8002f54:	4770      	bx	lr

08002f56 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f6a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002f6c:	89fb      	ldrh	r3, [r7, #14]
 8002f6e:	00db      	lsls	r3, r3, #3
 8002f70:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	89fa      	ldrh	r2, [r7, #14]
 8002f76:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002f78:	68bb      	ldr	r3, [r7, #8]
 8002f7a:	7c1b      	ldrb	r3, [r3, #16]
 8002f7c:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002f7e:	89fb      	ldrh	r3, [r7, #14]
 8002f80:	00db      	lsls	r3, r3, #3
 8002f82:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	89fa      	ldrh	r2, [r7, #14]
 8002f88:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002f90:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002f92:	89fb      	ldrh	r3, [r7, #14]
 8002f94:	00db      	lsls	r3, r3, #3
 8002f96:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	89fa      	ldrh	r2, [r7, #14]
 8002f9c:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fa4:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002fa6:	89fb      	ldrh	r3, [r7, #14]
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002fae:	4413      	add	r3, r2
 8002fb0:	68ba      	ldr	r2, [r7, #8]
 8002fb2:	7c52      	ldrb	r2, [r2, #17]
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	dd08      	ble.n	8002fca <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	7c5b      	ldrb	r3, [r3, #17]
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002fc4:	b29b      	uxth	r3, r3
 8002fc6:	1ad3      	subs	r3, r2, r3
 8002fc8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002fca:	89fb      	ldrh	r3, [r7, #14]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002fec:	89fb      	ldrh	r3, [r7, #14]
 8002fee:	4413      	add	r3, r2
 8002ff0:	b29a      	uxth	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	8a9a      	ldrh	r2, [r3, #20]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	8ada      	ldrh	r2, [r3, #22]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800300c:	bf00      	nop
 800300e:	3714      	adds	r7, #20
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b084      	sub	sp, #16
 800301a:	af02      	add	r7, sp, #8
 800301c:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003036:	9300      	str	r3, [sp, #0]
 8003038:	4603      	mov	r3, r0
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f7ff fe4f 	bl	8002cde <u8g2_IsIntersection>
 8003040:	4603      	mov	r3, r0
 8003042:	2b00      	cmp	r3, #0
 8003044:	d104      	bne.n	8003050 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800304e:	e03b      	b.n	80030c8 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2201      	movs	r2, #1
 8003054:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003064:	429a      	cmp	r2, r3
 8003066:	d205      	bcs.n	8003074 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003080:	429a      	cmp	r2, r3
 8003082:	d905      	bls.n	8003090 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800309c:	429a      	cmp	r2, r3
 800309e:	d205      	bcs.n	80030ac <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d905      	bls.n	80030c8 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80030c8:	bf00      	nop
 80030ca:	3708      	adds	r7, #8
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}

080030d0 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80030d8:	6878      	ldr	r0, [r7, #4]
 80030da:	f7ff ff3c 	bl	8002f56 <u8g2_update_dimension_common>
}
 80030de:	bf00      	nop
 80030e0:	3708      	adds	r7, #8
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd80      	pop	{r7, pc}

080030e6 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	f7ff ff7b 	bl	8003016 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8003120:	bf00      	nop
 8003122:	3708      	adds	r7, #8
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}

08003128 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	4608      	mov	r0, r1
 8003132:	4611      	mov	r1, r2
 8003134:	461a      	mov	r2, r3
 8003136:	4603      	mov	r3, r0
 8003138:	817b      	strh	r3, [r7, #10]
 800313a:	460b      	mov	r3, r1
 800313c:	813b      	strh	r3, [r7, #8]
 800313e:	4613      	mov	r3, r2
 8003140:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8003142:	88f8      	ldrh	r0, [r7, #6]
 8003144:	893a      	ldrh	r2, [r7, #8]
 8003146:	8979      	ldrh	r1, [r7, #10]
 8003148:	7e3b      	ldrb	r3, [r7, #24]
 800314a:	9300      	str	r3, [sp, #0]
 800314c:	4603      	mov	r3, r0
 800314e:	68f8      	ldr	r0, [r7, #12]
 8003150:	f7ff fc6b 	bl	8002a2a <u8g2_draw_hv_line_2dir>
}
 8003154:	bf00      	nop
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800315c:	b480      	push	{r7}
 800315e:	b083      	sub	sp, #12
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2200      	movs	r2, #0
 8003168:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800316c:	bf00      	nop
 800316e:	370c      	adds	r7, #12
 8003170:	46bd      	mov	sp, r7
 8003172:	bc80      	pop	{r7}
 8003174:	4770      	bx	lr

08003176 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8003176:	b480      	push	{r7}
 8003178:	b083      	sub	sp, #12
 800317a:	af00      	add	r7, sp, #0
 800317c:	6078      	str	r0, [r7, #4]
 800317e:	460b      	mov	r3, r1
 8003180:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d002      	beq.n	800318e <u8x8_ascii_next+0x18>
 8003188:	78fb      	ldrb	r3, [r7, #3]
 800318a:	2b0a      	cmp	r3, #10
 800318c:	d102      	bne.n	8003194 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 800318e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003192:	e001      	b.n	8003198 <u8x8_ascii_next+0x22>
  return b;
 8003194:	78fb      	ldrb	r3, [r7, #3]
 8003196:	b29b      	uxth	r3, r3
}
 8003198:	4618      	mov	r0, r3
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	bc80      	pop	{r7}
 80031a0:	4770      	bx	lr

080031a2 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80031a2:	b480      	push	{r7}
 80031a4:	b083      	sub	sp, #12
 80031a6:	af00      	add	r7, sp, #0
 80031a8:	6078      	str	r0, [r7, #4]
 80031aa:	460b      	mov	r3, r1
 80031ac:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80031ae:	78fb      	ldrb	r3, [r7, #3]
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d002      	beq.n	80031ba <u8x8_utf8_next+0x18>
 80031b4:	78fb      	ldrb	r3, [r7, #3]
 80031b6:	2b0a      	cmp	r3, #10
 80031b8:	d102      	bne.n	80031c0 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80031ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80031be:	e06e      	b.n	800329e <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d145      	bne.n	8003256 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 80031ca:	78fb      	ldrb	r3, [r7, #3]
 80031cc:	2bfb      	cmp	r3, #251	; 0xfb
 80031ce:	d908      	bls.n	80031e2 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2205      	movs	r2, #5
 80031d4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 80031d8:	78fb      	ldrb	r3, [r7, #3]
 80031da:	f003 0301 	and.w	r3, r3, #1
 80031de:	70fb      	strb	r3, [r7, #3]
 80031e0:	e032      	b.n	8003248 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 80031e2:	78fb      	ldrb	r3, [r7, #3]
 80031e4:	2bf7      	cmp	r3, #247	; 0xf7
 80031e6:	d908      	bls.n	80031fa <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2204      	movs	r2, #4
 80031ec:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 80031f0:	78fb      	ldrb	r3, [r7, #3]
 80031f2:	f003 0303 	and.w	r3, r3, #3
 80031f6:	70fb      	strb	r3, [r7, #3]
 80031f8:	e026      	b.n	8003248 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 80031fa:	78fb      	ldrb	r3, [r7, #3]
 80031fc:	2bef      	cmp	r3, #239	; 0xef
 80031fe:	d908      	bls.n	8003212 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2203      	movs	r2, #3
 8003204:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8003208:	78fb      	ldrb	r3, [r7, #3]
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	70fb      	strb	r3, [r7, #3]
 8003210:	e01a      	b.n	8003248 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8003212:	78fb      	ldrb	r3, [r7, #3]
 8003214:	2bdf      	cmp	r3, #223	; 0xdf
 8003216:	d908      	bls.n	800322a <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2202      	movs	r2, #2
 800321c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	f003 030f 	and.w	r3, r3, #15
 8003226:	70fb      	strb	r3, [r7, #3]
 8003228:	e00e      	b.n	8003248 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 800322a:	78fb      	ldrb	r3, [r7, #3]
 800322c:	2bbf      	cmp	r3, #191	; 0xbf
 800322e:	d908      	bls.n	8003242 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8003238:	78fb      	ldrb	r3, [r7, #3]
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	70fb      	strb	r3, [r7, #3]
 8003240:	e002      	b.n	8003248 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8003242:	78fb      	ldrb	r3, [r7, #3]
 8003244:	b29b      	uxth	r3, r3
 8003246:	e02a      	b.n	800329e <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8003248:	78fb      	ldrb	r3, [r7, #3]
 800324a:	b29a      	uxth	r2, r3
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8003250:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003254:	e023      	b.n	800329e <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800325c:	3b01      	subs	r3, #1
 800325e:	b2da      	uxtb	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	8c1b      	ldrh	r3, [r3, #32]
 800326a:	019b      	lsls	r3, r3, #6
 800326c:	b29a      	uxth	r2, r3
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8003272:	78fb      	ldrb	r3, [r7, #3]
 8003274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003278:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	8c1a      	ldrh	r2, [r3, #32]
 800327e:	78fb      	ldrb	r3, [r7, #3]
 8003280:	b29b      	uxth	r3, r3
 8003282:	4313      	orrs	r3, r2
 8003284:	b29a      	uxth	r2, r3
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003290:	2b00      	cmp	r3, #0
 8003292:	d002      	beq.n	800329a <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8003294:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8003298:	e001      	b.n	800329e <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	8c1b      	ldrh	r3, [r3, #32]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bc80      	pop	{r7}
 80032a6:	4770      	bx	lr

080032a8 <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
 80032a8:	b590      	push	{r4, r7, lr}
 80032aa:	b083      	sub	sp, #12
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
 80032b0:	460b      	mov	r3, r1
 80032b2:	70fb      	strb	r3, [r7, #3]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	691c      	ldr	r4, [r3, #16]
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	2300      	movs	r3, #0
 80032bc:	2120      	movs	r1, #32
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	47a0      	blx	r4
 80032c2:	4603      	mov	r3, r0
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bd90      	pop	{r4, r7, pc}

080032cc <u8x8_byte_SendBytes>:

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80032cc:	b590      	push	{r4, r7, lr}
 80032ce:	b085      	sub	sp, #20
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	60f8      	str	r0, [r7, #12]
 80032d4:	460b      	mov	r3, r1
 80032d6:	607a      	str	r2, [r7, #4]
 80032d8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	691c      	ldr	r4, [r3, #16]
 80032de:	7afa      	ldrb	r2, [r7, #11]
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2117      	movs	r1, #23
 80032e4:	68f8      	ldr	r0, [r7, #12]
 80032e6:	47a0      	blx	r4
 80032e8:	4603      	mov	r3, r0
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	bd90      	pop	{r4, r7, pc}

080032f2 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80032f2:	b580      	push	{r7, lr}
 80032f4:	b082      	sub	sp, #8
 80032f6:	af00      	add	r7, sp, #0
 80032f8:	6078      	str	r0, [r7, #4]
 80032fa:	460b      	mov	r3, r1
 80032fc:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80032fe:	1cfb      	adds	r3, r7, #3
 8003300:	461a      	mov	r2, r3
 8003302:	2101      	movs	r1, #1
 8003304:	6878      	ldr	r0, [r7, #4]
 8003306:	f7ff ffe1 	bl	80032cc <u8x8_byte_SendBytes>
 800330a:	4603      	mov	r3, r0
}
 800330c:	4618      	mov	r0, r3
 800330e:	3708      	adds	r7, #8
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8003314:	b590      	push	{r4, r7, lr}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68dc      	ldr	r4, [r3, #12]
 8003324:	78fa      	ldrb	r2, [r7, #3]
 8003326:	2300      	movs	r3, #0
 8003328:	2115      	movs	r1, #21
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	47a0      	blx	r4
 800332e:	4603      	mov	r3, r0
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	bd90      	pop	{r4, r7, pc}

08003338 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8003338:	b590      	push	{r4, r7, lr}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
 8003340:	460b      	mov	r3, r1
 8003342:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	68dc      	ldr	r4, [r3, #12]
 8003348:	78fa      	ldrb	r2, [r7, #3]
 800334a:	2300      	movs	r3, #0
 800334c:	2116      	movs	r1, #22
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	47a0      	blx	r4
 8003352:	4603      	mov	r3, r0
}
 8003354:	4618      	mov	r0, r3
 8003356:	370c      	adds	r7, #12
 8003358:	46bd      	mov	sp, r7
 800335a:	bd90      	pop	{r4, r7, pc}

0800335c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800335c:	b590      	push	{r4, r7, lr}
 800335e:	b085      	sub	sp, #20
 8003360:	af00      	add	r7, sp, #0
 8003362:	60f8      	str	r0, [r7, #12]
 8003364:	460b      	mov	r3, r1
 8003366:	607a      	str	r2, [r7, #4]
 8003368:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68dc      	ldr	r4, [r3, #12]
 800336e:	7afa      	ldrb	r2, [r7, #11]
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	2117      	movs	r1, #23
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	47a0      	blx	r4
 8003378:	4603      	mov	r3, r0
}
 800337a:	4618      	mov	r0, r3
 800337c:	3714      	adds	r7, #20
 800337e:	46bd      	mov	sp, r7
 8003380:	bd90      	pop	{r4, r7, pc}

08003382 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8003382:	b590      	push	{r4, r7, lr}
 8003384:	b083      	sub	sp, #12
 8003386:	af00      	add	r7, sp, #0
 8003388:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	68dc      	ldr	r4, [r3, #12]
 800338e:	2300      	movs	r3, #0
 8003390:	2200      	movs	r2, #0
 8003392:	2118      	movs	r1, #24
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	47a0      	blx	r4
 8003398:	4603      	mov	r3, r0
}
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd90      	pop	{r4, r7, pc}

080033a2 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80033a2:	b590      	push	{r4, r7, lr}
 80033a4:	b083      	sub	sp, #12
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	68dc      	ldr	r4, [r3, #12]
 80033ae:	2300      	movs	r3, #0
 80033b0:	2200      	movs	r2, #0
 80033b2:	2119      	movs	r1, #25
 80033b4:	6878      	ldr	r0, [r7, #4]
 80033b6:	47a0      	blx	r4
 80033b8:	4603      	mov	r3, r0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	370c      	adds	r7, #12
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd90      	pop	{r4, r7, pc}

080033c2 <u8x8_cad_vsendf>:

void u8x8_cad_vsendf(u8x8_t * u8x8, const char *fmt, va_list va)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b086      	sub	sp, #24
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	607a      	str	r2, [r7, #4]
  uint8_t d;
  u8x8_cad_StartTransfer(u8x8);
 80033ce:	68f8      	ldr	r0, [r7, #12]
 80033d0:	f7ff ffd7 	bl	8003382 <u8x8_cad_StartTransfer>
  while( *fmt != '\0' )
 80033d4:	e027      	b.n	8003426 <u8x8_cad_vsendf+0x64>
  {
    d = (uint8_t)va_arg(va, int);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	1d1a      	adds	r2, r3, #4
 80033da:	607a      	str	r2, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	75fb      	strb	r3, [r7, #23]
    switch(*fmt)
 80033e2:	68bb      	ldr	r3, [r7, #8]
 80033e4:	781b      	ldrb	r3, [r3, #0]
 80033e6:	2b64      	cmp	r3, #100	; 0x64
 80033e8:	d012      	beq.n	8003410 <u8x8_cad_vsendf+0x4e>
 80033ea:	2b64      	cmp	r3, #100	; 0x64
 80033ec:	dc18      	bgt.n	8003420 <u8x8_cad_vsendf+0x5e>
 80033ee:	2b61      	cmp	r3, #97	; 0x61
 80033f0:	d002      	beq.n	80033f8 <u8x8_cad_vsendf+0x36>
 80033f2:	2b63      	cmp	r3, #99	; 0x63
 80033f4:	d006      	beq.n	8003404 <u8x8_cad_vsendf+0x42>
 80033f6:	e013      	b.n	8003420 <u8x8_cad_vsendf+0x5e>
    {
      case 'a':  u8x8_cad_SendArg(u8x8, d); break;
 80033f8:	7dfb      	ldrb	r3, [r7, #23]
 80033fa:	4619      	mov	r1, r3
 80033fc:	68f8      	ldr	r0, [r7, #12]
 80033fe:	f7ff ff9b 	bl	8003338 <u8x8_cad_SendArg>
 8003402:	e00d      	b.n	8003420 <u8x8_cad_vsendf+0x5e>
      case 'c':  u8x8_cad_SendCmd(u8x8, d); break;
 8003404:	7dfb      	ldrb	r3, [r7, #23]
 8003406:	4619      	mov	r1, r3
 8003408:	68f8      	ldr	r0, [r7, #12]
 800340a:	f7ff ff83 	bl	8003314 <u8x8_cad_SendCmd>
 800340e:	e007      	b.n	8003420 <u8x8_cad_vsendf+0x5e>
      case 'd':  u8x8_cad_SendData(u8x8, 1, &d); break;
 8003410:	f107 0317 	add.w	r3, r7, #23
 8003414:	461a      	mov	r2, r3
 8003416:	2101      	movs	r1, #1
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f7ff ff9f 	bl	800335c <u8x8_cad_SendData>
 800341e:	bf00      	nop
    }
    fmt++;
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	3301      	adds	r3, #1
 8003424:	60bb      	str	r3, [r7, #8]
  while( *fmt != '\0' )
 8003426:	68bb      	ldr	r3, [r7, #8]
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d1d3      	bne.n	80033d6 <u8x8_cad_vsendf+0x14>
  }
  u8x8_cad_EndTransfer(u8x8);
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f7ff ffb7 	bl	80033a2 <u8x8_cad_EndTransfer>
}
 8003434:	bf00      	nop
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800343c:	b590      	push	{r4, r7, lr}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
 8003444:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	73fb      	strb	r3, [r7, #15]
    data++;
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	3301      	adds	r3, #1
 8003450:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8003452:	7bfb      	ldrb	r3, [r7, #15]
 8003454:	2bfe      	cmp	r3, #254	; 0xfe
 8003456:	d031      	beq.n	80034bc <u8x8_cad_SendSequence+0x80>
 8003458:	2bfe      	cmp	r3, #254	; 0xfe
 800345a:	dc3d      	bgt.n	80034d8 <u8x8_cad_SendSequence+0x9c>
 800345c:	2b19      	cmp	r3, #25
 800345e:	dc3b      	bgt.n	80034d8 <u8x8_cad_SendSequence+0x9c>
 8003460:	2b18      	cmp	r3, #24
 8003462:	da23      	bge.n	80034ac <u8x8_cad_SendSequence+0x70>
 8003464:	2b16      	cmp	r3, #22
 8003466:	dc02      	bgt.n	800346e <u8x8_cad_SendSequence+0x32>
 8003468:	2b15      	cmp	r3, #21
 800346a:	da03      	bge.n	8003474 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800346c:	e034      	b.n	80034d8 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800346e:	2b17      	cmp	r3, #23
 8003470:	d00e      	beq.n	8003490 <u8x8_cad_SendSequence+0x54>
	return;
 8003472:	e031      	b.n	80034d8 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68dc      	ldr	r4, [r3, #12]
 800347e:	7bba      	ldrb	r2, [r7, #14]
 8003480:	7bf9      	ldrb	r1, [r7, #15]
 8003482:	2300      	movs	r3, #0
 8003484:	6878      	ldr	r0, [r7, #4]
 8003486:	47a0      	blx	r4
	  data++;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	3301      	adds	r3, #1
 800348c:	603b      	str	r3, [r7, #0]
	  break;
 800348e:	e022      	b.n	80034d6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8003496:	f107 030e 	add.w	r3, r7, #14
 800349a:	461a      	mov	r2, r3
 800349c:	2101      	movs	r1, #1
 800349e:	6878      	ldr	r0, [r7, #4]
 80034a0:	f7ff ff5c 	bl	800335c <u8x8_cad_SendData>
	  data++;
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	3301      	adds	r3, #1
 80034a8:	603b      	str	r3, [r7, #0]
	  break;
 80034aa:	e014      	b.n	80034d6 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68dc      	ldr	r4, [r3, #12]
 80034b0:	7bf9      	ldrb	r1, [r7, #15]
 80034b2:	2300      	movs	r3, #0
 80034b4:	2200      	movs	r2, #0
 80034b6:	6878      	ldr	r0, [r7, #4]
 80034b8:	47a0      	blx	r4
	  break;
 80034ba:	e00c      	b.n	80034d6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80034bc:	683b      	ldr	r3, [r7, #0]
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80034c2:	7bbb      	ldrb	r3, [r7, #14]
 80034c4:	461a      	mov	r2, r3
 80034c6:	2129      	movs	r1, #41	; 0x29
 80034c8:	6878      	ldr	r0, [r7, #4]
 80034ca:	f000 f9ec 	bl	80038a6 <u8x8_gpio_call>
	  data++;
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	3301      	adds	r3, #1
 80034d2:	603b      	str	r3, [r7, #0]
	  break;
 80034d4:	bf00      	nop
    cmd = *data;
 80034d6:	e7b6      	b.n	8003446 <u8x8_cad_SendSequence+0xa>
	return;
 80034d8:	bf00      	nop
    }
  }
}
 80034da:	3714      	adds	r7, #20
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd90      	pop	{r4, r7, pc}

080034e0 <u8x8_cad_001>:
  convert to bytes by using 
    dc = 0 for commands and args and
    dc = 1 for data
*/
uint8_t u8x8_cad_001(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80034e0:	b590      	push	{r4, r7, lr}
 80034e2:	b085      	sub	sp, #20
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607b      	str	r3, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	72fb      	strb	r3, [r7, #11]
 80034ee:	4613      	mov	r3, r2
 80034f0:	72bb      	strb	r3, [r7, #10]
  switch(msg)
 80034f2:	7afb      	ldrb	r3, [r7, #11]
 80034f4:	3b14      	subs	r3, #20
 80034f6:	2b05      	cmp	r3, #5
 80034f8:	d82f      	bhi.n	800355a <u8x8_cad_001+0x7a>
 80034fa:	a201      	add	r2, pc, #4	; (adr r2, 8003500 <u8x8_cad_001+0x20>)
 80034fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003500:	08003549 	.word	0x08003549
 8003504:	08003519 	.word	0x08003519
 8003508:	0800352d 	.word	0x0800352d
 800350c:	08003541 	.word	0x08003541
 8003510:	08003549 	.word	0x08003549
 8003514:	08003549 	.word	0x08003549
  {
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 0);
 8003518:	2100      	movs	r1, #0
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f7ff fec4 	bl	80032a8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003520:	7abb      	ldrb	r3, [r7, #10]
 8003522:	4619      	mov	r1, r3
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f7ff fee4 	bl	80032f2 <u8x8_byte_SendByte>
      break;
 800352a:	e018      	b.n	800355e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 0);
 800352c:	2100      	movs	r1, #0
 800352e:	68f8      	ldr	r0, [r7, #12]
 8003530:	f7ff feba 	bl	80032a8 <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
 8003534:	7abb      	ldrb	r3, [r7, #10]
 8003536:	4619      	mov	r1, r3
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff feda 	bl	80032f2 <u8x8_byte_SendByte>
      break;
 800353e:	e00e      	b.n	800355e <u8x8_cad_001+0x7e>
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 1);
 8003540:	2101      	movs	r1, #1
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f7ff feb0 	bl	80032a8 <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	691c      	ldr	r4, [r3, #16]
 800354c:	7aba      	ldrb	r2, [r7, #10]
 800354e:	7af9      	ldrb	r1, [r7, #11]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68f8      	ldr	r0, [r7, #12]
 8003554:	47a0      	blx	r4
 8003556:	4603      	mov	r3, r0
 8003558:	e002      	b.n	8003560 <u8x8_cad_001+0x80>
    default:
      return 0;
 800355a:	2300      	movs	r3, #0
 800355c:	e000      	b.n	8003560 <u8x8_cad_001+0x80>
  }
  return 1;
 800355e:	2301      	movs	r3, #1
}
 8003560:	4618      	mov	r0, r3
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	bd90      	pop	{r4, r7, pc}

08003568 <u8x8_d_uc1604_common>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_uc1604_common(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b086      	sub	sp, #24
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	607b      	str	r3, [r7, #4]
 8003572:	460b      	mov	r3, r1
 8003574:	72fb      	strb	r3, [r7, #11]
 8003576:	4613      	mov	r3, r2
 8003578:	72bb      	strb	r3, [r7, #10]
  uint8_t x, y, c;
  uint8_t *ptr;
  switch(msg)
 800357a:	7afb      	ldrb	r3, [r7, #11]
 800357c:	3b0b      	subs	r3, #11
 800357e:	2b04      	cmp	r3, #4
 8003580:	f200 808e 	bhi.w	80036a0 <u8x8_d_uc1604_common+0x138>
 8003584:	a201      	add	r2, pc, #4	; (adr r2, 800358c <u8x8_d_uc1604_common+0x24>)
 8003586:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800358a:	bf00      	nop
 800358c:	08003635 	.word	0x08003635
 8003590:	080036a1 	.word	0x080036a1
 8003594:	0800364f 	.word	0x0800364f
 8003598:	08003681 	.word	0x08003681
 800359c:	080035a1 	.word	0x080035a1
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7ff feee 	bl	8003382 <u8x8_cad_StartTransfer>
    
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	795b      	ldrb	r3, [r3, #5]
 80035aa:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80035ac:	7dfb      	ldrb	r3, [r7, #23]
 80035ae:	00db      	lsls	r3, r3, #3
 80035b0:	75fb      	strb	r3, [r7, #23]
   
      u8x8_cad_SendCmd(u8x8, 0x000 | ((x&15)));
 80035b2:	7dfb      	ldrb	r3, [r7, #23]
 80035b4:	f003 030f 	and.w	r3, r3, #15
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	4619      	mov	r1, r3
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff fea9 	bl	8003314 <u8x8_cad_SendCmd>
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80035c2:	7dfb      	ldrb	r3, [r7, #23]
 80035c4:	091b      	lsrs	r3, r3, #4
 80035c6:	b2db      	uxtb	r3, r3
 80035c8:	f043 0310 	orr.w	r3, r3, #16
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	4619      	mov	r1, r3
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff fe9f 	bl	8003314 <u8x8_cad_SendCmd>
    
      y = ((u8x8_tile_t *)arg_ptr)->y_pos;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	799b      	ldrb	r3, [r3, #6]
 80035da:	75bb      	strb	r3, [r7, #22]
      y += u8x8->x_offset;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80035e2:	7dbb      	ldrb	r3, [r7, #22]
 80035e4:	4413      	add	r3, r2
 80035e6:	75bb      	strb	r3, [r7, #22]
      u8x8_cad_SendCmd(u8x8, 0x0b0 | (y&15));
 80035e8:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80035ec:	f003 030f 	and.w	r3, r3, #15
 80035f0:	b25b      	sxtb	r3, r3
 80035f2:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80035f6:	b25b      	sxtb	r3, r3
 80035f8:	b2db      	uxtb	r3, r3
 80035fa:	4619      	mov	r1, r3
 80035fc:	68f8      	ldr	r0, [r7, #12]
 80035fe:	f7ff fe89 	bl	8003314 <u8x8_cad_SendCmd>
    
      c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	791b      	ldrb	r3, [r3, #4]
 8003606:	757b      	strb	r3, [r7, #21]
      c *= 8;
 8003608:	7d7b      	ldrb	r3, [r7, #21]
 800360a:	00db      	lsls	r3, r3, #3
 800360c:	757b      	strb	r3, [r7, #21]
      ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	613b      	str	r3, [r7, #16]
      do
      {
	u8x8_cad_SendData(u8x8, c, ptr);	/* note: SendData can not handle more than 255 bytes */
 8003614:	7d7b      	ldrb	r3, [r7, #21]
 8003616:	693a      	ldr	r2, [r7, #16]
 8003618:	4619      	mov	r1, r3
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f7ff fe9e 	bl	800335c <u8x8_cad_SendData>
	arg_int--;
 8003620:	7abb      	ldrb	r3, [r7, #10]
 8003622:	3b01      	subs	r3, #1
 8003624:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8003626:	7abb      	ldrb	r3, [r7, #10]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1f3      	bne.n	8003614 <u8x8_d_uc1604_common+0xac>
      
      u8x8_cad_EndTransfer(u8x8);
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f7ff feb8 	bl	80033a2 <u8x8_cad_EndTransfer>
      break;
 8003632:	e037      	b.n	80036a4 <u8x8_d_uc1604_common+0x13c>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_uc1701_dogs102_init_seq);
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8003634:	7abb      	ldrb	r3, [r7, #10]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d104      	bne.n	8003644 <u8x8_d_uc1604_common+0xdc>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave0_seq);
 800363a:	491d      	ldr	r1, [pc, #116]	; (80036b0 <u8x8_d_uc1604_common+0x148>)
 800363c:	68f8      	ldr	r0, [r7, #12]
 800363e:	f7ff fefd 	bl	800343c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
      break;
 8003642:	e02f      	b.n	80036a4 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_powersave1_seq);
 8003644:	491b      	ldr	r1, [pc, #108]	; (80036b4 <u8x8_d_uc1604_common+0x14c>)
 8003646:	68f8      	ldr	r0, [r7, #12]
 8003648:	f7ff fef8 	bl	800343c <u8x8_cad_SendSequence>
      break;
 800364c:	e02a      	b.n	80036a4 <u8x8_d_uc1604_common+0x13c>
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 800364e:	7abb      	ldrb	r3, [r7, #10]
 8003650:	2b00      	cmp	r3, #0
 8003652:	d10a      	bne.n	800366a <u8x8_d_uc1604_common+0x102>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip0_seq);
 8003654:	4918      	ldr	r1, [pc, #96]	; (80036b8 <u8x8_d_uc1604_common+0x150>)
 8003656:	68f8      	ldr	r0, [r7, #12]
 8003658:	f7ff fef0 	bl	800343c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	7c9a      	ldrb	r2, [r3, #18]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }	
      break;
 8003668:	e01c      	b.n	80036a4 <u8x8_d_uc1604_common+0x13c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_flip1_seq);
 800366a:	4914      	ldr	r1, [pc, #80]	; (80036bc <u8x8_d_uc1604_common+0x154>)
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f7ff fee5 	bl	800343c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	7cda      	ldrb	r2, [r3, #19]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 800367e:	e011      	b.n	80036a4 <u8x8_d_uc1604_common+0x13c>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff fe7e 	bl	8003382 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8003686:	2181      	movs	r1, #129	; 0x81
 8003688:	68f8      	ldr	r0, [r7, #12]
 800368a:	f7ff fe43 	bl	8003314 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int  );	/* uc1604 has range from 0 to 255 */
 800368e:	7abb      	ldrb	r3, [r7, #10]
 8003690:	4619      	mov	r1, r3
 8003692:	68f8      	ldr	r0, [r7, #12]
 8003694:	f7ff fe50 	bl	8003338 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8003698:	68f8      	ldr	r0, [r7, #12]
 800369a:	f7ff fe82 	bl	80033a2 <u8x8_cad_EndTransfer>
      break;
 800369e:	e001      	b.n	80036a4 <u8x8_d_uc1604_common+0x13c>
#endif
    default:
      return 0;
 80036a0:	2300      	movs	r3, #0
 80036a2:	e000      	b.n	80036a6 <u8x8_d_uc1604_common+0x13e>
  }
  return 1;
 80036a4:	2301      	movs	r3, #1
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
 80036ae:	bf00      	nop
 80036b0:	08006d74 	.word	0x08006d74
 80036b4:	08006d84 	.word	0x08006d84
 80036b8:	08006d8c 	.word	0x08006d8c
 80036bc:	08006d94 	.word	0x08006d94

080036c0 <u8x8_d_uc1604_jlx19264>:
  U8X8_END_TRANSFER(),             	/* disable chip */
  U8X8_END()             			/* end of sequence */
};

uint8_t u8x8_d_uc1604_jlx19264(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	607b      	str	r3, [r7, #4]
 80036ca:	460b      	mov	r3, r1
 80036cc:	72fb      	strb	r3, [r7, #11]
 80036ce:	4613      	mov	r3, r2
 80036d0:	72bb      	strb	r3, [r7, #10]
  /* call common procedure first and handle messages there */
  if ( u8x8_d_uc1604_common(u8x8, msg, arg_int, arg_ptr) == 0 )
 80036d2:	7aba      	ldrb	r2, [r7, #10]
 80036d4:	7af9      	ldrb	r1, [r7, #11]
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	68f8      	ldr	r0, [r7, #12]
 80036da:	f7ff ff45 	bl	8003568 <u8x8_d_uc1604_common>
 80036de:	4603      	mov	r3, r0
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d114      	bne.n	800370e <u8x8_d_uc1604_jlx19264+0x4e>
  {
    /* msg not handled, then try here */
    switch(msg)
 80036e4:	7afb      	ldrb	r3, [r7, #11]
 80036e6:	2b09      	cmp	r3, #9
 80036e8:	d002      	beq.n	80036f0 <u8x8_d_uc1604_jlx19264+0x30>
 80036ea:	2b0a      	cmp	r3, #10
 80036ec:	d005      	beq.n	80036fa <u8x8_d_uc1604_jlx19264+0x3a>
 80036ee:	e00c      	b.n	800370a <u8x8_d_uc1604_jlx19264+0x4a>
    {
      case U8X8_MSG_DISPLAY_SETUP_MEMORY:
	u8x8_d_helper_display_setup_memory(u8x8, &u8x8_uc1604_192x64_display_info);
 80036f0:	490a      	ldr	r1, [pc, #40]	; (800371c <u8x8_d_uc1604_jlx19264+0x5c>)
 80036f2:	68f8      	ldr	r0, [r7, #12]
 80036f4:	f000 f816 	bl	8003724 <u8x8_d_helper_display_setup_memory>
	break;
 80036f8:	e00a      	b.n	8003710 <u8x8_d_uc1604_jlx19264+0x50>
      case U8X8_MSG_DISPLAY_INIT:
	u8x8_d_helper_display_init(u8x8);
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 f825 	bl	800374a <u8x8_d_helper_display_init>
	u8x8_cad_SendSequence(u8x8, u8x8_d_uc1604_jlx19264_init_seq);
 8003700:	4907      	ldr	r1, [pc, #28]	; (8003720 <u8x8_d_uc1604_jlx19264+0x60>)
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f7ff fe9a 	bl	800343c <u8x8_cad_SendSequence>
	break;
 8003708:	e002      	b.n	8003710 <u8x8_d_uc1604_jlx19264+0x50>
      default:
	return 0;		/* msg unknown */
 800370a:	2300      	movs	r3, #0
 800370c:	e001      	b.n	8003712 <u8x8_d_uc1604_jlx19264+0x52>
    }
  }
 800370e:	bf00      	nop
  return 1;
 8003710:	2301      	movs	r3, #1
}
 8003712:	4618      	mov	r0, r3
 8003714:	3710      	adds	r7, #16
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	08006d9c 	.word	0x08006d9c
 8003720:	08006db4 	.word	0x08006db4

08003724 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	7c9a      	ldrb	r2, [r3, #18]
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003740:	bf00      	nop
 8003742:	370c      	adds	r7, #12
 8003744:	46bd      	mov	sp, r7
 8003746:	bc80      	pop	{r7}
 8003748:	4770      	bx	lr

0800374a <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b083      	sub	sp, #12
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	695c      	ldr	r4, [r3, #20]
 8003756:	2300      	movs	r3, #0
 8003758:	2200      	movs	r2, #0
 800375a:	2128      	movs	r1, #40	; 0x28
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68dc      	ldr	r4, [r3, #12]
 8003764:	2300      	movs	r3, #0
 8003766:	2200      	movs	r2, #0
 8003768:	2114      	movs	r1, #20
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800376e:	2201      	movs	r2, #1
 8003770:	214b      	movs	r1, #75	; 0x4b
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f897 	bl	80038a6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	791b      	ldrb	r3, [r3, #4]
 800377e:	461a      	mov	r2, r3
 8003780:	2129      	movs	r1, #41	; 0x29
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 f88f 	bl	80038a6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8003788:	2200      	movs	r2, #0
 800378a:	214b      	movs	r1, #75	; 0x4b
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f88a 	bl	80038a6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	791b      	ldrb	r3, [r3, #4]
 8003798:	461a      	mov	r2, r3
 800379a:	2129      	movs	r1, #41	; 0x29
 800379c:	6878      	ldr	r0, [r7, #4]
 800379e:	f000 f882 	bl	80038a6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80037a2:	2201      	movs	r2, #1
 80037a4:	214b      	movs	r1, #75	; 0x4b
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f87d 	bl	80038a6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	795b      	ldrb	r3, [r3, #5]
 80037b2:	461a      	mov	r2, r3
 80037b4:	2129      	movs	r1, #41	; 0x29
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f875 	bl	80038a6 <u8x8_gpio_call>
}    
 80037bc:	bf00      	nop
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd90      	pop	{r4, r7, pc}

080037c4 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80037c4:	b590      	push	{r4, r7, lr}
 80037c6:	b085      	sub	sp, #20
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
 80037cc:	4608      	mov	r0, r1
 80037ce:	4611      	mov	r1, r2
 80037d0:	461a      	mov	r2, r3
 80037d2:	4603      	mov	r3, r0
 80037d4:	70fb      	strb	r3, [r7, #3]
 80037d6:	460b      	mov	r3, r1
 80037d8:	70bb      	strb	r3, [r7, #2]
 80037da:	4613      	mov	r3, r2
 80037dc:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80037de:	78fb      	ldrb	r3, [r7, #3]
 80037e0:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80037e2:	78bb      	ldrb	r3, [r7, #2]
 80037e4:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80037e6:	787b      	ldrb	r3, [r7, #1]
 80037e8:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80037ea:	6a3b      	ldr	r3, [r7, #32]
 80037ec:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689c      	ldr	r4, [r3, #8]
 80037f2:	f107 0308 	add.w	r3, r7, #8
 80037f6:	2201      	movs	r2, #1
 80037f8:	210f      	movs	r1, #15
 80037fa:	6878      	ldr	r0, [r7, #4]
 80037fc:	47a0      	blx	r4
 80037fe:	4603      	mov	r3, r0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3714      	adds	r7, #20
 8003804:	46bd      	mov	sp, r7
 8003806:	bd90      	pop	{r4, r7, pc}

08003808 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8003808:	b590      	push	{r4, r7, lr}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689c      	ldr	r4, [r3, #8]
 8003814:	2300      	movs	r3, #0
 8003816:	2200      	movs	r2, #0
 8003818:	2109      	movs	r1, #9
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	47a0      	blx	r4
}
 800381e:	bf00      	nop
 8003820:	370c      	adds	r7, #12
 8003822:	46bd      	mov	sp, r7
 8003824:	bd90      	pop	{r4, r7, pc}

08003826 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8003826:	b590      	push	{r4, r7, lr}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689c      	ldr	r4, [r3, #8]
 8003832:	2300      	movs	r3, #0
 8003834:	2200      	movs	r2, #0
 8003836:	210a      	movs	r1, #10
 8003838:	6878      	ldr	r0, [r7, #4]
 800383a:	47a0      	blx	r4
}
 800383c:	bf00      	nop
 800383e:	370c      	adds	r7, #12
 8003840:	46bd      	mov	sp, r7
 8003842:	bd90      	pop	{r4, r7, pc}

08003844 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003844:	b590      	push	{r4, r7, lr}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	689c      	ldr	r4, [r3, #8]
 8003854:	78fa      	ldrb	r2, [r7, #3]
 8003856:	2300      	movs	r3, #0
 8003858:	210b      	movs	r1, #11
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	47a0      	blx	r4
}
 800385e:	bf00      	nop
 8003860:	370c      	adds	r7, #12
 8003862:	46bd      	mov	sp, r7
 8003864:	bd90      	pop	{r4, r7, pc}

08003866 <u8x8_SetContrast>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
 8003866:	b590      	push	{r4, r7, lr}
 8003868:	b083      	sub	sp, #12
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
 800386e:	460b      	mov	r3, r1
 8003870:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	689c      	ldr	r4, [r3, #8]
 8003876:	78fa      	ldrb	r2, [r7, #3]
 8003878:	2300      	movs	r3, #0
 800387a:	210e      	movs	r1, #14
 800387c:	6878      	ldr	r0, [r7, #4]
 800387e:	47a0      	blx	r4
}
 8003880:	bf00      	nop
 8003882:	370c      	adds	r7, #12
 8003884:	46bd      	mov	sp, r7
 8003886:	bd90      	pop	{r4, r7, pc}

08003888 <u8x8_RefreshDisplay>:

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003888:	b590      	push	{r4, r7, lr}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689c      	ldr	r4, [r3, #8]
 8003894:	2300      	movs	r3, #0
 8003896:	2200      	movs	r2, #0
 8003898:	2110      	movs	r1, #16
 800389a:	6878      	ldr	r0, [r7, #4]
 800389c:	47a0      	blx	r4
}
 800389e:	bf00      	nop
 80038a0:	370c      	adds	r7, #12
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd90      	pop	{r4, r7, pc}

080038a6 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80038a6:	b590      	push	{r4, r7, lr}
 80038a8:	b083      	sub	sp, #12
 80038aa:	af00      	add	r7, sp, #0
 80038ac:	6078      	str	r0, [r7, #4]
 80038ae:	460b      	mov	r3, r1
 80038b0:	70fb      	strb	r3, [r7, #3]
 80038b2:	4613      	mov	r3, r2
 80038b4:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	695c      	ldr	r4, [r3, #20]
 80038ba:	78ba      	ldrb	r2, [r7, #2]
 80038bc:	78f9      	ldrb	r1, [r7, #3]
 80038be:	2300      	movs	r3, #0
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	47a0      	blx	r4
}
 80038c4:	bf00      	nop
 80038c6:	370c      	adds	r7, #12
 80038c8:	46bd      	mov	sp, r7
 80038ca:	bd90      	pop	{r4, r7, pc}

080038cc <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b085      	sub	sp, #20
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	60f8      	str	r0, [r7, #12]
 80038d4:	607b      	str	r3, [r7, #4]
 80038d6:	460b      	mov	r3, r1
 80038d8:	72fb      	strb	r3, [r7, #11]
 80038da:	4613      	mov	r3, r2
 80038dc:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80038de:	2300      	movs	r3, #0
}
 80038e0:	4618      	mov	r0, r3
 80038e2:	3714      	adds	r7, #20
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
	...

080038ec <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80038ec:	b480      	push	{r7}
 80038ee:	b083      	sub	sp, #12
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a11      	ldr	r2, [pc, #68]	; (8003944 <u8x8_SetupDefaults+0x58>)
 80038fe:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	4a10      	ldr	r2, [pc, #64]	; (8003944 <u8x8_SetupDefaults+0x58>)
 8003904:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <u8x8_SetupDefaults+0x58>)
 800390a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	4a0d      	ldr	r2, [pc, #52]	; (8003944 <u8x8_SetupDefaults+0x58>)
 8003910:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2200      	movs	r2, #0
 8003916:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	2200      	movs	r2, #0
 8003926:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	22ff      	movs	r2, #255	; 0xff
 800392c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	22ff      	movs	r2, #255	; 0xff
 8003934:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8003938:	bf00      	nop
 800393a:	370c      	adds	r7, #12
 800393c:	46bd      	mov	sp, r7
 800393e:	bc80      	pop	{r7}
 8003940:	4770      	bx	lr
 8003942:	bf00      	nop
 8003944:	080038cd 	.word	0x080038cd

08003948 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	60f8      	str	r0, [r7, #12]
 8003950:	60b9      	str	r1, [r7, #8]
 8003952:	607a      	str	r2, [r7, #4]
 8003954:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003956:	68f8      	ldr	r0, [r7, #12]
 8003958:	f7ff ffc8 	bl	80038ec <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	687a      	ldr	r2, [r7, #4]
 8003966:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	683a      	ldr	r2, [r7, #0]
 800396c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	69ba      	ldr	r2, [r7, #24]
 8003972:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003974:	68f8      	ldr	r0, [r7, #12]
 8003976:	f7ff ff47 	bl	8003808 <u8x8_SetupMemory>
}
 800397a:	bf00      	nop
 800397c:	3710      	adds	r7, #16
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}
	...

08003984 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003984:	480c      	ldr	r0, [pc, #48]	; (80039b8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003986:	490d      	ldr	r1, [pc, #52]	; (80039bc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003988:	4a0d      	ldr	r2, [pc, #52]	; (80039c0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800398a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800398c:	e002      	b.n	8003994 <LoopCopyDataInit>

0800398e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800398e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003992:	3304      	adds	r3, #4

08003994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003998:	d3f9      	bcc.n	800398e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800399a:	4a0a      	ldr	r2, [pc, #40]	; (80039c4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800399c:	4c0a      	ldr	r4, [pc, #40]	; (80039c8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800399e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039a0:	e001      	b.n	80039a6 <LoopFillZerobss>

080039a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039a4:	3204      	adds	r2, #4

080039a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039a8:	d3fb      	bcc.n	80039a2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039aa:	f7fd fd95 	bl	80014d8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ae:	f002 f817 	bl	80059e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80039b2:	f7fd f873 	bl	8000a9c <main>
  bx lr
 80039b6:	4770      	bx	lr
  ldr r0, =_sdata
 80039b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039bc:	200002a0 	.word	0x200002a0
  ldr r2, =_sidata
 80039c0:	08006e14 	.word	0x08006e14
  ldr r2, =_sbss
 80039c4:	200002a0 	.word	0x200002a0
  ldr r4, =_ebss
 80039c8:	20000b28 	.word	0x20000b28

080039cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80039cc:	e7fe      	b.n	80039cc <ADC1_2_IRQHandler>
	...

080039d0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039d4:	4b08      	ldr	r3, [pc, #32]	; (80039f8 <HAL_Init+0x28>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a07      	ldr	r2, [pc, #28]	; (80039f8 <HAL_Init+0x28>)
 80039da:	f043 0310 	orr.w	r3, r3, #16
 80039de:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039e0:	2003      	movs	r0, #3
 80039e2:	f000 f989 	bl	8003cf8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039e6:	200f      	movs	r0, #15
 80039e8:	f000 f808 	bl	80039fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039ec:	f7fd fc02 	bl	80011f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	40022000 	.word	0x40022000

080039fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003a04:	4b12      	ldr	r3, [pc, #72]	; (8003a50 <HAL_InitTick+0x54>)
 8003a06:	681a      	ldr	r2, [r3, #0]
 8003a08:	4b12      	ldr	r3, [pc, #72]	; (8003a54 <HAL_InitTick+0x58>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a12:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a16:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f000 f9af 	bl	8003d7e <HAL_SYSTICK_Config>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d001      	beq.n	8003a2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e00e      	b.n	8003a48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b0f      	cmp	r3, #15
 8003a2e:	d80a      	bhi.n	8003a46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a30:	2200      	movs	r2, #0
 8003a32:	6879      	ldr	r1, [r7, #4]
 8003a34:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a38:	f000 f969 	bl	8003d0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a3c:	4a06      	ldr	r2, [pc, #24]	; (8003a58 <HAL_InitTick+0x5c>)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	e000      	b.n	8003a48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
}
 8003a48:	4618      	mov	r0, r3
 8003a4a:	3708      	adds	r7, #8
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}
 8003a50:	20000230 	.word	0x20000230
 8003a54:	20000238 	.word	0x20000238
 8003a58:	20000234 	.word	0x20000234

08003a5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a60:	4b05      	ldr	r3, [pc, #20]	; (8003a78 <HAL_IncTick+0x1c>)
 8003a62:	781b      	ldrb	r3, [r3, #0]
 8003a64:	461a      	mov	r2, r3
 8003a66:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <HAL_IncTick+0x20>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	4413      	add	r3, r2
 8003a6c:	4a03      	ldr	r2, [pc, #12]	; (8003a7c <HAL_IncTick+0x20>)
 8003a6e:	6013      	str	r3, [r2, #0]
}
 8003a70:	bf00      	nop
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bc80      	pop	{r7}
 8003a76:	4770      	bx	lr
 8003a78:	20000238 	.word	0x20000238
 8003a7c:	20000b14 	.word	0x20000b14

08003a80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	af00      	add	r7, sp, #0
  return uwTick;
 8003a84:	4b02      	ldr	r3, [pc, #8]	; (8003a90 <HAL_GetTick+0x10>)
 8003a86:	681b      	ldr	r3, [r3, #0]
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bc80      	pop	{r7}
 8003a8e:	4770      	bx	lr
 8003a90:	20000b14 	.word	0x20000b14

08003a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a9c:	f7ff fff0 	bl	8003a80 <HAL_GetTick>
 8003aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aac:	d005      	beq.n	8003aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <HAL_Delay+0x44>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003aba:	bf00      	nop
 8003abc:	f7ff ffe0 	bl	8003a80 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d8f7      	bhi.n	8003abc <HAL_Delay+0x28>
  {
  }
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000238 	.word	0x20000238

08003adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003af8:	4013      	ands	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b0e:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	60d3      	str	r3, [r2, #12]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bc80      	pop	{r7}
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <__NVIC_GetPriorityGrouping+0x18>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	f003 0307 	and.w	r3, r3, #7
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bc80      	pop	{r7}
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	db0b      	blt.n	8003b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	f003 021f 	and.w	r2, r3, #31
 8003b58:	4906      	ldr	r1, [pc, #24]	; (8003b74 <__NVIC_EnableIRQ+0x34>)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2001      	movs	r0, #1
 8003b62:	fa00 f202 	lsl.w	r2, r0, r2
 8003b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bc80      	pop	{r7}
 8003b72:	4770      	bx	lr
 8003b74:	e000e100 	.word	0xe000e100

08003b78 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	db12      	blt.n	8003bb0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	f003 021f 	and.w	r2, r3, #31
 8003b90:	490a      	ldr	r1, [pc, #40]	; (8003bbc <__NVIC_DisableIRQ+0x44>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2001      	movs	r0, #1
 8003b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b9e:	3320      	adds	r3, #32
 8003ba0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ba4:	f3bf 8f4f 	dsb	sy
}
 8003ba8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003baa:	f3bf 8f6f 	isb	sy
}
 8003bae:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003bb0:	bf00      	nop
 8003bb2:	370c      	adds	r7, #12
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bc80      	pop	{r7}
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	e000e100 	.word	0xe000e100

08003bc0 <__NVIC_ClearPendingIRQ>:
  \details Clears the pending bit of a device specific interrupt in the NVIC pending register.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	4603      	mov	r3, r0
 8003bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	db0c      	blt.n	8003bec <__NVIC_ClearPendingIRQ+0x2c>
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bd2:	79fb      	ldrb	r3, [r7, #7]
 8003bd4:	f003 021f 	and.w	r2, r3, #31
 8003bd8:	4907      	ldr	r1, [pc, #28]	; (8003bf8 <__NVIC_ClearPendingIRQ+0x38>)
 8003bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bde:	095b      	lsrs	r3, r3, #5
 8003be0:	2001      	movs	r0, #1
 8003be2:	fa00 f202 	lsl.w	r2, r0, r2
 8003be6:	3360      	adds	r3, #96	; 0x60
 8003be8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003bec:	bf00      	nop
 8003bee:	370c      	adds	r7, #12
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bc80      	pop	{r7}
 8003bf4:	4770      	bx	lr
 8003bf6:	bf00      	nop
 8003bf8:	e000e100 	.word	0xe000e100

08003bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b083      	sub	sp, #12
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	4603      	mov	r3, r0
 8003c04:	6039      	str	r1, [r7, #0]
 8003c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	db0a      	blt.n	8003c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c10:	683b      	ldr	r3, [r7, #0]
 8003c12:	b2da      	uxtb	r2, r3
 8003c14:	490c      	ldr	r1, [pc, #48]	; (8003c48 <__NVIC_SetPriority+0x4c>)
 8003c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c1a:	0112      	lsls	r2, r2, #4
 8003c1c:	b2d2      	uxtb	r2, r2
 8003c1e:	440b      	add	r3, r1
 8003c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c24:	e00a      	b.n	8003c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	b2da      	uxtb	r2, r3
 8003c2a:	4908      	ldr	r1, [pc, #32]	; (8003c4c <__NVIC_SetPriority+0x50>)
 8003c2c:	79fb      	ldrb	r3, [r7, #7]
 8003c2e:	f003 030f 	and.w	r3, r3, #15
 8003c32:	3b04      	subs	r3, #4
 8003c34:	0112      	lsls	r2, r2, #4
 8003c36:	b2d2      	uxtb	r2, r2
 8003c38:	440b      	add	r3, r1
 8003c3a:	761a      	strb	r2, [r3, #24]
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bc80      	pop	{r7}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop
 8003c48:	e000e100 	.word	0xe000e100
 8003c4c:	e000ed00 	.word	0xe000ed00

08003c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b089      	sub	sp, #36	; 0x24
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	60f8      	str	r0, [r7, #12]
 8003c58:	60b9      	str	r1, [r7, #8]
 8003c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	f003 0307 	and.w	r3, r3, #7
 8003c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c64:	69fb      	ldr	r3, [r7, #28]
 8003c66:	f1c3 0307 	rsb	r3, r3, #7
 8003c6a:	2b04      	cmp	r3, #4
 8003c6c:	bf28      	it	cs
 8003c6e:	2304      	movcs	r3, #4
 8003c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	3304      	adds	r3, #4
 8003c76:	2b06      	cmp	r3, #6
 8003c78:	d902      	bls.n	8003c80 <NVIC_EncodePriority+0x30>
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3b03      	subs	r3, #3
 8003c7e:	e000      	b.n	8003c82 <NVIC_EncodePriority+0x32>
 8003c80:	2300      	movs	r3, #0
 8003c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8e:	43da      	mvns	r2, r3
 8003c90:	68bb      	ldr	r3, [r7, #8]
 8003c92:	401a      	ands	r2, r3
 8003c94:	697b      	ldr	r3, [r7, #20]
 8003c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c9c:	697b      	ldr	r3, [r7, #20]
 8003c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8003ca2:	43d9      	mvns	r1, r3
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ca8:	4313      	orrs	r3, r2
         );
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3724      	adds	r7, #36	; 0x24
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bc80      	pop	{r7}
 8003cb2:	4770      	bx	lr

08003cb4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003cc4:	d301      	bcc.n	8003cca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	e00f      	b.n	8003cea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003cca:	4a0a      	ldr	r2, [pc, #40]	; (8003cf4 <SysTick_Config+0x40>)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	3b01      	subs	r3, #1
 8003cd0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003cd2:	210f      	movs	r1, #15
 8003cd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003cd8:	f7ff ff90 	bl	8003bfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003cdc:	4b05      	ldr	r3, [pc, #20]	; (8003cf4 <SysTick_Config+0x40>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003ce2:	4b04      	ldr	r3, [pc, #16]	; (8003cf4 <SysTick_Config+0x40>)
 8003ce4:	2207      	movs	r2, #7
 8003ce6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003ce8:	2300      	movs	r3, #0
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	3708      	adds	r7, #8
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	bd80      	pop	{r7, pc}
 8003cf2:	bf00      	nop
 8003cf4:	e000e010 	.word	0xe000e010

08003cf8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f7ff feeb 	bl	8003adc <__NVIC_SetPriorityGrouping>
}
 8003d06:	bf00      	nop
 8003d08:	3708      	adds	r7, #8
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}

08003d0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003d0e:	b580      	push	{r7, lr}
 8003d10:	b086      	sub	sp, #24
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	4603      	mov	r3, r0
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
 8003d1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003d1c:	2300      	movs	r3, #0
 8003d1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003d20:	f7ff ff00 	bl	8003b24 <__NVIC_GetPriorityGrouping>
 8003d24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003d26:	687a      	ldr	r2, [r7, #4]
 8003d28:	68b9      	ldr	r1, [r7, #8]
 8003d2a:	6978      	ldr	r0, [r7, #20]
 8003d2c:	f7ff ff90 	bl	8003c50 <NVIC_EncodePriority>
 8003d30:	4602      	mov	r2, r0
 8003d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d36:	4611      	mov	r1, r2
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f7ff ff5f 	bl	8003bfc <__NVIC_SetPriority>
}
 8003d3e:	bf00      	nop
 8003d40:	3718      	adds	r7, #24
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d46:	b580      	push	{r7, lr}
 8003d48:	b082      	sub	sp, #8
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d54:	4618      	mov	r0, r3
 8003d56:	f7ff fef3 	bl	8003b40 <__NVIC_EnableIRQ>
}
 8003d5a:	bf00      	nop
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}

08003d62 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d62:	b580      	push	{r7, lr}
 8003d64:	b082      	sub	sp, #8
 8003d66:	af00      	add	r7, sp, #0
 8003d68:	4603      	mov	r3, r0
 8003d6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff01 	bl	8003b78 <__NVIC_DisableIRQ>
}
 8003d76:	bf00      	nop
 8003d78:	3708      	adds	r7, #8
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}

08003d7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff ff94 	bl	8003cb4 <SysTick_Config>
 8003d8c:	4603      	mov	r3, r0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_NVIC_ClearPendingIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))  
  * @retval None
  */
void HAL_NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b082      	sub	sp, #8
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	4603      	mov	r3, r0
 8003d9e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Clear pending interrupt */
  NVIC_ClearPendingIRQ(IRQn);
 8003da0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003da4:	4618      	mov	r0, r3
 8003da6:	f7ff ff0b 	bl	8003bc0 <__NVIC_ClearPendingIRQ>
}
 8003daa:	bf00      	nop
 8003dac:	3708      	adds	r7, #8
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b08b      	sub	sp, #44	; 0x2c
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003dc6:	e161      	b.n	800408c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003dc8:	2201      	movs	r2, #1
 8003dca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69fa      	ldr	r2, [r7, #28]
 8003dd8:	4013      	ands	r3, r2
 8003dda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003ddc:	69ba      	ldr	r2, [r7, #24]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	429a      	cmp	r2, r3
 8003de2:	f040 8150 	bne.w	8004086 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4a97      	ldr	r2, [pc, #604]	; (8004048 <HAL_GPIO_Init+0x294>)
 8003dec:	4293      	cmp	r3, r2
 8003dee:	d05e      	beq.n	8003eae <HAL_GPIO_Init+0xfa>
 8003df0:	4a95      	ldr	r2, [pc, #596]	; (8004048 <HAL_GPIO_Init+0x294>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d875      	bhi.n	8003ee2 <HAL_GPIO_Init+0x12e>
 8003df6:	4a95      	ldr	r2, [pc, #596]	; (800404c <HAL_GPIO_Init+0x298>)
 8003df8:	4293      	cmp	r3, r2
 8003dfa:	d058      	beq.n	8003eae <HAL_GPIO_Init+0xfa>
 8003dfc:	4a93      	ldr	r2, [pc, #588]	; (800404c <HAL_GPIO_Init+0x298>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d86f      	bhi.n	8003ee2 <HAL_GPIO_Init+0x12e>
 8003e02:	4a93      	ldr	r2, [pc, #588]	; (8004050 <HAL_GPIO_Init+0x29c>)
 8003e04:	4293      	cmp	r3, r2
 8003e06:	d052      	beq.n	8003eae <HAL_GPIO_Init+0xfa>
 8003e08:	4a91      	ldr	r2, [pc, #580]	; (8004050 <HAL_GPIO_Init+0x29c>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d869      	bhi.n	8003ee2 <HAL_GPIO_Init+0x12e>
 8003e0e:	4a91      	ldr	r2, [pc, #580]	; (8004054 <HAL_GPIO_Init+0x2a0>)
 8003e10:	4293      	cmp	r3, r2
 8003e12:	d04c      	beq.n	8003eae <HAL_GPIO_Init+0xfa>
 8003e14:	4a8f      	ldr	r2, [pc, #572]	; (8004054 <HAL_GPIO_Init+0x2a0>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d863      	bhi.n	8003ee2 <HAL_GPIO_Init+0x12e>
 8003e1a:	4a8f      	ldr	r2, [pc, #572]	; (8004058 <HAL_GPIO_Init+0x2a4>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d046      	beq.n	8003eae <HAL_GPIO_Init+0xfa>
 8003e20:	4a8d      	ldr	r2, [pc, #564]	; (8004058 <HAL_GPIO_Init+0x2a4>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d85d      	bhi.n	8003ee2 <HAL_GPIO_Init+0x12e>
 8003e26:	2b12      	cmp	r3, #18
 8003e28:	d82a      	bhi.n	8003e80 <HAL_GPIO_Init+0xcc>
 8003e2a:	2b12      	cmp	r3, #18
 8003e2c:	d859      	bhi.n	8003ee2 <HAL_GPIO_Init+0x12e>
 8003e2e:	a201      	add	r2, pc, #4	; (adr r2, 8003e34 <HAL_GPIO_Init+0x80>)
 8003e30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e34:	08003eaf 	.word	0x08003eaf
 8003e38:	08003e89 	.word	0x08003e89
 8003e3c:	08003e9b 	.word	0x08003e9b
 8003e40:	08003edd 	.word	0x08003edd
 8003e44:	08003ee3 	.word	0x08003ee3
 8003e48:	08003ee3 	.word	0x08003ee3
 8003e4c:	08003ee3 	.word	0x08003ee3
 8003e50:	08003ee3 	.word	0x08003ee3
 8003e54:	08003ee3 	.word	0x08003ee3
 8003e58:	08003ee3 	.word	0x08003ee3
 8003e5c:	08003ee3 	.word	0x08003ee3
 8003e60:	08003ee3 	.word	0x08003ee3
 8003e64:	08003ee3 	.word	0x08003ee3
 8003e68:	08003ee3 	.word	0x08003ee3
 8003e6c:	08003ee3 	.word	0x08003ee3
 8003e70:	08003ee3 	.word	0x08003ee3
 8003e74:	08003ee3 	.word	0x08003ee3
 8003e78:	08003e91 	.word	0x08003e91
 8003e7c:	08003ea5 	.word	0x08003ea5
 8003e80:	4a76      	ldr	r2, [pc, #472]	; (800405c <HAL_GPIO_Init+0x2a8>)
 8003e82:	4293      	cmp	r3, r2
 8003e84:	d013      	beq.n	8003eae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003e86:	e02c      	b.n	8003ee2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	68db      	ldr	r3, [r3, #12]
 8003e8c:	623b      	str	r3, [r7, #32]
          break;
 8003e8e:	e029      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	3304      	adds	r3, #4
 8003e96:	623b      	str	r3, [r7, #32]
          break;
 8003e98:	e024      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	68db      	ldr	r3, [r3, #12]
 8003e9e:	3308      	adds	r3, #8
 8003ea0:	623b      	str	r3, [r7, #32]
          break;
 8003ea2:	e01f      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	330c      	adds	r3, #12
 8003eaa:	623b      	str	r3, [r7, #32]
          break;
 8003eac:	e01a      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003eae:	683b      	ldr	r3, [r7, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d102      	bne.n	8003ebc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003eb6:	2304      	movs	r3, #4
 8003eb8:	623b      	str	r3, [r7, #32]
          break;
 8003eba:	e013      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	2b01      	cmp	r3, #1
 8003ec2:	d105      	bne.n	8003ed0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ec4:	2308      	movs	r3, #8
 8003ec6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	69fa      	ldr	r2, [r7, #28]
 8003ecc:	611a      	str	r2, [r3, #16]
          break;
 8003ece:	e009      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003ed0:	2308      	movs	r3, #8
 8003ed2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	69fa      	ldr	r2, [r7, #28]
 8003ed8:	615a      	str	r2, [r3, #20]
          break;
 8003eda:	e003      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003edc:	2300      	movs	r3, #0
 8003ede:	623b      	str	r3, [r7, #32]
          break;
 8003ee0:	e000      	b.n	8003ee4 <HAL_GPIO_Init+0x130>
          break;
 8003ee2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	2bff      	cmp	r3, #255	; 0xff
 8003ee8:	d801      	bhi.n	8003eee <HAL_GPIO_Init+0x13a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	e001      	b.n	8003ef2 <HAL_GPIO_Init+0x13e>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2bff      	cmp	r3, #255	; 0xff
 8003ef8:	d802      	bhi.n	8003f00 <HAL_GPIO_Init+0x14c>
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	e002      	b.n	8003f06 <HAL_GPIO_Init+0x152>
 8003f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f02:	3b08      	subs	r3, #8
 8003f04:	009b      	lsls	r3, r3, #2
 8003f06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	210f      	movs	r1, #15
 8003f0e:	693b      	ldr	r3, [r7, #16]
 8003f10:	fa01 f303 	lsl.w	r3, r1, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	401a      	ands	r2, r3
 8003f18:	6a39      	ldr	r1, [r7, #32]
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	431a      	orrs	r2, r3
 8003f22:	697b      	ldr	r3, [r7, #20]
 8003f24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	f000 80a9 	beq.w	8004086 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003f34:	4b4a      	ldr	r3, [pc, #296]	; (8004060 <HAL_GPIO_Init+0x2ac>)
 8003f36:	699b      	ldr	r3, [r3, #24]
 8003f38:	4a49      	ldr	r2, [pc, #292]	; (8004060 <HAL_GPIO_Init+0x2ac>)
 8003f3a:	f043 0301 	orr.w	r3, r3, #1
 8003f3e:	6193      	str	r3, [r2, #24]
 8003f40:	4b47      	ldr	r3, [pc, #284]	; (8004060 <HAL_GPIO_Init+0x2ac>)
 8003f42:	699b      	ldr	r3, [r3, #24]
 8003f44:	f003 0301 	and.w	r3, r3, #1
 8003f48:	60bb      	str	r3, [r7, #8]
 8003f4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003f4c:	4a45      	ldr	r2, [pc, #276]	; (8004064 <HAL_GPIO_Init+0x2b0>)
 8003f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f50:	089b      	lsrs	r3, r3, #2
 8003f52:	3302      	adds	r3, #2
 8003f54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f5c:	f003 0303 	and.w	r3, r3, #3
 8003f60:	009b      	lsls	r3, r3, #2
 8003f62:	220f      	movs	r2, #15
 8003f64:	fa02 f303 	lsl.w	r3, r2, r3
 8003f68:	43db      	mvns	r3, r3
 8003f6a:	68fa      	ldr	r2, [r7, #12]
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	4a3d      	ldr	r2, [pc, #244]	; (8004068 <HAL_GPIO_Init+0x2b4>)
 8003f74:	4293      	cmp	r3, r2
 8003f76:	d00d      	beq.n	8003f94 <HAL_GPIO_Init+0x1e0>
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	4a3c      	ldr	r2, [pc, #240]	; (800406c <HAL_GPIO_Init+0x2b8>)
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d007      	beq.n	8003f90 <HAL_GPIO_Init+0x1dc>
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	4a3b      	ldr	r2, [pc, #236]	; (8004070 <HAL_GPIO_Init+0x2bc>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d101      	bne.n	8003f8c <HAL_GPIO_Init+0x1d8>
 8003f88:	2302      	movs	r3, #2
 8003f8a:	e004      	b.n	8003f96 <HAL_GPIO_Init+0x1e2>
 8003f8c:	2303      	movs	r3, #3
 8003f8e:	e002      	b.n	8003f96 <HAL_GPIO_Init+0x1e2>
 8003f90:	2301      	movs	r3, #1
 8003f92:	e000      	b.n	8003f96 <HAL_GPIO_Init+0x1e2>
 8003f94:	2300      	movs	r3, #0
 8003f96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f98:	f002 0203 	and.w	r2, r2, #3
 8003f9c:	0092      	lsls	r2, r2, #2
 8003f9e:	4093      	lsls	r3, r2
 8003fa0:	68fa      	ldr	r2, [r7, #12]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003fa6:	492f      	ldr	r1, [pc, #188]	; (8004064 <HAL_GPIO_Init+0x2b0>)
 8003fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003faa:	089b      	lsrs	r3, r3, #2
 8003fac:	3302      	adds	r3, #2
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d006      	beq.n	8003fce <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003fc0:	4b2c      	ldr	r3, [pc, #176]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8003fc2:	681a      	ldr	r2, [r3, #0]
 8003fc4:	492b      	ldr	r1, [pc, #172]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	600b      	str	r3, [r1, #0]
 8003fcc:	e006      	b.n	8003fdc <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003fce:	4b29      	ldr	r3, [pc, #164]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8003fd0:	681a      	ldr	r2, [r3, #0]
 8003fd2:	69bb      	ldr	r3, [r7, #24]
 8003fd4:	43db      	mvns	r3, r3
 8003fd6:	4927      	ldr	r1, [pc, #156]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8003fd8:	4013      	ands	r3, r2
 8003fda:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d006      	beq.n	8003ff6 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003fe8:	4b22      	ldr	r3, [pc, #136]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8003fea:	685a      	ldr	r2, [r3, #4]
 8003fec:	4921      	ldr	r1, [pc, #132]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8003fee:	69bb      	ldr	r3, [r7, #24]
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	604b      	str	r3, [r1, #4]
 8003ff4:	e006      	b.n	8004004 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003ff6:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8003ff8:	685a      	ldr	r2, [r3, #4]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	43db      	mvns	r3, r3
 8003ffe:	491d      	ldr	r1, [pc, #116]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8004000:	4013      	ands	r3, r2
 8004002:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800400c:	2b00      	cmp	r3, #0
 800400e:	d006      	beq.n	800401e <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004010:	4b18      	ldr	r3, [pc, #96]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8004012:	689a      	ldr	r2, [r3, #8]
 8004014:	4917      	ldr	r1, [pc, #92]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8004016:	69bb      	ldr	r3, [r7, #24]
 8004018:	4313      	orrs	r3, r2
 800401a:	608b      	str	r3, [r1, #8]
 800401c:	e006      	b.n	800402c <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800401e:	4b15      	ldr	r3, [pc, #84]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	69bb      	ldr	r3, [r7, #24]
 8004024:	43db      	mvns	r3, r3
 8004026:	4913      	ldr	r1, [pc, #76]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 8004028:	4013      	ands	r3, r2
 800402a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685b      	ldr	r3, [r3, #4]
 8004030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d01f      	beq.n	8004078 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004038:	4b0e      	ldr	r3, [pc, #56]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	490d      	ldr	r1, [pc, #52]	; (8004074 <HAL_GPIO_Init+0x2c0>)
 800403e:	69bb      	ldr	r3, [r7, #24]
 8004040:	4313      	orrs	r3, r2
 8004042:	60cb      	str	r3, [r1, #12]
 8004044:	e01f      	b.n	8004086 <HAL_GPIO_Init+0x2d2>
 8004046:	bf00      	nop
 8004048:	10320000 	.word	0x10320000
 800404c:	10310000 	.word	0x10310000
 8004050:	10220000 	.word	0x10220000
 8004054:	10210000 	.word	0x10210000
 8004058:	10120000 	.word	0x10120000
 800405c:	10110000 	.word	0x10110000
 8004060:	40021000 	.word	0x40021000
 8004064:	40010000 	.word	0x40010000
 8004068:	40010800 	.word	0x40010800
 800406c:	40010c00 	.word	0x40010c00
 8004070:	40011000 	.word	0x40011000
 8004074:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_GPIO_Init+0x2f4>)
 800407a:	68da      	ldr	r2, [r3, #12]
 800407c:	69bb      	ldr	r3, [r7, #24]
 800407e:	43db      	mvns	r3, r3
 8004080:	4909      	ldr	r1, [pc, #36]	; (80040a8 <HAL_GPIO_Init+0x2f4>)
 8004082:	4013      	ands	r3, r2
 8004084:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8004086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004088:	3301      	adds	r3, #1
 800408a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800408c:	683b      	ldr	r3, [r7, #0]
 800408e:	681a      	ldr	r2, [r3, #0]
 8004090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004092:	fa22 f303 	lsr.w	r3, r2, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	f47f ae96 	bne.w	8003dc8 <HAL_GPIO_Init+0x14>
  }
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	372c      	adds	r7, #44	; 0x2c
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bc80      	pop	{r7}
 80040a6:	4770      	bx	lr
 80040a8:	40010400 	.word	0x40010400

080040ac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b083      	sub	sp, #12
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
 80040b4:	460b      	mov	r3, r1
 80040b6:	807b      	strh	r3, [r7, #2]
 80040b8:	4613      	mov	r3, r2
 80040ba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80040bc:	787b      	ldrb	r3, [r7, #1]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d003      	beq.n	80040ca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040c2:	887a      	ldrh	r2, [r7, #2]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80040c8:	e003      	b.n	80040d2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80040ca:	887b      	ldrh	r3, [r7, #2]
 80040cc:	041a      	lsls	r2, r3, #16
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	611a      	str	r2, [r3, #16]
}
 80040d2:	bf00      	nop
 80040d4:	370c      	adds	r7, #12
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bc80      	pop	{r7}
 80040da:	4770      	bx	lr

080040dc <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80040dc:	b480      	push	{r7}
 80040de:	b085      	sub	sp, #20
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	460b      	mov	r3, r1
 80040e6:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80040ee:	887a      	ldrh	r2, [r7, #2]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	4013      	ands	r3, r2
 80040f4:	041a      	lsls	r2, r3, #16
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	43d9      	mvns	r1, r3
 80040fa:	887b      	ldrh	r3, [r7, #2]
 80040fc:	400b      	ands	r3, r1
 80040fe:	431a      	orrs	r2, r3
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	611a      	str	r2, [r3, #16]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	bc80      	pop	{r7}
 800410c:	4770      	bx	lr
	...

08004110 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800411a:	4b08      	ldr	r3, [pc, #32]	; (800413c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800411c:	695a      	ldr	r2, [r3, #20]
 800411e:	88fb      	ldrh	r3, [r7, #6]
 8004120:	4013      	ands	r3, r2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d006      	beq.n	8004134 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004126:	4a05      	ldr	r2, [pc, #20]	; (800413c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004128:	88fb      	ldrh	r3, [r7, #6]
 800412a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800412c:	88fb      	ldrh	r3, [r7, #6]
 800412e:	4618      	mov	r0, r3
 8004130:	f7fc f8aa 	bl	8000288 <HAL_GPIO_EXTI_Callback>
  }
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	40010400 	.word	0x40010400

08004140 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b086      	sub	sp, #24
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d101      	bne.n	8004152 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e272      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b00      	cmp	r3, #0
 800415c:	f000 8087 	beq.w	800426e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004160:	4b92      	ldr	r3, [pc, #584]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	f003 030c 	and.w	r3, r3, #12
 8004168:	2b04      	cmp	r3, #4
 800416a:	d00c      	beq.n	8004186 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800416c:	4b8f      	ldr	r3, [pc, #572]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800416e:	685b      	ldr	r3, [r3, #4]
 8004170:	f003 030c 	and.w	r3, r3, #12
 8004174:	2b08      	cmp	r3, #8
 8004176:	d112      	bne.n	800419e <HAL_RCC_OscConfig+0x5e>
 8004178:	4b8c      	ldr	r3, [pc, #560]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004184:	d10b      	bne.n	800419e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004186:	4b89      	ldr	r3, [pc, #548]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d06c      	beq.n	800426c <HAL_RCC_OscConfig+0x12c>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	685b      	ldr	r3, [r3, #4]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d168      	bne.n	800426c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800419a:	2301      	movs	r3, #1
 800419c:	e24c      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80041a6:	d106      	bne.n	80041b6 <HAL_RCC_OscConfig+0x76>
 80041a8:	4b80      	ldr	r3, [pc, #512]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	4a7f      	ldr	r2, [pc, #508]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041b2:	6013      	str	r3, [r2, #0]
 80041b4:	e02e      	b.n	8004214 <HAL_RCC_OscConfig+0xd4>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	685b      	ldr	r3, [r3, #4]
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10c      	bne.n	80041d8 <HAL_RCC_OscConfig+0x98>
 80041be:	4b7b      	ldr	r3, [pc, #492]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4a7a      	ldr	r2, [pc, #488]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041c8:	6013      	str	r3, [r2, #0]
 80041ca:	4b78      	ldr	r3, [pc, #480]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a77      	ldr	r2, [pc, #476]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80041d4:	6013      	str	r3, [r2, #0]
 80041d6:	e01d      	b.n	8004214 <HAL_RCC_OscConfig+0xd4>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80041e0:	d10c      	bne.n	80041fc <HAL_RCC_OscConfig+0xbc>
 80041e2:	4b72      	ldr	r3, [pc, #456]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4a71      	ldr	r2, [pc, #452]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80041ec:	6013      	str	r3, [r2, #0]
 80041ee:	4b6f      	ldr	r3, [pc, #444]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	4a6e      	ldr	r2, [pc, #440]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80041f8:	6013      	str	r3, [r2, #0]
 80041fa:	e00b      	b.n	8004214 <HAL_RCC_OscConfig+0xd4>
 80041fc:	4b6b      	ldr	r3, [pc, #428]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a6a      	ldr	r2, [pc, #424]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004206:	6013      	str	r3, [r2, #0]
 8004208:	4b68      	ldr	r3, [pc, #416]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	4a67      	ldr	r2, [pc, #412]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800420e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004212:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	685b      	ldr	r3, [r3, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d013      	beq.n	8004244 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7ff fc30 	bl	8003a80 <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004224:	f7ff fc2c 	bl	8003a80 <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	; 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e200      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004236:	4b5d      	ldr	r3, [pc, #372]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d0f0      	beq.n	8004224 <HAL_RCC_OscConfig+0xe4>
 8004242:	e014      	b.n	800426e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004244:	f7ff fc1c 	bl	8003a80 <HAL_GetTick>
 8004248:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800424a:	e008      	b.n	800425e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800424c:	f7ff fc18 	bl	8003a80 <HAL_GetTick>
 8004250:	4602      	mov	r2, r0
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	1ad3      	subs	r3, r2, r3
 8004256:	2b64      	cmp	r3, #100	; 0x64
 8004258:	d901      	bls.n	800425e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800425a:	2303      	movs	r3, #3
 800425c:	e1ec      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800425e:	4b53      	ldr	r3, [pc, #332]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004266:	2b00      	cmp	r3, #0
 8004268:	d1f0      	bne.n	800424c <HAL_RCC_OscConfig+0x10c>
 800426a:	e000      	b.n	800426e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800426c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f003 0302 	and.w	r3, r3, #2
 8004276:	2b00      	cmp	r3, #0
 8004278:	d063      	beq.n	8004342 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800427a:	4b4c      	ldr	r3, [pc, #304]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	f003 030c 	and.w	r3, r3, #12
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00b      	beq.n	800429e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004286:	4b49      	ldr	r3, [pc, #292]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004288:	685b      	ldr	r3, [r3, #4]
 800428a:	f003 030c 	and.w	r3, r3, #12
 800428e:	2b08      	cmp	r3, #8
 8004290:	d11c      	bne.n	80042cc <HAL_RCC_OscConfig+0x18c>
 8004292:	4b46      	ldr	r3, [pc, #280]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004294:	685b      	ldr	r3, [r3, #4]
 8004296:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800429a:	2b00      	cmp	r3, #0
 800429c:	d116      	bne.n	80042cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800429e:	4b43      	ldr	r3, [pc, #268]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f003 0302 	and.w	r3, r3, #2
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d005      	beq.n	80042b6 <HAL_RCC_OscConfig+0x176>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	d001      	beq.n	80042b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80042b2:	2301      	movs	r3, #1
 80042b4:	e1c0      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042b6:	4b3d      	ldr	r3, [pc, #244]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	695b      	ldr	r3, [r3, #20]
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	4939      	ldr	r1, [pc, #228]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80042c6:	4313      	orrs	r3, r2
 80042c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042ca:	e03a      	b.n	8004342 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d020      	beq.n	8004316 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042d4:	4b36      	ldr	r3, [pc, #216]	; (80043b0 <HAL_RCC_OscConfig+0x270>)
 80042d6:	2201      	movs	r2, #1
 80042d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042da:	f7ff fbd1 	bl	8003a80 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042e0:	e008      	b.n	80042f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80042e2:	f7ff fbcd 	bl	8003a80 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b02      	cmp	r3, #2
 80042ee:	d901      	bls.n	80042f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80042f0:	2303      	movs	r3, #3
 80042f2:	e1a1      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042f4:	4b2d      	ldr	r3, [pc, #180]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f003 0302 	and.w	r3, r3, #2
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d0f0      	beq.n	80042e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004300:	4b2a      	ldr	r3, [pc, #168]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	695b      	ldr	r3, [r3, #20]
 800430c:	00db      	lsls	r3, r3, #3
 800430e:	4927      	ldr	r1, [pc, #156]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004310:	4313      	orrs	r3, r2
 8004312:	600b      	str	r3, [r1, #0]
 8004314:	e015      	b.n	8004342 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004316:	4b26      	ldr	r3, [pc, #152]	; (80043b0 <HAL_RCC_OscConfig+0x270>)
 8004318:	2200      	movs	r2, #0
 800431a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800431c:	f7ff fbb0 	bl	8003a80 <HAL_GetTick>
 8004320:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004322:	e008      	b.n	8004336 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004324:	f7ff fbac 	bl	8003a80 <HAL_GetTick>
 8004328:	4602      	mov	r2, r0
 800432a:	693b      	ldr	r3, [r7, #16]
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	2b02      	cmp	r3, #2
 8004330:	d901      	bls.n	8004336 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8004332:	2303      	movs	r3, #3
 8004334:	e180      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004336:	4b1d      	ldr	r3, [pc, #116]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0302 	and.w	r3, r3, #2
 800433e:	2b00      	cmp	r3, #0
 8004340:	d1f0      	bne.n	8004324 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0308 	and.w	r3, r3, #8
 800434a:	2b00      	cmp	r3, #0
 800434c:	d03a      	beq.n	80043c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	699b      	ldr	r3, [r3, #24]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d019      	beq.n	800438a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004356:	4b17      	ldr	r3, [pc, #92]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 8004358:	2201      	movs	r2, #1
 800435a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800435c:	f7ff fb90 	bl	8003a80 <HAL_GetTick>
 8004360:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004362:	e008      	b.n	8004376 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004364:	f7ff fb8c 	bl	8003a80 <HAL_GetTick>
 8004368:	4602      	mov	r2, r0
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	1ad3      	subs	r3, r2, r3
 800436e:	2b02      	cmp	r3, #2
 8004370:	d901      	bls.n	8004376 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004372:	2303      	movs	r3, #3
 8004374:	e160      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004376:	4b0d      	ldr	r3, [pc, #52]	; (80043ac <HAL_RCC_OscConfig+0x26c>)
 8004378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800437a:	f003 0302 	and.w	r3, r3, #2
 800437e:	2b00      	cmp	r3, #0
 8004380:	d0f0      	beq.n	8004364 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004382:	2001      	movs	r0, #1
 8004384:	f000 fad8 	bl	8004938 <RCC_Delay>
 8004388:	e01c      	b.n	80043c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_RCC_OscConfig+0x274>)
 800438c:	2200      	movs	r2, #0
 800438e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004390:	f7ff fb76 	bl	8003a80 <HAL_GetTick>
 8004394:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004396:	e00f      	b.n	80043b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004398:	f7ff fb72 	bl	8003a80 <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d908      	bls.n	80043b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e146      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
 80043aa:	bf00      	nop
 80043ac:	40021000 	.word	0x40021000
 80043b0:	42420000 	.word	0x42420000
 80043b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80043b8:	4b92      	ldr	r3, [pc, #584]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043bc:	f003 0302 	and.w	r3, r3, #2
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d1e9      	bne.n	8004398 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f003 0304 	and.w	r3, r3, #4
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f000 80a6 	beq.w	800451e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043d2:	2300      	movs	r3, #0
 80043d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043d6:	4b8b      	ldr	r3, [pc, #556]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d10d      	bne.n	80043fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043e2:	4b88      	ldr	r3, [pc, #544]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043e4:	69db      	ldr	r3, [r3, #28]
 80043e6:	4a87      	ldr	r2, [pc, #540]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043ec:	61d3      	str	r3, [r2, #28]
 80043ee:	4b85      	ldr	r3, [pc, #532]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80043f0:	69db      	ldr	r3, [r3, #28]
 80043f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f6:	60bb      	str	r3, [r7, #8]
 80043f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043fa:	2301      	movs	r3, #1
 80043fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043fe:	4b82      	ldr	r3, [pc, #520]	; (8004608 <HAL_RCC_OscConfig+0x4c8>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004406:	2b00      	cmp	r3, #0
 8004408:	d118      	bne.n	800443c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800440a:	4b7f      	ldr	r3, [pc, #508]	; (8004608 <HAL_RCC_OscConfig+0x4c8>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a7e      	ldr	r2, [pc, #504]	; (8004608 <HAL_RCC_OscConfig+0x4c8>)
 8004410:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004414:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004416:	f7ff fb33 	bl	8003a80 <HAL_GetTick>
 800441a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800441c:	e008      	b.n	8004430 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800441e:	f7ff fb2f 	bl	8003a80 <HAL_GetTick>
 8004422:	4602      	mov	r2, r0
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	1ad3      	subs	r3, r2, r3
 8004428:	2b64      	cmp	r3, #100	; 0x64
 800442a:	d901      	bls.n	8004430 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e103      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004430:	4b75      	ldr	r3, [pc, #468]	; (8004608 <HAL_RCC_OscConfig+0x4c8>)
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004438:	2b00      	cmp	r3, #0
 800443a:	d0f0      	beq.n	800441e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	2b01      	cmp	r3, #1
 8004442:	d106      	bne.n	8004452 <HAL_RCC_OscConfig+0x312>
 8004444:	4b6f      	ldr	r3, [pc, #444]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004446:	6a1b      	ldr	r3, [r3, #32]
 8004448:	4a6e      	ldr	r2, [pc, #440]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800444a:	f043 0301 	orr.w	r3, r3, #1
 800444e:	6213      	str	r3, [r2, #32]
 8004450:	e02d      	b.n	80044ae <HAL_RCC_OscConfig+0x36e>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2b00      	cmp	r3, #0
 8004458:	d10c      	bne.n	8004474 <HAL_RCC_OscConfig+0x334>
 800445a:	4b6a      	ldr	r3, [pc, #424]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800445c:	6a1b      	ldr	r3, [r3, #32]
 800445e:	4a69      	ldr	r2, [pc, #420]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004460:	f023 0301 	bic.w	r3, r3, #1
 8004464:	6213      	str	r3, [r2, #32]
 8004466:	4b67      	ldr	r3, [pc, #412]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004468:	6a1b      	ldr	r3, [r3, #32]
 800446a:	4a66      	ldr	r2, [pc, #408]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800446c:	f023 0304 	bic.w	r3, r3, #4
 8004470:	6213      	str	r3, [r2, #32]
 8004472:	e01c      	b.n	80044ae <HAL_RCC_OscConfig+0x36e>
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	2b05      	cmp	r3, #5
 800447a:	d10c      	bne.n	8004496 <HAL_RCC_OscConfig+0x356>
 800447c:	4b61      	ldr	r3, [pc, #388]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800447e:	6a1b      	ldr	r3, [r3, #32]
 8004480:	4a60      	ldr	r2, [pc, #384]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004482:	f043 0304 	orr.w	r3, r3, #4
 8004486:	6213      	str	r3, [r2, #32]
 8004488:	4b5e      	ldr	r3, [pc, #376]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800448a:	6a1b      	ldr	r3, [r3, #32]
 800448c:	4a5d      	ldr	r2, [pc, #372]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800448e:	f043 0301 	orr.w	r3, r3, #1
 8004492:	6213      	str	r3, [r2, #32]
 8004494:	e00b      	b.n	80044ae <HAL_RCC_OscConfig+0x36e>
 8004496:	4b5b      	ldr	r3, [pc, #364]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004498:	6a1b      	ldr	r3, [r3, #32]
 800449a:	4a5a      	ldr	r2, [pc, #360]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800449c:	f023 0301 	bic.w	r3, r3, #1
 80044a0:	6213      	str	r3, [r2, #32]
 80044a2:	4b58      	ldr	r3, [pc, #352]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80044a4:	6a1b      	ldr	r3, [r3, #32]
 80044a6:	4a57      	ldr	r2, [pc, #348]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80044a8:	f023 0304 	bic.w	r3, r3, #4
 80044ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d015      	beq.n	80044e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044b6:	f7ff fae3 	bl	8003a80 <HAL_GetTick>
 80044ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044bc:	e00a      	b.n	80044d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044be:	f7ff fadf 	bl	8003a80 <HAL_GetTick>
 80044c2:	4602      	mov	r2, r0
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	1ad3      	subs	r3, r2, r3
 80044c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d901      	bls.n	80044d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80044d0:	2303      	movs	r3, #3
 80044d2:	e0b1      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80044d4:	4b4b      	ldr	r3, [pc, #300]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80044d6:	6a1b      	ldr	r3, [r3, #32]
 80044d8:	f003 0302 	and.w	r3, r3, #2
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d0ee      	beq.n	80044be <HAL_RCC_OscConfig+0x37e>
 80044e0:	e014      	b.n	800450c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80044e2:	f7ff facd 	bl	8003a80 <HAL_GetTick>
 80044e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044e8:	e00a      	b.n	8004500 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80044ea:	f7ff fac9 	bl	8003a80 <HAL_GetTick>
 80044ee:	4602      	mov	r2, r0
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	1ad3      	subs	r3, r2, r3
 80044f4:	f241 3288 	movw	r2, #5000	; 0x1388
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d901      	bls.n	8004500 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e09b      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004500:	4b40      	ldr	r3, [pc, #256]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004502:	6a1b      	ldr	r3, [r3, #32]
 8004504:	f003 0302 	and.w	r3, r3, #2
 8004508:	2b00      	cmp	r3, #0
 800450a:	d1ee      	bne.n	80044ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800450c:	7dfb      	ldrb	r3, [r7, #23]
 800450e:	2b01      	cmp	r3, #1
 8004510:	d105      	bne.n	800451e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004512:	4b3c      	ldr	r3, [pc, #240]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004514:	69db      	ldr	r3, [r3, #28]
 8004516:	4a3b      	ldr	r2, [pc, #236]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004518:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800451c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	2b00      	cmp	r3, #0
 8004524:	f000 8087 	beq.w	8004636 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004528:	4b36      	ldr	r3, [pc, #216]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	f003 030c 	and.w	r3, r3, #12
 8004530:	2b08      	cmp	r3, #8
 8004532:	d061      	beq.n	80045f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	69db      	ldr	r3, [r3, #28]
 8004538:	2b02      	cmp	r3, #2
 800453a:	d146      	bne.n	80045ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800453c:	4b33      	ldr	r3, [pc, #204]	; (800460c <HAL_RCC_OscConfig+0x4cc>)
 800453e:	2200      	movs	r2, #0
 8004540:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004542:	f7ff fa9d 	bl	8003a80 <HAL_GetTick>
 8004546:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004548:	e008      	b.n	800455c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800454a:	f7ff fa99 	bl	8003a80 <HAL_GetTick>
 800454e:	4602      	mov	r2, r0
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	1ad3      	subs	r3, r2, r3
 8004554:	2b02      	cmp	r3, #2
 8004556:	d901      	bls.n	800455c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e06d      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800455c:	4b29      	ldr	r3, [pc, #164]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1f0      	bne.n	800454a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	6a1b      	ldr	r3, [r3, #32]
 800456c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004570:	d108      	bne.n	8004584 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004572:	4b24      	ldr	r3, [pc, #144]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	4921      	ldr	r1, [pc, #132]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004580:	4313      	orrs	r3, r2
 8004582:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004584:	4b1f      	ldr	r3, [pc, #124]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004586:	685b      	ldr	r3, [r3, #4]
 8004588:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	6a19      	ldr	r1, [r3, #32]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004594:	430b      	orrs	r3, r1
 8004596:	491b      	ldr	r1, [pc, #108]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800459c:	4b1b      	ldr	r3, [pc, #108]	; (800460c <HAL_RCC_OscConfig+0x4cc>)
 800459e:	2201      	movs	r2, #1
 80045a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a2:	f7ff fa6d 	bl	8003a80 <HAL_GetTick>
 80045a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045a8:	e008      	b.n	80045bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045aa:	f7ff fa69 	bl	8003a80 <HAL_GetTick>
 80045ae:	4602      	mov	r2, r0
 80045b0:	693b      	ldr	r3, [r7, #16]
 80045b2:	1ad3      	subs	r3, r2, r3
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d901      	bls.n	80045bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e03d      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80045bc:	4b11      	ldr	r3, [pc, #68]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0f0      	beq.n	80045aa <HAL_RCC_OscConfig+0x46a>
 80045c8:	e035      	b.n	8004636 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80045ca:	4b10      	ldr	r3, [pc, #64]	; (800460c <HAL_RCC_OscConfig+0x4cc>)
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045d0:	f7ff fa56 	bl	8003a80 <HAL_GetTick>
 80045d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045d6:	e008      	b.n	80045ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80045d8:	f7ff fa52 	bl	8003a80 <HAL_GetTick>
 80045dc:	4602      	mov	r2, r0
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	1ad3      	subs	r3, r2, r3
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d901      	bls.n	80045ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80045e6:	2303      	movs	r3, #3
 80045e8:	e026      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80045ea:	4b06      	ldr	r3, [pc, #24]	; (8004604 <HAL_RCC_OscConfig+0x4c4>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1f0      	bne.n	80045d8 <HAL_RCC_OscConfig+0x498>
 80045f6:	e01e      	b.n	8004636 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d107      	bne.n	8004610 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e019      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
 8004604:	40021000 	.word	0x40021000
 8004608:	40007000 	.word	0x40007000
 800460c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004610:	4b0b      	ldr	r3, [pc, #44]	; (8004640 <HAL_RCC_OscConfig+0x500>)
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	429a      	cmp	r2, r3
 8004622:	d106      	bne.n	8004632 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800462e:	429a      	cmp	r2, r3
 8004630:	d001      	beq.n	8004636 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	e000      	b.n	8004638 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004636:	2300      	movs	r3, #0
}
 8004638:	4618      	mov	r0, r3
 800463a:	3718      	adds	r7, #24
 800463c:	46bd      	mov	sp, r7
 800463e:	bd80      	pop	{r7, pc}
 8004640:	40021000 	.word	0x40021000

08004644 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004644:	b580      	push	{r7, lr}
 8004646:	b084      	sub	sp, #16
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d101      	bne.n	8004658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e0d0      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004658:	4b6a      	ldr	r3, [pc, #424]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0307 	and.w	r3, r3, #7
 8004660:	683a      	ldr	r2, [r7, #0]
 8004662:	429a      	cmp	r2, r3
 8004664:	d910      	bls.n	8004688 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004666:	4b67      	ldr	r3, [pc, #412]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	f023 0207 	bic.w	r2, r3, #7
 800466e:	4965      	ldr	r1, [pc, #404]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	4313      	orrs	r3, r2
 8004674:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004676:	4b63      	ldr	r3, [pc, #396]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0307 	and.w	r3, r3, #7
 800467e:	683a      	ldr	r2, [r7, #0]
 8004680:	429a      	cmp	r2, r3
 8004682:	d001      	beq.n	8004688 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004684:	2301      	movs	r3, #1
 8004686:	e0b8      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	f003 0302 	and.w	r3, r3, #2
 8004690:	2b00      	cmp	r3, #0
 8004692:	d020      	beq.n	80046d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0304 	and.w	r3, r3, #4
 800469c:	2b00      	cmp	r3, #0
 800469e:	d005      	beq.n	80046ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046a0:	4b59      	ldr	r3, [pc, #356]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	4a58      	ldr	r2, [pc, #352]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046a6:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80046aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f003 0308 	and.w	r3, r3, #8
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d005      	beq.n	80046c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80046b8:	4b53      	ldr	r3, [pc, #332]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046ba:	685b      	ldr	r3, [r3, #4]
 80046bc:	4a52      	ldr	r2, [pc, #328]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046be:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80046c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046c4:	4b50      	ldr	r3, [pc, #320]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046c6:	685b      	ldr	r3, [r3, #4]
 80046c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	494d      	ldr	r1, [pc, #308]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046d2:	4313      	orrs	r3, r2
 80046d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	f003 0301 	and.w	r3, r3, #1
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d040      	beq.n	8004764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	4b47      	ldr	r3, [pc, #284]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d115      	bne.n	8004722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e07f      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	2b02      	cmp	r3, #2
 8004700:	d107      	bne.n	8004712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004702:	4b41      	ldr	r3, [pc, #260]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800470a:	2b00      	cmp	r3, #0
 800470c:	d109      	bne.n	8004722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800470e:	2301      	movs	r3, #1
 8004710:	e073      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004712:	4b3d      	ldr	r3, [pc, #244]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d101      	bne.n	8004722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e06b      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004722:	4b39      	ldr	r3, [pc, #228]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f023 0203 	bic.w	r2, r3, #3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	685b      	ldr	r3, [r3, #4]
 800472e:	4936      	ldr	r1, [pc, #216]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004730:	4313      	orrs	r3, r2
 8004732:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004734:	f7ff f9a4 	bl	8003a80 <HAL_GetTick>
 8004738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473a:	e00a      	b.n	8004752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800473c:	f7ff f9a0 	bl	8003a80 <HAL_GetTick>
 8004740:	4602      	mov	r2, r0
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	1ad3      	subs	r3, r2, r3
 8004746:	f241 3288 	movw	r2, #5000	; 0x1388
 800474a:	4293      	cmp	r3, r2
 800474c:	d901      	bls.n	8004752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800474e:	2303      	movs	r3, #3
 8004750:	e053      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004752:	4b2d      	ldr	r3, [pc, #180]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	f003 020c 	and.w	r2, r3, #12
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	429a      	cmp	r2, r3
 8004762:	d1eb      	bne.n	800473c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004764:	4b27      	ldr	r3, [pc, #156]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f003 0307 	and.w	r3, r3, #7
 800476c:	683a      	ldr	r2, [r7, #0]
 800476e:	429a      	cmp	r2, r3
 8004770:	d210      	bcs.n	8004794 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004772:	4b24      	ldr	r3, [pc, #144]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f023 0207 	bic.w	r2, r3, #7
 800477a:	4922      	ldr	r1, [pc, #136]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	4313      	orrs	r3, r2
 8004780:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	4b20      	ldr	r3, [pc, #128]	; (8004804 <HAL_RCC_ClockConfig+0x1c0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f003 0307 	and.w	r3, r3, #7
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d001      	beq.n	8004794 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e032      	b.n	80047fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f003 0304 	and.w	r3, r3, #4
 800479c:	2b00      	cmp	r3, #0
 800479e:	d008      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047a0:	4b19      	ldr	r3, [pc, #100]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	68db      	ldr	r3, [r3, #12]
 80047ac:	4916      	ldr	r1, [pc, #88]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	f003 0308 	and.w	r3, r3, #8
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d009      	beq.n	80047d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80047be:	4b12      	ldr	r3, [pc, #72]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80047c0:	685b      	ldr	r3, [r3, #4]
 80047c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	691b      	ldr	r3, [r3, #16]
 80047ca:	00db      	lsls	r3, r3, #3
 80047cc:	490e      	ldr	r1, [pc, #56]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80047ce:	4313      	orrs	r3, r2
 80047d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80047d2:	f000 f821 	bl	8004818 <HAL_RCC_GetSysClockFreq>
 80047d6:	4602      	mov	r2, r0
 80047d8:	4b0b      	ldr	r3, [pc, #44]	; (8004808 <HAL_RCC_ClockConfig+0x1c4>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	091b      	lsrs	r3, r3, #4
 80047de:	f003 030f 	and.w	r3, r3, #15
 80047e2:	490a      	ldr	r1, [pc, #40]	; (800480c <HAL_RCC_ClockConfig+0x1c8>)
 80047e4:	5ccb      	ldrb	r3, [r1, r3]
 80047e6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ea:	4a09      	ldr	r2, [pc, #36]	; (8004810 <HAL_RCC_ClockConfig+0x1cc>)
 80047ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80047ee:	4b09      	ldr	r3, [pc, #36]	; (8004814 <HAL_RCC_ClockConfig+0x1d0>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4618      	mov	r0, r3
 80047f4:	f7ff f902 	bl	80039fc <HAL_InitTick>

  return HAL_OK;
 80047f8:	2300      	movs	r3, #0
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3710      	adds	r7, #16
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	40022000 	.word	0x40022000
 8004808:	40021000 	.word	0x40021000
 800480c:	08006438 	.word	0x08006438
 8004810:	20000230 	.word	0x20000230
 8004814:	20000234 	.word	0x20000234

08004818 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004818:	b490      	push	{r4, r7}
 800481a:	b08a      	sub	sp, #40	; 0x28
 800481c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800481e:	4b29      	ldr	r3, [pc, #164]	; (80048c4 <HAL_RCC_GetSysClockFreq+0xac>)
 8004820:	1d3c      	adds	r4, r7, #4
 8004822:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004824:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004828:	f240 2301 	movw	r3, #513	; 0x201
 800482c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800482e:	2300      	movs	r3, #0
 8004830:	61fb      	str	r3, [r7, #28]
 8004832:	2300      	movs	r3, #0
 8004834:	61bb      	str	r3, [r7, #24]
 8004836:	2300      	movs	r3, #0
 8004838:	627b      	str	r3, [r7, #36]	; 0x24
 800483a:	2300      	movs	r3, #0
 800483c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800483e:	2300      	movs	r3, #0
 8004840:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004842:	4b21      	ldr	r3, [pc, #132]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004848:	69fb      	ldr	r3, [r7, #28]
 800484a:	f003 030c 	and.w	r3, r3, #12
 800484e:	2b04      	cmp	r3, #4
 8004850:	d002      	beq.n	8004858 <HAL_RCC_GetSysClockFreq+0x40>
 8004852:	2b08      	cmp	r3, #8
 8004854:	d003      	beq.n	800485e <HAL_RCC_GetSysClockFreq+0x46>
 8004856:	e02b      	b.n	80048b0 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004858:	4b1c      	ldr	r3, [pc, #112]	; (80048cc <HAL_RCC_GetSysClockFreq+0xb4>)
 800485a:	623b      	str	r3, [r7, #32]
      break;
 800485c:	e02b      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800485e:	69fb      	ldr	r3, [r7, #28]
 8004860:	0c9b      	lsrs	r3, r3, #18
 8004862:	f003 030f 	and.w	r3, r3, #15
 8004866:	3328      	adds	r3, #40	; 0x28
 8004868:	443b      	add	r3, r7
 800486a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800486e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004870:	69fb      	ldr	r3, [r7, #28]
 8004872:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004876:	2b00      	cmp	r3, #0
 8004878:	d012      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800487a:	4b13      	ldr	r3, [pc, #76]	; (80048c8 <HAL_RCC_GetSysClockFreq+0xb0>)
 800487c:	685b      	ldr	r3, [r3, #4]
 800487e:	0c5b      	lsrs	r3, r3, #17
 8004880:	f003 0301 	and.w	r3, r3, #1
 8004884:	3328      	adds	r3, #40	; 0x28
 8004886:	443b      	add	r3, r7
 8004888:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800488c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800488e:	697b      	ldr	r3, [r7, #20]
 8004890:	4a0e      	ldr	r2, [pc, #56]	; (80048cc <HAL_RCC_GetSysClockFreq+0xb4>)
 8004892:	fb03 f202 	mul.w	r2, r3, r2
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	fbb2 f3f3 	udiv	r3, r2, r3
 800489c:	627b      	str	r3, [r7, #36]	; 0x24
 800489e:	e004      	b.n	80048aa <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80048a0:	697b      	ldr	r3, [r7, #20]
 80048a2:	4a0b      	ldr	r2, [pc, #44]	; (80048d0 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048a4:	fb02 f303 	mul.w	r3, r2, r3
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 80048aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ac:	623b      	str	r3, [r7, #32]
      break;
 80048ae:	e002      	b.n	80048b6 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80048b0:	4b06      	ldr	r3, [pc, #24]	; (80048cc <HAL_RCC_GetSysClockFreq+0xb4>)
 80048b2:	623b      	str	r3, [r7, #32]
      break;
 80048b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048b6:	6a3b      	ldr	r3, [r7, #32]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3728      	adds	r7, #40	; 0x28
 80048bc:	46bd      	mov	sp, r7
 80048be:	bc90      	pop	{r4, r7}
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	08006428 	.word	0x08006428
 80048c8:	40021000 	.word	0x40021000
 80048cc:	007a1200 	.word	0x007a1200
 80048d0:	003d0900 	.word	0x003d0900

080048d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048d4:	b480      	push	{r7}
 80048d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048d8:	4b02      	ldr	r3, [pc, #8]	; (80048e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80048da:	681b      	ldr	r3, [r3, #0]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	46bd      	mov	sp, r7
 80048e0:	bc80      	pop	{r7}
 80048e2:	4770      	bx	lr
 80048e4:	20000230 	.word	0x20000230

080048e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80048ec:	f7ff fff2 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 80048f0:	4602      	mov	r2, r0
 80048f2:	4b05      	ldr	r3, [pc, #20]	; (8004908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	0a1b      	lsrs	r3, r3, #8
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	4903      	ldr	r1, [pc, #12]	; (800490c <HAL_RCC_GetPCLK1Freq+0x24>)
 80048fe:	5ccb      	ldrb	r3, [r1, r3]
 8004900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004904:	4618      	mov	r0, r3
 8004906:	bd80      	pop	{r7, pc}
 8004908:	40021000 	.word	0x40021000
 800490c:	08006448 	.word	0x08006448

08004910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004914:	f7ff ffde 	bl	80048d4 <HAL_RCC_GetHCLKFreq>
 8004918:	4602      	mov	r2, r0
 800491a:	4b05      	ldr	r3, [pc, #20]	; (8004930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	0adb      	lsrs	r3, r3, #11
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	4903      	ldr	r1, [pc, #12]	; (8004934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004926:	5ccb      	ldrb	r3, [r1, r3]
 8004928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800492c:	4618      	mov	r0, r3
 800492e:	bd80      	pop	{r7, pc}
 8004930:	40021000 	.word	0x40021000
 8004934:	08006448 	.word	0x08006448

08004938 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004940:	4b0a      	ldr	r3, [pc, #40]	; (800496c <RCC_Delay+0x34>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	4a0a      	ldr	r2, [pc, #40]	; (8004970 <RCC_Delay+0x38>)
 8004946:	fba2 2303 	umull	r2, r3, r2, r3
 800494a:	0a5b      	lsrs	r3, r3, #9
 800494c:	687a      	ldr	r2, [r7, #4]
 800494e:	fb02 f303 	mul.w	r3, r2, r3
 8004952:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004954:	bf00      	nop
  }
  while (Delay --);
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1e5a      	subs	r2, r3, #1
 800495a:	60fa      	str	r2, [r7, #12]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d1f9      	bne.n	8004954 <RCC_Delay+0x1c>
}
 8004960:	bf00      	nop
 8004962:	bf00      	nop
 8004964:	3714      	adds	r7, #20
 8004966:	46bd      	mov	sp, r7
 8004968:	bc80      	pop	{r7}
 800496a:	4770      	bx	lr
 800496c:	20000230 	.word	0x20000230
 8004970:	10624dd3 	.word	0x10624dd3

08004974 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d101      	bne.n	8004986 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004982:	2301      	movs	r3, #1
 8004984:	e076      	b.n	8004a74 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498a:	2b00      	cmp	r3, #0
 800498c:	d108      	bne.n	80049a0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004996:	d009      	beq.n	80049ac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	61da      	str	r2, [r3, #28]
 800499e:	e005      	b.n	80049ac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2200      	movs	r2, #0
 80049b0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049b8:	b2db      	uxtb	r3, r3
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d106      	bne.n	80049cc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fc fc56 	bl	8001278 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2202      	movs	r2, #2
 80049d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049e2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049f4:	431a      	orrs	r2, r3
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	68db      	ldr	r3, [r3, #12]
 80049fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049fe:	431a      	orrs	r2, r3
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	f003 0302 	and.w	r3, r3, #2
 8004a08:	431a      	orrs	r2, r3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	695b      	ldr	r3, [r3, #20]
 8004a0e:	f003 0301 	and.w	r3, r3, #1
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a1c:	431a      	orrs	r2, r3
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a26:	431a      	orrs	r2, r3
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a1b      	ldr	r3, [r3, #32]
 8004a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a30:	ea42 0103 	orr.w	r1, r2, r3
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	699b      	ldr	r3, [r3, #24]
 8004a48:	0c1a      	lsrs	r2, r3, #16
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f002 0204 	and.w	r2, r2, #4
 8004a52:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	69da      	ldr	r2, [r3, #28]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a62:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	2200      	movs	r2, #0
 8004a68:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3708      	adds	r7, #8
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b088      	sub	sp, #32
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	603b      	str	r3, [r7, #0]
 8004a88:	4613      	mov	r3, r2
 8004a8a:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a96:	2b01      	cmp	r3, #1
 8004a98:	d101      	bne.n	8004a9e <HAL_SPI_Transmit+0x22>
 8004a9a:	2302      	movs	r3, #2
 8004a9c:	e126      	b.n	8004cec <HAL_SPI_Transmit+0x270>
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2201      	movs	r2, #1
 8004aa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aa6:	f7fe ffeb 	bl	8003a80 <HAL_GetTick>
 8004aaa:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004aac:	88fb      	ldrh	r3, [r7, #6]
 8004aae:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab6:	b2db      	uxtb	r3, r3
 8004ab8:	2b01      	cmp	r3, #1
 8004aba:	d002      	beq.n	8004ac2 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004abc:	2302      	movs	r3, #2
 8004abe:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ac0:	e10b      	b.n	8004cda <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ac2:	68bb      	ldr	r3, [r7, #8]
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d002      	beq.n	8004ace <HAL_SPI_Transmit+0x52>
 8004ac8:	88fb      	ldrh	r3, [r7, #6]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ad2:	e102      	b.n	8004cda <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2203      	movs	r2, #3
 8004ad8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	68ba      	ldr	r2, [r7, #8]
 8004ae6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	88fa      	ldrh	r2, [r7, #6]
 8004aec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	88fa      	ldrh	r2, [r7, #6]
 8004af2:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	2200      	movs	r2, #0
 8004b04:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	689b      	ldr	r3, [r3, #8]
 8004b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1a:	d10f      	bne.n	8004b3c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b3a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b46:	2b40      	cmp	r3, #64	; 0x40
 8004b48:	d007      	beq.n	8004b5a <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	681a      	ldr	r2, [r3, #0]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b58:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	68db      	ldr	r3, [r3, #12]
 8004b5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b62:	d14b      	bne.n	8004bfc <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	685b      	ldr	r3, [r3, #4]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d002      	beq.n	8004b72 <HAL_SPI_Transmit+0xf6>
 8004b6c:	8afb      	ldrh	r3, [r7, #22]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d13e      	bne.n	8004bf0 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b76:	881a      	ldrh	r2, [r3, #0]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b82:	1c9a      	adds	r2, r3, #2
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8c:	b29b      	uxth	r3, r3
 8004b8e:	3b01      	subs	r3, #1
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b96:	e02b      	b.n	8004bf0 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	689b      	ldr	r3, [r3, #8]
 8004b9e:	f003 0302 	and.w	r3, r3, #2
 8004ba2:	2b02      	cmp	r3, #2
 8004ba4:	d112      	bne.n	8004bcc <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004baa:	881a      	ldrh	r2, [r3, #0]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	1c9a      	adds	r2, r3, #2
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc0:	b29b      	uxth	r3, r3
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	b29a      	uxth	r2, r3
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bca:	e011      	b.n	8004bf0 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bcc:	f7fe ff58 	bl	8003a80 <HAL_GetTick>
 8004bd0:	4602      	mov	r2, r0
 8004bd2:	69bb      	ldr	r3, [r7, #24]
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	683a      	ldr	r2, [r7, #0]
 8004bd8:	429a      	cmp	r2, r3
 8004bda:	d803      	bhi.n	8004be4 <HAL_SPI_Transmit+0x168>
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004be2:	d102      	bne.n	8004bea <HAL_SPI_Transmit+0x16e>
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bee:	e074      	b.n	8004cda <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf4:	b29b      	uxth	r3, r3
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d1ce      	bne.n	8004b98 <HAL_SPI_Transmit+0x11c>
 8004bfa:	e04c      	b.n	8004c96 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d002      	beq.n	8004c0a <HAL_SPI_Transmit+0x18e>
 8004c04:	8afb      	ldrh	r3, [r7, #22]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d140      	bne.n	8004c8c <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	7812      	ldrb	r2, [r2, #0]
 8004c16:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c30:	e02c      	b.n	8004c8c <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	689b      	ldr	r3, [r3, #8]
 8004c38:	f003 0302 	and.w	r3, r3, #2
 8004c3c:	2b02      	cmp	r3, #2
 8004c3e:	d113      	bne.n	8004c68 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	330c      	adds	r3, #12
 8004c4a:	7812      	ldrb	r2, [r2, #0]
 8004c4c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c52:	1c5a      	adds	r2, r3, #1
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	3b01      	subs	r3, #1
 8004c60:	b29a      	uxth	r2, r3
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c66:	e011      	b.n	8004c8c <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c68:	f7fe ff0a 	bl	8003a80 <HAL_GetTick>
 8004c6c:	4602      	mov	r2, r0
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	683a      	ldr	r2, [r7, #0]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d803      	bhi.n	8004c80 <HAL_SPI_Transmit+0x204>
 8004c78:	683b      	ldr	r3, [r7, #0]
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7e:	d102      	bne.n	8004c86 <HAL_SPI_Transmit+0x20a>
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d102      	bne.n	8004c8c <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c8a:	e026      	b.n	8004cda <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c90:	b29b      	uxth	r3, r3
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1cd      	bne.n	8004c32 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	6839      	ldr	r1, [r7, #0]
 8004c9a:	68f8      	ldr	r0, [r7, #12]
 8004c9c:	f000 f8b2 	bl	8004e04 <SPI_EndRxTxTransaction>
 8004ca0:	4603      	mov	r3, r0
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d002      	beq.n	8004cac <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d10a      	bne.n	8004cca <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	613b      	str	r3, [r7, #16]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	68db      	ldr	r3, [r3, #12]
 8004cbe:	613b      	str	r3, [r7, #16]
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	689b      	ldr	r3, [r3, #8]
 8004cc6:	613b      	str	r3, [r7, #16]
 8004cc8:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d002      	beq.n	8004cd8 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	77fb      	strb	r3, [r7, #31]
 8004cd6:	e000      	b.n	8004cda <HAL_SPI_Transmit+0x25e>
  }

error:
 8004cd8:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2201      	movs	r2, #1
 8004cde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cec:	4618      	mov	r0, r3
 8004cee:	3720      	adds	r7, #32
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	bd80      	pop	{r7, pc}

08004cf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b088      	sub	sp, #32
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	60f8      	str	r0, [r7, #12]
 8004cfc:	60b9      	str	r1, [r7, #8]
 8004cfe:	603b      	str	r3, [r7, #0]
 8004d00:	4613      	mov	r3, r2
 8004d02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d04:	f7fe febc 	bl	8003a80 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	1a9b      	subs	r3, r3, r2
 8004d0e:	683a      	ldr	r2, [r7, #0]
 8004d10:	4413      	add	r3, r2
 8004d12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d14:	f7fe feb4 	bl	8003a80 <HAL_GetTick>
 8004d18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d1a:	4b39      	ldr	r3, [pc, #228]	; (8004e00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	015b      	lsls	r3, r3, #5
 8004d20:	0d1b      	lsrs	r3, r3, #20
 8004d22:	69fa      	ldr	r2, [r7, #28]
 8004d24:	fb02 f303 	mul.w	r3, r2, r3
 8004d28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d2a:	e054      	b.n	8004dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d32:	d050      	beq.n	8004dd6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d34:	f7fe fea4 	bl	8003a80 <HAL_GetTick>
 8004d38:	4602      	mov	r2, r0
 8004d3a:	69bb      	ldr	r3, [r7, #24]
 8004d3c:	1ad3      	subs	r3, r2, r3
 8004d3e:	69fa      	ldr	r2, [r7, #28]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d902      	bls.n	8004d4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d44:	69fb      	ldr	r3, [r7, #28]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d13d      	bne.n	8004dc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d62:	d111      	bne.n	8004d88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d6c:	d004      	beq.n	8004d78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d76:	d107      	bne.n	8004d88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d90:	d10f      	bne.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004da0:	601a      	str	r2, [r3, #0]
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004db0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	2201      	movs	r2, #1
 8004db6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004dc2:	2303      	movs	r3, #3
 8004dc4:	e017      	b.n	8004df6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d101      	bne.n	8004dd0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	689a      	ldr	r2, [r3, #8]
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	4013      	ands	r3, r2
 8004de0:	68ba      	ldr	r2, [r7, #8]
 8004de2:	429a      	cmp	r2, r3
 8004de4:	bf0c      	ite	eq
 8004de6:	2301      	moveq	r3, #1
 8004de8:	2300      	movne	r3, #0
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	461a      	mov	r2, r3
 8004dee:	79fb      	ldrb	r3, [r7, #7]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d19b      	bne.n	8004d2c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3720      	adds	r7, #32
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	20000230 	.word	0x20000230

08004e04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b086      	sub	sp, #24
 8004e08:	af02      	add	r7, sp, #8
 8004e0a:	60f8      	str	r0, [r7, #12]
 8004e0c:	60b9      	str	r1, [r7, #8]
 8004e0e:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	9300      	str	r3, [sp, #0]
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	2200      	movs	r2, #0
 8004e18:	2180      	movs	r1, #128	; 0x80
 8004e1a:	68f8      	ldr	r0, [r7, #12]
 8004e1c:	f7ff ff6a 	bl	8004cf4 <SPI_WaitFlagStateUntilTimeout>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d007      	beq.n	8004e36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	f043 0220 	orr.w	r2, r3, #32
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e000      	b.n	8004e38 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004e36:	2300      	movs	r3, #0
}
 8004e38:	4618      	mov	r0, r3
 8004e3a:	3710      	adds	r7, #16
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}

08004e40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e041      	b.n	8004ed6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d106      	bne.n	8004e6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e66:	6878      	ldr	r0, [r7, #4]
 8004e68:	f7fc fa44 	bl	80012f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2202      	movs	r2, #2
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	3304      	adds	r3, #4
 8004e7c:	4619      	mov	r1, r3
 8004e7e:	4610      	mov	r0, r2
 8004e80:	f000 fa98 	bl	80053b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2201      	movs	r2, #1
 8004e90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2201      	movs	r2, #1
 8004e98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2201      	movs	r2, #1
 8004ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2201      	movs	r2, #1
 8004ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ed4:	2300      	movs	r3, #0
}
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	3708      	adds	r7, #8
 8004eda:	46bd      	mov	sp, r7
 8004edc:	bd80      	pop	{r7, pc}
	...

08004ee0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ee0:	b480      	push	{r7}
 8004ee2:	b085      	sub	sp, #20
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d001      	beq.n	8004ef8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e035      	b.n	8004f64 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68da      	ldr	r2, [r3, #12]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4a16      	ldr	r2, [pc, #88]	; (8004f70 <HAL_TIM_Base_Start_IT+0x90>)
 8004f16:	4293      	cmp	r3, r2
 8004f18:	d009      	beq.n	8004f2e <HAL_TIM_Base_Start_IT+0x4e>
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f22:	d004      	beq.n	8004f2e <HAL_TIM_Base_Start_IT+0x4e>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	4a12      	ldr	r2, [pc, #72]	; (8004f74 <HAL_TIM_Base_Start_IT+0x94>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d111      	bne.n	8004f52 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	f003 0307 	and.w	r3, r3, #7
 8004f38:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	2b06      	cmp	r3, #6
 8004f3e:	d010      	beq.n	8004f62 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f042 0201 	orr.w	r2, r2, #1
 8004f4e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f50:	e007      	b.n	8004f62 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f042 0201 	orr.w	r2, r2, #1
 8004f60:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f62:	2300      	movs	r3, #0
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	3714      	adds	r7, #20
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bc80      	pop	{r7}
 8004f6c:	4770      	bx	lr
 8004f6e:	bf00      	nop
 8004f70:	40012c00 	.word	0x40012c00
 8004f74:	40000400 	.word	0x40000400

08004f78 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8004f78:	b480      	push	{r7}
 8004f7a:	b083      	sub	sp, #12
 8004f7c:	af00      	add	r7, sp, #0
 8004f7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	68da      	ldr	r2, [r3, #12]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f022 0201 	bic.w	r2, r2, #1
 8004f8e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6a1a      	ldr	r2, [r3, #32]
 8004f96:	f241 1311 	movw	r3, #4369	; 0x1111
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d10f      	bne.n	8004fc0 <HAL_TIM_Base_Stop_IT+0x48>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	6a1a      	ldr	r2, [r3, #32]
 8004fa6:	f240 4344 	movw	r3, #1092	; 0x444
 8004faa:	4013      	ands	r3, r2
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d107      	bne.n	8004fc0 <HAL_TIM_Base_Stop_IT+0x48>
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	681a      	ldr	r2, [r3, #0]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f022 0201 	bic.w	r2, r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bc80      	pop	{r7}
 8004fd2:	4770      	bx	lr

08004fd4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b082      	sub	sp, #8
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	691b      	ldr	r3, [r3, #16]
 8004fe2:	f003 0302 	and.w	r3, r3, #2
 8004fe6:	2b02      	cmp	r3, #2
 8004fe8:	d122      	bne.n	8005030 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	f003 0302 	and.w	r3, r3, #2
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d11b      	bne.n	8005030 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f06f 0202 	mvn.w	r2, #2
 8005000:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	f003 0303 	and.w	r3, r3, #3
 8005012:	2b00      	cmp	r3, #0
 8005014:	d003      	beq.n	800501e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005016:	6878      	ldr	r0, [r7, #4]
 8005018:	f000 f9b1 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 800501c:	e005      	b.n	800502a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 f9a4 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f9b3 	bl	8005390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2200      	movs	r2, #0
 800502e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	691b      	ldr	r3, [r3, #16]
 8005036:	f003 0304 	and.w	r3, r3, #4
 800503a:	2b04      	cmp	r3, #4
 800503c:	d122      	bne.n	8005084 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	68db      	ldr	r3, [r3, #12]
 8005044:	f003 0304 	and.w	r3, r3, #4
 8005048:	2b04      	cmp	r3, #4
 800504a:	d11b      	bne.n	8005084 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f06f 0204 	mvn.w	r2, #4
 8005054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2202      	movs	r2, #2
 800505a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	699b      	ldr	r3, [r3, #24]
 8005062:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005066:	2b00      	cmp	r3, #0
 8005068:	d003      	beq.n	8005072 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 f987 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 8005070:	e005      	b.n	800507e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005072:	6878      	ldr	r0, [r7, #4]
 8005074:	f000 f97a 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f989 	bl	8005390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2200      	movs	r2, #0
 8005082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	691b      	ldr	r3, [r3, #16]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b08      	cmp	r3, #8
 8005090:	d122      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	f003 0308 	and.w	r3, r3, #8
 800509c:	2b08      	cmp	r3, #8
 800509e:	d11b      	bne.n	80050d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f06f 0208 	mvn.w	r2, #8
 80050a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	2204      	movs	r2, #4
 80050ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	69db      	ldr	r3, [r3, #28]
 80050b6:	f003 0303 	and.w	r3, r3, #3
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f95d 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 80050c4:	e005      	b.n	80050d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050c6:	6878      	ldr	r0, [r7, #4]
 80050c8:	f000 f950 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f95f 	bl	8005390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 0310 	and.w	r3, r3, #16
 80050e2:	2b10      	cmp	r3, #16
 80050e4:	d122      	bne.n	800512c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68db      	ldr	r3, [r3, #12]
 80050ec:	f003 0310 	and.w	r3, r3, #16
 80050f0:	2b10      	cmp	r3, #16
 80050f2:	d11b      	bne.n	800512c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f06f 0210 	mvn.w	r2, #16
 80050fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2208      	movs	r2, #8
 8005102:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	69db      	ldr	r3, [r3, #28]
 800510a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800510e:	2b00      	cmp	r3, #0
 8005110:	d003      	beq.n	800511a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 f933 	bl	800537e <HAL_TIM_IC_CaptureCallback>
 8005118:	e005      	b.n	8005126 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f000 f926 	bl	800536c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f935 	bl	8005390 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	691b      	ldr	r3, [r3, #16]
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b01      	cmp	r3, #1
 8005138:	d10e      	bne.n	8005158 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	f003 0301 	and.w	r3, r3, #1
 8005144:	2b01      	cmp	r3, #1
 8005146:	d107      	bne.n	8005158 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f06f 0201 	mvn.w	r2, #1
 8005150:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f7fb f880 	bl	8000258 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	691b      	ldr	r3, [r3, #16]
 800515e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005162:	2b80      	cmp	r3, #128	; 0x80
 8005164:	d10e      	bne.n	8005184 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68db      	ldr	r3, [r3, #12]
 800516c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005170:	2b80      	cmp	r3, #128	; 0x80
 8005172:	d107      	bne.n	8005184 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800517c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 fa67 	bl	8005652 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	691b      	ldr	r3, [r3, #16]
 800518a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800518e:	2b40      	cmp	r3, #64	; 0x40
 8005190:	d10e      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800519c:	2b40      	cmp	r3, #64	; 0x40
 800519e:	d107      	bne.n	80051b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 f8f9 	bl	80053a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	691b      	ldr	r3, [r3, #16]
 80051b6:	f003 0320 	and.w	r3, r3, #32
 80051ba:	2b20      	cmp	r3, #32
 80051bc:	d10e      	bne.n	80051dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	68db      	ldr	r3, [r3, #12]
 80051c4:	f003 0320 	and.w	r3, r3, #32
 80051c8:	2b20      	cmp	r3, #32
 80051ca:	d107      	bne.n	80051dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f06f 0220 	mvn.w	r2, #32
 80051d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 fa32 	bl	8005640 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80051dc:	bf00      	nop
 80051de:	3708      	adds	r7, #8
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}

080051e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b084      	sub	sp, #16
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
 80051ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80051f4:	2b01      	cmp	r3, #1
 80051f6:	d101      	bne.n	80051fc <HAL_TIM_ConfigClockSource+0x18>
 80051f8:	2302      	movs	r3, #2
 80051fa:	e0b3      	b.n	8005364 <HAL_TIM_ConfigClockSource+0x180>
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	689b      	ldr	r3, [r3, #8]
 8005212:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800521a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005222:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68fa      	ldr	r2, [r7, #12]
 800522a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005234:	d03e      	beq.n	80052b4 <HAL_TIM_ConfigClockSource+0xd0>
 8005236:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800523a:	f200 8087 	bhi.w	800534c <HAL_TIM_ConfigClockSource+0x168>
 800523e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005242:	f000 8085 	beq.w	8005350 <HAL_TIM_ConfigClockSource+0x16c>
 8005246:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800524a:	d87f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 800524c:	2b70      	cmp	r3, #112	; 0x70
 800524e:	d01a      	beq.n	8005286 <HAL_TIM_ConfigClockSource+0xa2>
 8005250:	2b70      	cmp	r3, #112	; 0x70
 8005252:	d87b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 8005254:	2b60      	cmp	r3, #96	; 0x60
 8005256:	d050      	beq.n	80052fa <HAL_TIM_ConfigClockSource+0x116>
 8005258:	2b60      	cmp	r3, #96	; 0x60
 800525a:	d877      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 800525c:	2b50      	cmp	r3, #80	; 0x50
 800525e:	d03c      	beq.n	80052da <HAL_TIM_ConfigClockSource+0xf6>
 8005260:	2b50      	cmp	r3, #80	; 0x50
 8005262:	d873      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 8005264:	2b40      	cmp	r3, #64	; 0x40
 8005266:	d058      	beq.n	800531a <HAL_TIM_ConfigClockSource+0x136>
 8005268:	2b40      	cmp	r3, #64	; 0x40
 800526a:	d86f      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 800526c:	2b30      	cmp	r3, #48	; 0x30
 800526e:	d064      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x156>
 8005270:	2b30      	cmp	r3, #48	; 0x30
 8005272:	d86b      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 8005274:	2b20      	cmp	r3, #32
 8005276:	d060      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x156>
 8005278:	2b20      	cmp	r3, #32
 800527a:	d867      	bhi.n	800534c <HAL_TIM_ConfigClockSource+0x168>
 800527c:	2b00      	cmp	r3, #0
 800527e:	d05c      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x156>
 8005280:	2b10      	cmp	r3, #16
 8005282:	d05a      	beq.n	800533a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005284:	e062      	b.n	800534c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6818      	ldr	r0, [r3, #0]
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	6899      	ldr	r1, [r3, #8]
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	685a      	ldr	r2, [r3, #4]
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	f000 f95c 	bl	8005552 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80052a8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68fa      	ldr	r2, [r7, #12]
 80052b0:	609a      	str	r2, [r3, #8]
      break;
 80052b2:	e04e      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	6818      	ldr	r0, [r3, #0]
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6899      	ldr	r1, [r3, #8]
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685a      	ldr	r2, [r3, #4]
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	68db      	ldr	r3, [r3, #12]
 80052c4:	f000 f945 	bl	8005552 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	689a      	ldr	r2, [r3, #8]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80052d6:	609a      	str	r2, [r3, #8]
      break;
 80052d8:	e03b      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6818      	ldr	r0, [r3, #0]
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	6859      	ldr	r1, [r3, #4]
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	461a      	mov	r2, r3
 80052e8:	f000 f8bc 	bl	8005464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	2150      	movs	r1, #80	; 0x50
 80052f2:	4618      	mov	r0, r3
 80052f4:	f000 f913 	bl	800551e <TIM_ITRx_SetConfig>
      break;
 80052f8:	e02b      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6818      	ldr	r0, [r3, #0]
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6859      	ldr	r1, [r3, #4]
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	68db      	ldr	r3, [r3, #12]
 8005306:	461a      	mov	r2, r3
 8005308:	f000 f8da 	bl	80054c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	2160      	movs	r1, #96	; 0x60
 8005312:	4618      	mov	r0, r3
 8005314:	f000 f903 	bl	800551e <TIM_ITRx_SetConfig>
      break;
 8005318:	e01b      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6818      	ldr	r0, [r3, #0]
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	6859      	ldr	r1, [r3, #4]
 8005322:	683b      	ldr	r3, [r7, #0]
 8005324:	68db      	ldr	r3, [r3, #12]
 8005326:	461a      	mov	r2, r3
 8005328:	f000 f89c 	bl	8005464 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	2140      	movs	r1, #64	; 0x40
 8005332:	4618      	mov	r0, r3
 8005334:	f000 f8f3 	bl	800551e <TIM_ITRx_SetConfig>
      break;
 8005338:	e00b      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681a      	ldr	r2, [r3, #0]
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	4619      	mov	r1, r3
 8005344:	4610      	mov	r0, r2
 8005346:	f000 f8ea 	bl	800551e <TIM_ITRx_SetConfig>
        break;
 800534a:	e002      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800534c:	bf00      	nop
 800534e:	e000      	b.n	8005352 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005350:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2201      	movs	r2, #1
 8005356:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2200      	movs	r2, #0
 800535e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005362:	2300      	movs	r3, #0
}
 8005364:	4618      	mov	r0, r3
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}

0800536c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	bc80      	pop	{r7}
 800537c:	4770      	bx	lr

0800537e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800537e:	b480      	push	{r7}
 8005380:	b083      	sub	sp, #12
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	bc80      	pop	{r7}
 800538e:	4770      	bx	lr

08005390 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	bc80      	pop	{r7}
 80053a0:	4770      	bx	lr

080053a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80053a2:	b480      	push	{r7}
 80053a4:	b083      	sub	sp, #12
 80053a6:	af00      	add	r7, sp, #0
 80053a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80053aa:	bf00      	nop
 80053ac:	370c      	adds	r7, #12
 80053ae:	46bd      	mov	sp, r7
 80053b0:	bc80      	pop	{r7}
 80053b2:	4770      	bx	lr

080053b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b085      	sub	sp, #20
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	4a25      	ldr	r2, [pc, #148]	; (800545c <TIM_Base_SetConfig+0xa8>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d007      	beq.n	80053dc <TIM_Base_SetConfig+0x28>
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053d2:	d003      	beq.n	80053dc <TIM_Base_SetConfig+0x28>
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	4a22      	ldr	r2, [pc, #136]	; (8005460 <TIM_Base_SetConfig+0xac>)
 80053d8:	4293      	cmp	r3, r2
 80053da:	d108      	bne.n	80053ee <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053e2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	68fa      	ldr	r2, [r7, #12]
 80053ea:	4313      	orrs	r3, r2
 80053ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4a1a      	ldr	r2, [pc, #104]	; (800545c <TIM_Base_SetConfig+0xa8>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d007      	beq.n	8005406 <TIM_Base_SetConfig+0x52>
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fc:	d003      	beq.n	8005406 <TIM_Base_SetConfig+0x52>
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	4a17      	ldr	r2, [pc, #92]	; (8005460 <TIM_Base_SetConfig+0xac>)
 8005402:	4293      	cmp	r3, r2
 8005404:	d108      	bne.n	8005418 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800540c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	68fa      	ldr	r2, [r7, #12]
 8005414:	4313      	orrs	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	4313      	orrs	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	68fa      	ldr	r2, [r7, #12]
 800542a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	689a      	ldr	r2, [r3, #8]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a07      	ldr	r2, [pc, #28]	; (800545c <TIM_Base_SetConfig+0xa8>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d103      	bne.n	800544c <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005444:	683b      	ldr	r3, [r7, #0]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	2201      	movs	r2, #1
 8005450:	615a      	str	r2, [r3, #20]
}
 8005452:	bf00      	nop
 8005454:	3714      	adds	r7, #20
 8005456:	46bd      	mov	sp, r7
 8005458:	bc80      	pop	{r7}
 800545a:	4770      	bx	lr
 800545c:	40012c00 	.word	0x40012c00
 8005460:	40000400 	.word	0x40000400

08005464 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005464:	b480      	push	{r7}
 8005466:	b087      	sub	sp, #28
 8005468:	af00      	add	r7, sp, #0
 800546a:	60f8      	str	r0, [r7, #12]
 800546c:	60b9      	str	r1, [r7, #8]
 800546e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	6a1b      	ldr	r3, [r3, #32]
 800547a:	f023 0201 	bic.w	r2, r3, #1
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800548e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	011b      	lsls	r3, r3, #4
 8005494:	693a      	ldr	r2, [r7, #16]
 8005496:	4313      	orrs	r3, r2
 8005498:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	f023 030a 	bic.w	r3, r3, #10
 80054a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054a2:	697a      	ldr	r2, [r7, #20]
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	693a      	ldr	r2, [r7, #16]
 80054ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	697a      	ldr	r2, [r7, #20]
 80054b4:	621a      	str	r2, [r3, #32]
}
 80054b6:	bf00      	nop
 80054b8:	371c      	adds	r7, #28
 80054ba:	46bd      	mov	sp, r7
 80054bc:	bc80      	pop	{r7}
 80054be:	4770      	bx	lr

080054c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b087      	sub	sp, #28
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	60f8      	str	r0, [r7, #12]
 80054c8:	60b9      	str	r1, [r7, #8]
 80054ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	6a1b      	ldr	r3, [r3, #32]
 80054d0:	f023 0210 	bic.w	r2, r3, #16
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	6a1b      	ldr	r3, [r3, #32]
 80054e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80054ea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	031b      	lsls	r3, r3, #12
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	4313      	orrs	r3, r2
 80054f4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80054fc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	011b      	lsls	r3, r3, #4
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	697a      	ldr	r2, [r7, #20]
 800550c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	621a      	str	r2, [r3, #32]
}
 8005514:	bf00      	nop
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	bc80      	pop	{r7}
 800551c:	4770      	bx	lr

0800551e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800551e:	b480      	push	{r7}
 8005520:	b085      	sub	sp, #20
 8005522:	af00      	add	r7, sp, #0
 8005524:	6078      	str	r0, [r7, #4]
 8005526:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005534:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005536:	683a      	ldr	r2, [r7, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	4313      	orrs	r3, r2
 800553c:	f043 0307 	orr.w	r3, r3, #7
 8005540:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	68fa      	ldr	r2, [r7, #12]
 8005546:	609a      	str	r2, [r3, #8]
}
 8005548:	bf00      	nop
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005552:	b480      	push	{r7}
 8005554:	b087      	sub	sp, #28
 8005556:	af00      	add	r7, sp, #0
 8005558:	60f8      	str	r0, [r7, #12]
 800555a:	60b9      	str	r1, [r7, #8]
 800555c:	607a      	str	r2, [r7, #4]
 800555e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	689b      	ldr	r3, [r3, #8]
 8005564:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800556c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800556e:	683b      	ldr	r3, [r7, #0]
 8005570:	021a      	lsls	r2, r3, #8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	431a      	orrs	r2, r3
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4313      	orrs	r3, r2
 800557a:	697a      	ldr	r2, [r7, #20]
 800557c:	4313      	orrs	r3, r2
 800557e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	697a      	ldr	r2, [r7, #20]
 8005584:	609a      	str	r2, [r3, #8]
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	bc80      	pop	{r7}
 800558e:	4770      	bx	lr

08005590 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005590:	b480      	push	{r7}
 8005592:	b085      	sub	sp, #20
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
 8005598:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d101      	bne.n	80055a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80055a4:	2302      	movs	r3, #2
 80055a6:	e041      	b.n	800562c <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	2201      	movs	r2, #1
 80055ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2202      	movs	r2, #2
 80055b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	689b      	ldr	r3, [r3, #8]
 80055c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80055d0:	683b      	ldr	r3, [r7, #0]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68fa      	ldr	r2, [r7, #12]
 80055d6:	4313      	orrs	r3, r2
 80055d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68fa      	ldr	r2, [r7, #12]
 80055e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	4a14      	ldr	r2, [pc, #80]	; (8005638 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 80055e8:	4293      	cmp	r3, r2
 80055ea:	d009      	beq.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80055f4:	d004      	beq.n	8005600 <HAL_TIMEx_MasterConfigSynchronization+0x70>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	4a10      	ldr	r2, [pc, #64]	; (800563c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d10c      	bne.n	800561a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005606:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	68ba      	ldr	r2, [r7, #8]
 800560e:	4313      	orrs	r3, r2
 8005610:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68ba      	ldr	r2, [r7, #8]
 8005618:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2201      	movs	r2, #1
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800562a:	2300      	movs	r3, #0
}
 800562c:	4618      	mov	r0, r3
 800562e:	3714      	adds	r7, #20
 8005630:	46bd      	mov	sp, r7
 8005632:	bc80      	pop	{r7}
 8005634:	4770      	bx	lr
 8005636:	bf00      	nop
 8005638:	40012c00 	.word	0x40012c00
 800563c:	40000400 	.word	0x40000400

08005640 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005648:	bf00      	nop
 800564a:	370c      	adds	r7, #12
 800564c:	46bd      	mov	sp, r7
 800564e:	bc80      	pop	{r7}
 8005650:	4770      	bx	lr

08005652 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005652:	b480      	push	{r7}
 8005654:	b083      	sub	sp, #12
 8005656:	af00      	add	r7, sp, #0
 8005658:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800565a:	bf00      	nop
 800565c:	370c      	adds	r7, #12
 800565e:	46bd      	mov	sp, r7
 8005660:	bc80      	pop	{r7}
 8005662:	4770      	bx	lr

08005664 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d101      	bne.n	8005676 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e03f      	b.n	80056f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800567c:	b2db      	uxtb	r3, r3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f7fb fe56 	bl	800133c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2224      	movs	r2, #36	; 0x24
 8005694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	68da      	ldr	r2, [r3, #12]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80056a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80056a8:	6878      	ldr	r0, [r7, #4]
 80056aa:	f000 f905 	bl	80058b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	691a      	ldr	r2, [r3, #16]
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80056bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	695a      	ldr	r2, [r3, #20]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80056cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	68da      	ldr	r2, [r3, #12]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80056dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2200      	movs	r2, #0
 80056e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2220      	movs	r2, #32
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2220      	movs	r2, #32
 80056f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80056f4:	2300      	movs	r3, #0
}
 80056f6:	4618      	mov	r0, r3
 80056f8:	3708      	adds	r7, #8
 80056fa:	46bd      	mov	sp, r7
 80056fc:	bd80      	pop	{r7, pc}

080056fe <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056fe:	b580      	push	{r7, lr}
 8005700:	b08a      	sub	sp, #40	; 0x28
 8005702:	af02      	add	r7, sp, #8
 8005704:	60f8      	str	r0, [r7, #12]
 8005706:	60b9      	str	r1, [r7, #8]
 8005708:	603b      	str	r3, [r7, #0]
 800570a:	4613      	mov	r3, r2
 800570c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800570e:	2300      	movs	r3, #0
 8005710:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005718:	b2db      	uxtb	r3, r3
 800571a:	2b20      	cmp	r3, #32
 800571c:	d17c      	bne.n	8005818 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d002      	beq.n	800572a <HAL_UART_Transmit+0x2c>
 8005724:	88fb      	ldrh	r3, [r7, #6]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800572a:	2301      	movs	r3, #1
 800572c:	e075      	b.n	800581a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_UART_Transmit+0x3e>
 8005738:	2302      	movs	r3, #2
 800573a:	e06e      	b.n	800581a <HAL_UART_Transmit+0x11c>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2200      	movs	r2, #0
 8005748:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	2221      	movs	r2, #33	; 0x21
 800574e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005752:	f7fe f995 	bl	8003a80 <HAL_GetTick>
 8005756:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	88fa      	ldrh	r2, [r7, #6]
 800575c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	88fa      	ldrh	r2, [r7, #6]
 8005762:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800576c:	d108      	bne.n	8005780 <HAL_UART_Transmit+0x82>
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	691b      	ldr	r3, [r3, #16]
 8005772:	2b00      	cmp	r3, #0
 8005774:	d104      	bne.n	8005780 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005776:	2300      	movs	r3, #0
 8005778:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800577a:	68bb      	ldr	r3, [r7, #8]
 800577c:	61bb      	str	r3, [r7, #24]
 800577e:	e003      	b.n	8005788 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005780:	68bb      	ldr	r3, [r7, #8]
 8005782:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005784:	2300      	movs	r3, #0
 8005786:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2200      	movs	r2, #0
 800578c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005790:	e02a      	b.n	80057e8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	9300      	str	r3, [sp, #0]
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2200      	movs	r2, #0
 800579a:	2180      	movs	r1, #128	; 0x80
 800579c:	68f8      	ldr	r0, [r7, #12]
 800579e:	f000 f840 	bl	8005822 <UART_WaitOnFlagUntilTimeout>
 80057a2:	4603      	mov	r3, r0
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d001      	beq.n	80057ac <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80057a8:	2303      	movs	r3, #3
 80057aa:	e036      	b.n	800581a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80057ac:	69fb      	ldr	r3, [r7, #28]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d10b      	bne.n	80057ca <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80057b2:	69bb      	ldr	r3, [r7, #24]
 80057b4:	881b      	ldrh	r3, [r3, #0]
 80057b6:	461a      	mov	r2, r3
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80057c0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	3302      	adds	r3, #2
 80057c6:	61bb      	str	r3, [r7, #24]
 80057c8:	e007      	b.n	80057da <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	781a      	ldrb	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80057d4:	69fb      	ldr	r3, [r7, #28]
 80057d6:	3301      	adds	r3, #1
 80057d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057de:	b29b      	uxth	r3, r3
 80057e0:	3b01      	subs	r3, #1
 80057e2:	b29a      	uxth	r2, r3
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d1cf      	bne.n	8005792 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	9300      	str	r3, [sp, #0]
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	2200      	movs	r2, #0
 80057fa:	2140      	movs	r1, #64	; 0x40
 80057fc:	68f8      	ldr	r0, [r7, #12]
 80057fe:	f000 f810 	bl	8005822 <UART_WaitOnFlagUntilTimeout>
 8005802:	4603      	mov	r3, r0
 8005804:	2b00      	cmp	r3, #0
 8005806:	d001      	beq.n	800580c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e006      	b.n	800581a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	2220      	movs	r2, #32
 8005810:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005814:	2300      	movs	r3, #0
 8005816:	e000      	b.n	800581a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005818:	2302      	movs	r3, #2
  }
}
 800581a:	4618      	mov	r0, r3
 800581c:	3720      	adds	r7, #32
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005822:	b580      	push	{r7, lr}
 8005824:	b084      	sub	sp, #16
 8005826:	af00      	add	r7, sp, #0
 8005828:	60f8      	str	r0, [r7, #12]
 800582a:	60b9      	str	r1, [r7, #8]
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	4613      	mov	r3, r2
 8005830:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005832:	e02c      	b.n	800588e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800583a:	d028      	beq.n	800588e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800583c:	69bb      	ldr	r3, [r7, #24]
 800583e:	2b00      	cmp	r3, #0
 8005840:	d007      	beq.n	8005852 <UART_WaitOnFlagUntilTimeout+0x30>
 8005842:	f7fe f91d 	bl	8003a80 <HAL_GetTick>
 8005846:	4602      	mov	r2, r0
 8005848:	683b      	ldr	r3, [r7, #0]
 800584a:	1ad3      	subs	r3, r2, r3
 800584c:	69ba      	ldr	r2, [r7, #24]
 800584e:	429a      	cmp	r2, r3
 8005850:	d21d      	bcs.n	800588e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	68da      	ldr	r2, [r3, #12]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005860:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	695a      	ldr	r2, [r3, #20]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 0201 	bic.w	r2, r2, #1
 8005870:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2220      	movs	r2, #32
 8005876:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	2220      	movs	r2, #32
 800587e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	2200      	movs	r2, #0
 8005886:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800588a:	2303      	movs	r3, #3
 800588c:	e00f      	b.n	80058ae <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4013      	ands	r3, r2
 8005898:	68ba      	ldr	r2, [r7, #8]
 800589a:	429a      	cmp	r2, r3
 800589c:	bf0c      	ite	eq
 800589e:	2301      	moveq	r3, #1
 80058a0:	2300      	movne	r3, #0
 80058a2:	b2db      	uxtb	r3, r3
 80058a4:	461a      	mov	r2, r3
 80058a6:	79fb      	ldrb	r3, [r7, #7]
 80058a8:	429a      	cmp	r2, r3
 80058aa:	d0c3      	beq.n	8005834 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3710      	adds	r7, #16
 80058b2:	46bd      	mov	sp, r7
 80058b4:	bd80      	pop	{r7, pc}
	...

080058b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80058b8:	b580      	push	{r7, lr}
 80058ba:	b084      	sub	sp, #16
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	68da      	ldr	r2, [r3, #12]
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	430a      	orrs	r2, r1
 80058d4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	689a      	ldr	r2, [r3, #8]
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	691b      	ldr	r3, [r3, #16]
 80058de:	431a      	orrs	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	695b      	ldr	r3, [r3, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80058f2:	f023 030c 	bic.w	r3, r3, #12
 80058f6:	687a      	ldr	r2, [r7, #4]
 80058f8:	6812      	ldr	r2, [r2, #0]
 80058fa:	68b9      	ldr	r1, [r7, #8]
 80058fc:	430b      	orrs	r3, r1
 80058fe:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	699a      	ldr	r2, [r3, #24]
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	430a      	orrs	r2, r1
 8005914:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a2c      	ldr	r2, [pc, #176]	; (80059cc <UART_SetConfig+0x114>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d103      	bne.n	8005928 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005920:	f7fe fff6 	bl	8004910 <HAL_RCC_GetPCLK2Freq>
 8005924:	60f8      	str	r0, [r7, #12]
 8005926:	e002      	b.n	800592e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005928:	f7fe ffde 	bl	80048e8 <HAL_RCC_GetPCLK1Freq>
 800592c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4613      	mov	r3, r2
 8005932:	009b      	lsls	r3, r3, #2
 8005934:	4413      	add	r3, r2
 8005936:	009a      	lsls	r2, r3, #2
 8005938:	441a      	add	r2, r3
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	685b      	ldr	r3, [r3, #4]
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	fbb2 f3f3 	udiv	r3, r2, r3
 8005944:	4a22      	ldr	r2, [pc, #136]	; (80059d0 <UART_SetConfig+0x118>)
 8005946:	fba2 2303 	umull	r2, r3, r2, r3
 800594a:	095b      	lsrs	r3, r3, #5
 800594c:	0119      	lsls	r1, r3, #4
 800594e:	68fa      	ldr	r2, [r7, #12]
 8005950:	4613      	mov	r3, r2
 8005952:	009b      	lsls	r3, r3, #2
 8005954:	4413      	add	r3, r2
 8005956:	009a      	lsls	r2, r3, #2
 8005958:	441a      	add	r2, r3
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	685b      	ldr	r3, [r3, #4]
 800595e:	009b      	lsls	r3, r3, #2
 8005960:	fbb2 f2f3 	udiv	r2, r2, r3
 8005964:	4b1a      	ldr	r3, [pc, #104]	; (80059d0 <UART_SetConfig+0x118>)
 8005966:	fba3 0302 	umull	r0, r3, r3, r2
 800596a:	095b      	lsrs	r3, r3, #5
 800596c:	2064      	movs	r0, #100	; 0x64
 800596e:	fb00 f303 	mul.w	r3, r0, r3
 8005972:	1ad3      	subs	r3, r2, r3
 8005974:	011b      	lsls	r3, r3, #4
 8005976:	3332      	adds	r3, #50	; 0x32
 8005978:	4a15      	ldr	r2, [pc, #84]	; (80059d0 <UART_SetConfig+0x118>)
 800597a:	fba2 2303 	umull	r2, r3, r2, r3
 800597e:	095b      	lsrs	r3, r3, #5
 8005980:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005984:	4419      	add	r1, r3
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	4613      	mov	r3, r2
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	4413      	add	r3, r2
 800598e:	009a      	lsls	r2, r3, #2
 8005990:	441a      	add	r2, r3
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	fbb2 f2f3 	udiv	r2, r2, r3
 800599c:	4b0c      	ldr	r3, [pc, #48]	; (80059d0 <UART_SetConfig+0x118>)
 800599e:	fba3 0302 	umull	r0, r3, r3, r2
 80059a2:	095b      	lsrs	r3, r3, #5
 80059a4:	2064      	movs	r0, #100	; 0x64
 80059a6:	fb00 f303 	mul.w	r3, r0, r3
 80059aa:	1ad3      	subs	r3, r2, r3
 80059ac:	011b      	lsls	r3, r3, #4
 80059ae:	3332      	adds	r3, #50	; 0x32
 80059b0:	4a07      	ldr	r2, [pc, #28]	; (80059d0 <UART_SetConfig+0x118>)
 80059b2:	fba2 2303 	umull	r2, r3, r2, r3
 80059b6:	095b      	lsrs	r3, r3, #5
 80059b8:	f003 020f 	and.w	r2, r3, #15
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	440a      	add	r2, r1
 80059c2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80059c4:	bf00      	nop
 80059c6:	3710      	adds	r7, #16
 80059c8:	46bd      	mov	sp, r7
 80059ca:	bd80      	pop	{r7, pc}
 80059cc:	40013800 	.word	0x40013800
 80059d0:	51eb851f 	.word	0x51eb851f

080059d4 <__errno>:
 80059d4:	4b01      	ldr	r3, [pc, #4]	; (80059dc <__errno+0x8>)
 80059d6:	6818      	ldr	r0, [r3, #0]
 80059d8:	4770      	bx	lr
 80059da:	bf00      	nop
 80059dc:	2000023c 	.word	0x2000023c

080059e0 <__libc_init_array>:
 80059e0:	b570      	push	{r4, r5, r6, lr}
 80059e2:	2600      	movs	r6, #0
 80059e4:	4d0c      	ldr	r5, [pc, #48]	; (8005a18 <__libc_init_array+0x38>)
 80059e6:	4c0d      	ldr	r4, [pc, #52]	; (8005a1c <__libc_init_array+0x3c>)
 80059e8:	1b64      	subs	r4, r4, r5
 80059ea:	10a4      	asrs	r4, r4, #2
 80059ec:	42a6      	cmp	r6, r4
 80059ee:	d109      	bne.n	8005a04 <__libc_init_array+0x24>
 80059f0:	f000 fcc4 	bl	800637c <_init>
 80059f4:	2600      	movs	r6, #0
 80059f6:	4d0a      	ldr	r5, [pc, #40]	; (8005a20 <__libc_init_array+0x40>)
 80059f8:	4c0a      	ldr	r4, [pc, #40]	; (8005a24 <__libc_init_array+0x44>)
 80059fa:	1b64      	subs	r4, r4, r5
 80059fc:	10a4      	asrs	r4, r4, #2
 80059fe:	42a6      	cmp	r6, r4
 8005a00:	d105      	bne.n	8005a0e <__libc_init_array+0x2e>
 8005a02:	bd70      	pop	{r4, r5, r6, pc}
 8005a04:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a08:	4798      	blx	r3
 8005a0a:	3601      	adds	r6, #1
 8005a0c:	e7ee      	b.n	80059ec <__libc_init_array+0xc>
 8005a0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005a12:	4798      	blx	r3
 8005a14:	3601      	adds	r6, #1
 8005a16:	e7f2      	b.n	80059fe <__libc_init_array+0x1e>
 8005a18:	08006e0c 	.word	0x08006e0c
 8005a1c:	08006e0c 	.word	0x08006e0c
 8005a20:	08006e0c 	.word	0x08006e0c
 8005a24:	08006e10 	.word	0x08006e10

08005a28 <memset>:
 8005a28:	4603      	mov	r3, r0
 8005a2a:	4402      	add	r2, r0
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d100      	bne.n	8005a32 <memset+0xa>
 8005a30:	4770      	bx	lr
 8005a32:	f803 1b01 	strb.w	r1, [r3], #1
 8005a36:	e7f9      	b.n	8005a2c <memset+0x4>

08005a38 <sniprintf>:
 8005a38:	b40c      	push	{r2, r3}
 8005a3a:	b530      	push	{r4, r5, lr}
 8005a3c:	4b17      	ldr	r3, [pc, #92]	; (8005a9c <sniprintf+0x64>)
 8005a3e:	1e0c      	subs	r4, r1, #0
 8005a40:	681d      	ldr	r5, [r3, #0]
 8005a42:	b09d      	sub	sp, #116	; 0x74
 8005a44:	da08      	bge.n	8005a58 <sniprintf+0x20>
 8005a46:	238b      	movs	r3, #139	; 0x8b
 8005a48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a4c:	602b      	str	r3, [r5, #0]
 8005a4e:	b01d      	add	sp, #116	; 0x74
 8005a50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005a54:	b002      	add	sp, #8
 8005a56:	4770      	bx	lr
 8005a58:	f44f 7302 	mov.w	r3, #520	; 0x208
 8005a5c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005a60:	bf0c      	ite	eq
 8005a62:	4623      	moveq	r3, r4
 8005a64:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	9307      	str	r3, [sp, #28]
 8005a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a70:	9002      	str	r0, [sp, #8]
 8005a72:	9006      	str	r0, [sp, #24]
 8005a74:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005a78:	4628      	mov	r0, r5
 8005a7a:	ab21      	add	r3, sp, #132	; 0x84
 8005a7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8005a7e:	a902      	add	r1, sp, #8
 8005a80:	9301      	str	r3, [sp, #4]
 8005a82:	f000 f87d 	bl	8005b80 <_svfiprintf_r>
 8005a86:	1c43      	adds	r3, r0, #1
 8005a88:	bfbc      	itt	lt
 8005a8a:	238b      	movlt	r3, #139	; 0x8b
 8005a8c:	602b      	strlt	r3, [r5, #0]
 8005a8e:	2c00      	cmp	r4, #0
 8005a90:	d0dd      	beq.n	8005a4e <sniprintf+0x16>
 8005a92:	2200      	movs	r2, #0
 8005a94:	9b02      	ldr	r3, [sp, #8]
 8005a96:	701a      	strb	r2, [r3, #0]
 8005a98:	e7d9      	b.n	8005a4e <sniprintf+0x16>
 8005a9a:	bf00      	nop
 8005a9c:	2000023c 	.word	0x2000023c

08005aa0 <strncmp>:
 8005aa0:	4603      	mov	r3, r0
 8005aa2:	b510      	push	{r4, lr}
 8005aa4:	b172      	cbz	r2, 8005ac4 <strncmp+0x24>
 8005aa6:	3901      	subs	r1, #1
 8005aa8:	1884      	adds	r4, r0, r2
 8005aaa:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005aae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005ab2:	4290      	cmp	r0, r2
 8005ab4:	d101      	bne.n	8005aba <strncmp+0x1a>
 8005ab6:	42a3      	cmp	r3, r4
 8005ab8:	d101      	bne.n	8005abe <strncmp+0x1e>
 8005aba:	1a80      	subs	r0, r0, r2
 8005abc:	bd10      	pop	{r4, pc}
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d1f3      	bne.n	8005aaa <strncmp+0xa>
 8005ac2:	e7fa      	b.n	8005aba <strncmp+0x1a>
 8005ac4:	4610      	mov	r0, r2
 8005ac6:	e7f9      	b.n	8005abc <strncmp+0x1c>

08005ac8 <__ssputs_r>:
 8005ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005acc:	688e      	ldr	r6, [r1, #8]
 8005ace:	4682      	mov	sl, r0
 8005ad0:	429e      	cmp	r6, r3
 8005ad2:	460c      	mov	r4, r1
 8005ad4:	4690      	mov	r8, r2
 8005ad6:	461f      	mov	r7, r3
 8005ad8:	d838      	bhi.n	8005b4c <__ssputs_r+0x84>
 8005ada:	898a      	ldrh	r2, [r1, #12]
 8005adc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005ae0:	d032      	beq.n	8005b48 <__ssputs_r+0x80>
 8005ae2:	6825      	ldr	r5, [r4, #0]
 8005ae4:	6909      	ldr	r1, [r1, #16]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	eba5 0901 	sub.w	r9, r5, r1
 8005aec:	6965      	ldr	r5, [r4, #20]
 8005aee:	444b      	add	r3, r9
 8005af0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005af4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005af8:	106d      	asrs	r5, r5, #1
 8005afa:	429d      	cmp	r5, r3
 8005afc:	bf38      	it	cc
 8005afe:	461d      	movcc	r5, r3
 8005b00:	0553      	lsls	r3, r2, #21
 8005b02:	d531      	bpl.n	8005b68 <__ssputs_r+0xa0>
 8005b04:	4629      	mov	r1, r5
 8005b06:	f000 fb6f 	bl	80061e8 <_malloc_r>
 8005b0a:	4606      	mov	r6, r0
 8005b0c:	b950      	cbnz	r0, 8005b24 <__ssputs_r+0x5c>
 8005b0e:	230c      	movs	r3, #12
 8005b10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005b14:	f8ca 3000 	str.w	r3, [sl]
 8005b18:	89a3      	ldrh	r3, [r4, #12]
 8005b1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b1e:	81a3      	strh	r3, [r4, #12]
 8005b20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b24:	464a      	mov	r2, r9
 8005b26:	6921      	ldr	r1, [r4, #16]
 8005b28:	f000 face 	bl	80060c8 <memcpy>
 8005b2c:	89a3      	ldrh	r3, [r4, #12]
 8005b2e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005b32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	6126      	str	r6, [r4, #16]
 8005b3a:	444e      	add	r6, r9
 8005b3c:	6026      	str	r6, [r4, #0]
 8005b3e:	463e      	mov	r6, r7
 8005b40:	6165      	str	r5, [r4, #20]
 8005b42:	eba5 0509 	sub.w	r5, r5, r9
 8005b46:	60a5      	str	r5, [r4, #8]
 8005b48:	42be      	cmp	r6, r7
 8005b4a:	d900      	bls.n	8005b4e <__ssputs_r+0x86>
 8005b4c:	463e      	mov	r6, r7
 8005b4e:	4632      	mov	r2, r6
 8005b50:	4641      	mov	r1, r8
 8005b52:	6820      	ldr	r0, [r4, #0]
 8005b54:	f000 fac6 	bl	80060e4 <memmove>
 8005b58:	68a3      	ldr	r3, [r4, #8]
 8005b5a:	2000      	movs	r0, #0
 8005b5c:	1b9b      	subs	r3, r3, r6
 8005b5e:	60a3      	str	r3, [r4, #8]
 8005b60:	6823      	ldr	r3, [r4, #0]
 8005b62:	4433      	add	r3, r6
 8005b64:	6023      	str	r3, [r4, #0]
 8005b66:	e7db      	b.n	8005b20 <__ssputs_r+0x58>
 8005b68:	462a      	mov	r2, r5
 8005b6a:	f000 fbb1 	bl	80062d0 <_realloc_r>
 8005b6e:	4606      	mov	r6, r0
 8005b70:	2800      	cmp	r0, #0
 8005b72:	d1e1      	bne.n	8005b38 <__ssputs_r+0x70>
 8005b74:	4650      	mov	r0, sl
 8005b76:	6921      	ldr	r1, [r4, #16]
 8005b78:	f000 face 	bl	8006118 <_free_r>
 8005b7c:	e7c7      	b.n	8005b0e <__ssputs_r+0x46>
	...

08005b80 <_svfiprintf_r>:
 8005b80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b84:	4698      	mov	r8, r3
 8005b86:	898b      	ldrh	r3, [r1, #12]
 8005b88:	4607      	mov	r7, r0
 8005b8a:	061b      	lsls	r3, r3, #24
 8005b8c:	460d      	mov	r5, r1
 8005b8e:	4614      	mov	r4, r2
 8005b90:	b09d      	sub	sp, #116	; 0x74
 8005b92:	d50e      	bpl.n	8005bb2 <_svfiprintf_r+0x32>
 8005b94:	690b      	ldr	r3, [r1, #16]
 8005b96:	b963      	cbnz	r3, 8005bb2 <_svfiprintf_r+0x32>
 8005b98:	2140      	movs	r1, #64	; 0x40
 8005b9a:	f000 fb25 	bl	80061e8 <_malloc_r>
 8005b9e:	6028      	str	r0, [r5, #0]
 8005ba0:	6128      	str	r0, [r5, #16]
 8005ba2:	b920      	cbnz	r0, 8005bae <_svfiprintf_r+0x2e>
 8005ba4:	230c      	movs	r3, #12
 8005ba6:	603b      	str	r3, [r7, #0]
 8005ba8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005bac:	e0d1      	b.n	8005d52 <_svfiprintf_r+0x1d2>
 8005bae:	2340      	movs	r3, #64	; 0x40
 8005bb0:	616b      	str	r3, [r5, #20]
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	9309      	str	r3, [sp, #36]	; 0x24
 8005bb6:	2320      	movs	r3, #32
 8005bb8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005bbc:	2330      	movs	r3, #48	; 0x30
 8005bbe:	f04f 0901 	mov.w	r9, #1
 8005bc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005bc6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8005d6c <_svfiprintf_r+0x1ec>
 8005bca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005bce:	4623      	mov	r3, r4
 8005bd0:	469a      	mov	sl, r3
 8005bd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005bd6:	b10a      	cbz	r2, 8005bdc <_svfiprintf_r+0x5c>
 8005bd8:	2a25      	cmp	r2, #37	; 0x25
 8005bda:	d1f9      	bne.n	8005bd0 <_svfiprintf_r+0x50>
 8005bdc:	ebba 0b04 	subs.w	fp, sl, r4
 8005be0:	d00b      	beq.n	8005bfa <_svfiprintf_r+0x7a>
 8005be2:	465b      	mov	r3, fp
 8005be4:	4622      	mov	r2, r4
 8005be6:	4629      	mov	r1, r5
 8005be8:	4638      	mov	r0, r7
 8005bea:	f7ff ff6d 	bl	8005ac8 <__ssputs_r>
 8005bee:	3001      	adds	r0, #1
 8005bf0:	f000 80aa 	beq.w	8005d48 <_svfiprintf_r+0x1c8>
 8005bf4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005bf6:	445a      	add	r2, fp
 8005bf8:	9209      	str	r2, [sp, #36]	; 0x24
 8005bfa:	f89a 3000 	ldrb.w	r3, [sl]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	f000 80a2 	beq.w	8005d48 <_svfiprintf_r+0x1c8>
 8005c04:	2300      	movs	r3, #0
 8005c06:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005c0e:	f10a 0a01 	add.w	sl, sl, #1
 8005c12:	9304      	str	r3, [sp, #16]
 8005c14:	9307      	str	r3, [sp, #28]
 8005c16:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005c1a:	931a      	str	r3, [sp, #104]	; 0x68
 8005c1c:	4654      	mov	r4, sl
 8005c1e:	2205      	movs	r2, #5
 8005c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c24:	4851      	ldr	r0, [pc, #324]	; (8005d6c <_svfiprintf_r+0x1ec>)
 8005c26:	f000 fa41 	bl	80060ac <memchr>
 8005c2a:	9a04      	ldr	r2, [sp, #16]
 8005c2c:	b9d8      	cbnz	r0, 8005c66 <_svfiprintf_r+0xe6>
 8005c2e:	06d0      	lsls	r0, r2, #27
 8005c30:	bf44      	itt	mi
 8005c32:	2320      	movmi	r3, #32
 8005c34:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c38:	0711      	lsls	r1, r2, #28
 8005c3a:	bf44      	itt	mi
 8005c3c:	232b      	movmi	r3, #43	; 0x2b
 8005c3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005c42:	f89a 3000 	ldrb.w	r3, [sl]
 8005c46:	2b2a      	cmp	r3, #42	; 0x2a
 8005c48:	d015      	beq.n	8005c76 <_svfiprintf_r+0xf6>
 8005c4a:	4654      	mov	r4, sl
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	f04f 0c0a 	mov.w	ip, #10
 8005c52:	9a07      	ldr	r2, [sp, #28]
 8005c54:	4621      	mov	r1, r4
 8005c56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005c5a:	3b30      	subs	r3, #48	; 0x30
 8005c5c:	2b09      	cmp	r3, #9
 8005c5e:	d94e      	bls.n	8005cfe <_svfiprintf_r+0x17e>
 8005c60:	b1b0      	cbz	r0, 8005c90 <_svfiprintf_r+0x110>
 8005c62:	9207      	str	r2, [sp, #28]
 8005c64:	e014      	b.n	8005c90 <_svfiprintf_r+0x110>
 8005c66:	eba0 0308 	sub.w	r3, r0, r8
 8005c6a:	fa09 f303 	lsl.w	r3, r9, r3
 8005c6e:	4313      	orrs	r3, r2
 8005c70:	46a2      	mov	sl, r4
 8005c72:	9304      	str	r3, [sp, #16]
 8005c74:	e7d2      	b.n	8005c1c <_svfiprintf_r+0x9c>
 8005c76:	9b03      	ldr	r3, [sp, #12]
 8005c78:	1d19      	adds	r1, r3, #4
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	9103      	str	r1, [sp, #12]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	bfbb      	ittet	lt
 8005c82:	425b      	neglt	r3, r3
 8005c84:	f042 0202 	orrlt.w	r2, r2, #2
 8005c88:	9307      	strge	r3, [sp, #28]
 8005c8a:	9307      	strlt	r3, [sp, #28]
 8005c8c:	bfb8      	it	lt
 8005c8e:	9204      	strlt	r2, [sp, #16]
 8005c90:	7823      	ldrb	r3, [r4, #0]
 8005c92:	2b2e      	cmp	r3, #46	; 0x2e
 8005c94:	d10c      	bne.n	8005cb0 <_svfiprintf_r+0x130>
 8005c96:	7863      	ldrb	r3, [r4, #1]
 8005c98:	2b2a      	cmp	r3, #42	; 0x2a
 8005c9a:	d135      	bne.n	8005d08 <_svfiprintf_r+0x188>
 8005c9c:	9b03      	ldr	r3, [sp, #12]
 8005c9e:	3402      	adds	r4, #2
 8005ca0:	1d1a      	adds	r2, r3, #4
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	9203      	str	r2, [sp, #12]
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	bfb8      	it	lt
 8005caa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005cae:	9305      	str	r3, [sp, #20]
 8005cb0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8005d70 <_svfiprintf_r+0x1f0>
 8005cb4:	2203      	movs	r2, #3
 8005cb6:	4650      	mov	r0, sl
 8005cb8:	7821      	ldrb	r1, [r4, #0]
 8005cba:	f000 f9f7 	bl	80060ac <memchr>
 8005cbe:	b140      	cbz	r0, 8005cd2 <_svfiprintf_r+0x152>
 8005cc0:	2340      	movs	r3, #64	; 0x40
 8005cc2:	eba0 000a 	sub.w	r0, r0, sl
 8005cc6:	fa03 f000 	lsl.w	r0, r3, r0
 8005cca:	9b04      	ldr	r3, [sp, #16]
 8005ccc:	3401      	adds	r4, #1
 8005cce:	4303      	orrs	r3, r0
 8005cd0:	9304      	str	r3, [sp, #16]
 8005cd2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cd6:	2206      	movs	r2, #6
 8005cd8:	4826      	ldr	r0, [pc, #152]	; (8005d74 <_svfiprintf_r+0x1f4>)
 8005cda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005cde:	f000 f9e5 	bl	80060ac <memchr>
 8005ce2:	2800      	cmp	r0, #0
 8005ce4:	d038      	beq.n	8005d58 <_svfiprintf_r+0x1d8>
 8005ce6:	4b24      	ldr	r3, [pc, #144]	; (8005d78 <_svfiprintf_r+0x1f8>)
 8005ce8:	bb1b      	cbnz	r3, 8005d32 <_svfiprintf_r+0x1b2>
 8005cea:	9b03      	ldr	r3, [sp, #12]
 8005cec:	3307      	adds	r3, #7
 8005cee:	f023 0307 	bic.w	r3, r3, #7
 8005cf2:	3308      	adds	r3, #8
 8005cf4:	9303      	str	r3, [sp, #12]
 8005cf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005cf8:	4433      	add	r3, r6
 8005cfa:	9309      	str	r3, [sp, #36]	; 0x24
 8005cfc:	e767      	b.n	8005bce <_svfiprintf_r+0x4e>
 8005cfe:	460c      	mov	r4, r1
 8005d00:	2001      	movs	r0, #1
 8005d02:	fb0c 3202 	mla	r2, ip, r2, r3
 8005d06:	e7a5      	b.n	8005c54 <_svfiprintf_r+0xd4>
 8005d08:	2300      	movs	r3, #0
 8005d0a:	f04f 0c0a 	mov.w	ip, #10
 8005d0e:	4619      	mov	r1, r3
 8005d10:	3401      	adds	r4, #1
 8005d12:	9305      	str	r3, [sp, #20]
 8005d14:	4620      	mov	r0, r4
 8005d16:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005d1a:	3a30      	subs	r2, #48	; 0x30
 8005d1c:	2a09      	cmp	r2, #9
 8005d1e:	d903      	bls.n	8005d28 <_svfiprintf_r+0x1a8>
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d0c5      	beq.n	8005cb0 <_svfiprintf_r+0x130>
 8005d24:	9105      	str	r1, [sp, #20]
 8005d26:	e7c3      	b.n	8005cb0 <_svfiprintf_r+0x130>
 8005d28:	4604      	mov	r4, r0
 8005d2a:	2301      	movs	r3, #1
 8005d2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8005d30:	e7f0      	b.n	8005d14 <_svfiprintf_r+0x194>
 8005d32:	ab03      	add	r3, sp, #12
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	462a      	mov	r2, r5
 8005d38:	4638      	mov	r0, r7
 8005d3a:	4b10      	ldr	r3, [pc, #64]	; (8005d7c <_svfiprintf_r+0x1fc>)
 8005d3c:	a904      	add	r1, sp, #16
 8005d3e:	f3af 8000 	nop.w
 8005d42:	1c42      	adds	r2, r0, #1
 8005d44:	4606      	mov	r6, r0
 8005d46:	d1d6      	bne.n	8005cf6 <_svfiprintf_r+0x176>
 8005d48:	89ab      	ldrh	r3, [r5, #12]
 8005d4a:	065b      	lsls	r3, r3, #25
 8005d4c:	f53f af2c 	bmi.w	8005ba8 <_svfiprintf_r+0x28>
 8005d50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d52:	b01d      	add	sp, #116	; 0x74
 8005d54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d58:	ab03      	add	r3, sp, #12
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	462a      	mov	r2, r5
 8005d5e:	4638      	mov	r0, r7
 8005d60:	4b06      	ldr	r3, [pc, #24]	; (8005d7c <_svfiprintf_r+0x1fc>)
 8005d62:	a904      	add	r1, sp, #16
 8005d64:	f000 f87c 	bl	8005e60 <_printf_i>
 8005d68:	e7eb      	b.n	8005d42 <_svfiprintf_r+0x1c2>
 8005d6a:	bf00      	nop
 8005d6c:	08006dd7 	.word	0x08006dd7
 8005d70:	08006ddd 	.word	0x08006ddd
 8005d74:	08006de1 	.word	0x08006de1
 8005d78:	00000000 	.word	0x00000000
 8005d7c:	08005ac9 	.word	0x08005ac9

08005d80 <_printf_common>:
 8005d80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d84:	4616      	mov	r6, r2
 8005d86:	4699      	mov	r9, r3
 8005d88:	688a      	ldr	r2, [r1, #8]
 8005d8a:	690b      	ldr	r3, [r1, #16]
 8005d8c:	4607      	mov	r7, r0
 8005d8e:	4293      	cmp	r3, r2
 8005d90:	bfb8      	it	lt
 8005d92:	4613      	movlt	r3, r2
 8005d94:	6033      	str	r3, [r6, #0]
 8005d96:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d9a:	460c      	mov	r4, r1
 8005d9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005da0:	b10a      	cbz	r2, 8005da6 <_printf_common+0x26>
 8005da2:	3301      	adds	r3, #1
 8005da4:	6033      	str	r3, [r6, #0]
 8005da6:	6823      	ldr	r3, [r4, #0]
 8005da8:	0699      	lsls	r1, r3, #26
 8005daa:	bf42      	ittt	mi
 8005dac:	6833      	ldrmi	r3, [r6, #0]
 8005dae:	3302      	addmi	r3, #2
 8005db0:	6033      	strmi	r3, [r6, #0]
 8005db2:	6825      	ldr	r5, [r4, #0]
 8005db4:	f015 0506 	ands.w	r5, r5, #6
 8005db8:	d106      	bne.n	8005dc8 <_printf_common+0x48>
 8005dba:	f104 0a19 	add.w	sl, r4, #25
 8005dbe:	68e3      	ldr	r3, [r4, #12]
 8005dc0:	6832      	ldr	r2, [r6, #0]
 8005dc2:	1a9b      	subs	r3, r3, r2
 8005dc4:	42ab      	cmp	r3, r5
 8005dc6:	dc28      	bgt.n	8005e1a <_printf_common+0x9a>
 8005dc8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005dcc:	1e13      	subs	r3, r2, #0
 8005dce:	6822      	ldr	r2, [r4, #0]
 8005dd0:	bf18      	it	ne
 8005dd2:	2301      	movne	r3, #1
 8005dd4:	0692      	lsls	r2, r2, #26
 8005dd6:	d42d      	bmi.n	8005e34 <_printf_common+0xb4>
 8005dd8:	4649      	mov	r1, r9
 8005dda:	4638      	mov	r0, r7
 8005ddc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005de0:	47c0      	blx	r8
 8005de2:	3001      	adds	r0, #1
 8005de4:	d020      	beq.n	8005e28 <_printf_common+0xa8>
 8005de6:	6823      	ldr	r3, [r4, #0]
 8005de8:	68e5      	ldr	r5, [r4, #12]
 8005dea:	f003 0306 	and.w	r3, r3, #6
 8005dee:	2b04      	cmp	r3, #4
 8005df0:	bf18      	it	ne
 8005df2:	2500      	movne	r5, #0
 8005df4:	6832      	ldr	r2, [r6, #0]
 8005df6:	f04f 0600 	mov.w	r6, #0
 8005dfa:	68a3      	ldr	r3, [r4, #8]
 8005dfc:	bf08      	it	eq
 8005dfe:	1aad      	subeq	r5, r5, r2
 8005e00:	6922      	ldr	r2, [r4, #16]
 8005e02:	bf08      	it	eq
 8005e04:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	bfc4      	itt	gt
 8005e0c:	1a9b      	subgt	r3, r3, r2
 8005e0e:	18ed      	addgt	r5, r5, r3
 8005e10:	341a      	adds	r4, #26
 8005e12:	42b5      	cmp	r5, r6
 8005e14:	d11a      	bne.n	8005e4c <_printf_common+0xcc>
 8005e16:	2000      	movs	r0, #0
 8005e18:	e008      	b.n	8005e2c <_printf_common+0xac>
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	4652      	mov	r2, sl
 8005e1e:	4649      	mov	r1, r9
 8005e20:	4638      	mov	r0, r7
 8005e22:	47c0      	blx	r8
 8005e24:	3001      	adds	r0, #1
 8005e26:	d103      	bne.n	8005e30 <_printf_common+0xb0>
 8005e28:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005e2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e30:	3501      	adds	r5, #1
 8005e32:	e7c4      	b.n	8005dbe <_printf_common+0x3e>
 8005e34:	2030      	movs	r0, #48	; 0x30
 8005e36:	18e1      	adds	r1, r4, r3
 8005e38:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e3c:	1c5a      	adds	r2, r3, #1
 8005e3e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e42:	4422      	add	r2, r4
 8005e44:	3302      	adds	r3, #2
 8005e46:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e4a:	e7c5      	b.n	8005dd8 <_printf_common+0x58>
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	4622      	mov	r2, r4
 8005e50:	4649      	mov	r1, r9
 8005e52:	4638      	mov	r0, r7
 8005e54:	47c0      	blx	r8
 8005e56:	3001      	adds	r0, #1
 8005e58:	d0e6      	beq.n	8005e28 <_printf_common+0xa8>
 8005e5a:	3601      	adds	r6, #1
 8005e5c:	e7d9      	b.n	8005e12 <_printf_common+0x92>
	...

08005e60 <_printf_i>:
 8005e60:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e64:	7e0f      	ldrb	r7, [r1, #24]
 8005e66:	4691      	mov	r9, r2
 8005e68:	2f78      	cmp	r7, #120	; 0x78
 8005e6a:	4680      	mov	r8, r0
 8005e6c:	460c      	mov	r4, r1
 8005e6e:	469a      	mov	sl, r3
 8005e70:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e72:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e76:	d807      	bhi.n	8005e88 <_printf_i+0x28>
 8005e78:	2f62      	cmp	r7, #98	; 0x62
 8005e7a:	d80a      	bhi.n	8005e92 <_printf_i+0x32>
 8005e7c:	2f00      	cmp	r7, #0
 8005e7e:	f000 80d9 	beq.w	8006034 <_printf_i+0x1d4>
 8005e82:	2f58      	cmp	r7, #88	; 0x58
 8005e84:	f000 80a4 	beq.w	8005fd0 <_printf_i+0x170>
 8005e88:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e8c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e90:	e03a      	b.n	8005f08 <_printf_i+0xa8>
 8005e92:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e96:	2b15      	cmp	r3, #21
 8005e98:	d8f6      	bhi.n	8005e88 <_printf_i+0x28>
 8005e9a:	a101      	add	r1, pc, #4	; (adr r1, 8005ea0 <_printf_i+0x40>)
 8005e9c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005ea0:	08005ef9 	.word	0x08005ef9
 8005ea4:	08005f0d 	.word	0x08005f0d
 8005ea8:	08005e89 	.word	0x08005e89
 8005eac:	08005e89 	.word	0x08005e89
 8005eb0:	08005e89 	.word	0x08005e89
 8005eb4:	08005e89 	.word	0x08005e89
 8005eb8:	08005f0d 	.word	0x08005f0d
 8005ebc:	08005e89 	.word	0x08005e89
 8005ec0:	08005e89 	.word	0x08005e89
 8005ec4:	08005e89 	.word	0x08005e89
 8005ec8:	08005e89 	.word	0x08005e89
 8005ecc:	0800601b 	.word	0x0800601b
 8005ed0:	08005f3d 	.word	0x08005f3d
 8005ed4:	08005ffd 	.word	0x08005ffd
 8005ed8:	08005e89 	.word	0x08005e89
 8005edc:	08005e89 	.word	0x08005e89
 8005ee0:	0800603d 	.word	0x0800603d
 8005ee4:	08005e89 	.word	0x08005e89
 8005ee8:	08005f3d 	.word	0x08005f3d
 8005eec:	08005e89 	.word	0x08005e89
 8005ef0:	08005e89 	.word	0x08005e89
 8005ef4:	08006005 	.word	0x08006005
 8005ef8:	682b      	ldr	r3, [r5, #0]
 8005efa:	1d1a      	adds	r2, r3, #4
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	602a      	str	r2, [r5, #0]
 8005f00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005f04:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005f08:	2301      	movs	r3, #1
 8005f0a:	e0a4      	b.n	8006056 <_printf_i+0x1f6>
 8005f0c:	6820      	ldr	r0, [r4, #0]
 8005f0e:	6829      	ldr	r1, [r5, #0]
 8005f10:	0606      	lsls	r6, r0, #24
 8005f12:	f101 0304 	add.w	r3, r1, #4
 8005f16:	d50a      	bpl.n	8005f2e <_printf_i+0xce>
 8005f18:	680e      	ldr	r6, [r1, #0]
 8005f1a:	602b      	str	r3, [r5, #0]
 8005f1c:	2e00      	cmp	r6, #0
 8005f1e:	da03      	bge.n	8005f28 <_printf_i+0xc8>
 8005f20:	232d      	movs	r3, #45	; 0x2d
 8005f22:	4276      	negs	r6, r6
 8005f24:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005f28:	230a      	movs	r3, #10
 8005f2a:	485e      	ldr	r0, [pc, #376]	; (80060a4 <_printf_i+0x244>)
 8005f2c:	e019      	b.n	8005f62 <_printf_i+0x102>
 8005f2e:	680e      	ldr	r6, [r1, #0]
 8005f30:	f010 0f40 	tst.w	r0, #64	; 0x40
 8005f34:	602b      	str	r3, [r5, #0]
 8005f36:	bf18      	it	ne
 8005f38:	b236      	sxthne	r6, r6
 8005f3a:	e7ef      	b.n	8005f1c <_printf_i+0xbc>
 8005f3c:	682b      	ldr	r3, [r5, #0]
 8005f3e:	6820      	ldr	r0, [r4, #0]
 8005f40:	1d19      	adds	r1, r3, #4
 8005f42:	6029      	str	r1, [r5, #0]
 8005f44:	0601      	lsls	r1, r0, #24
 8005f46:	d501      	bpl.n	8005f4c <_printf_i+0xec>
 8005f48:	681e      	ldr	r6, [r3, #0]
 8005f4a:	e002      	b.n	8005f52 <_printf_i+0xf2>
 8005f4c:	0646      	lsls	r6, r0, #25
 8005f4e:	d5fb      	bpl.n	8005f48 <_printf_i+0xe8>
 8005f50:	881e      	ldrh	r6, [r3, #0]
 8005f52:	2f6f      	cmp	r7, #111	; 0x6f
 8005f54:	bf0c      	ite	eq
 8005f56:	2308      	moveq	r3, #8
 8005f58:	230a      	movne	r3, #10
 8005f5a:	4852      	ldr	r0, [pc, #328]	; (80060a4 <_printf_i+0x244>)
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f62:	6865      	ldr	r5, [r4, #4]
 8005f64:	2d00      	cmp	r5, #0
 8005f66:	bfa8      	it	ge
 8005f68:	6821      	ldrge	r1, [r4, #0]
 8005f6a:	60a5      	str	r5, [r4, #8]
 8005f6c:	bfa4      	itt	ge
 8005f6e:	f021 0104 	bicge.w	r1, r1, #4
 8005f72:	6021      	strge	r1, [r4, #0]
 8005f74:	b90e      	cbnz	r6, 8005f7a <_printf_i+0x11a>
 8005f76:	2d00      	cmp	r5, #0
 8005f78:	d04d      	beq.n	8006016 <_printf_i+0x1b6>
 8005f7a:	4615      	mov	r5, r2
 8005f7c:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f80:	fb03 6711 	mls	r7, r3, r1, r6
 8005f84:	5dc7      	ldrb	r7, [r0, r7]
 8005f86:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f8a:	4637      	mov	r7, r6
 8005f8c:	42bb      	cmp	r3, r7
 8005f8e:	460e      	mov	r6, r1
 8005f90:	d9f4      	bls.n	8005f7c <_printf_i+0x11c>
 8005f92:	2b08      	cmp	r3, #8
 8005f94:	d10b      	bne.n	8005fae <_printf_i+0x14e>
 8005f96:	6823      	ldr	r3, [r4, #0]
 8005f98:	07de      	lsls	r6, r3, #31
 8005f9a:	d508      	bpl.n	8005fae <_printf_i+0x14e>
 8005f9c:	6923      	ldr	r3, [r4, #16]
 8005f9e:	6861      	ldr	r1, [r4, #4]
 8005fa0:	4299      	cmp	r1, r3
 8005fa2:	bfde      	ittt	le
 8005fa4:	2330      	movle	r3, #48	; 0x30
 8005fa6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005faa:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005fae:	1b52      	subs	r2, r2, r5
 8005fb0:	6122      	str	r2, [r4, #16]
 8005fb2:	464b      	mov	r3, r9
 8005fb4:	4621      	mov	r1, r4
 8005fb6:	4640      	mov	r0, r8
 8005fb8:	f8cd a000 	str.w	sl, [sp]
 8005fbc:	aa03      	add	r2, sp, #12
 8005fbe:	f7ff fedf 	bl	8005d80 <_printf_common>
 8005fc2:	3001      	adds	r0, #1
 8005fc4:	d14c      	bne.n	8006060 <_printf_i+0x200>
 8005fc6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005fca:	b004      	add	sp, #16
 8005fcc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005fd0:	4834      	ldr	r0, [pc, #208]	; (80060a4 <_printf_i+0x244>)
 8005fd2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005fd6:	6829      	ldr	r1, [r5, #0]
 8005fd8:	6823      	ldr	r3, [r4, #0]
 8005fda:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fde:	6029      	str	r1, [r5, #0]
 8005fe0:	061d      	lsls	r5, r3, #24
 8005fe2:	d514      	bpl.n	800600e <_printf_i+0x1ae>
 8005fe4:	07df      	lsls	r7, r3, #31
 8005fe6:	bf44      	itt	mi
 8005fe8:	f043 0320 	orrmi.w	r3, r3, #32
 8005fec:	6023      	strmi	r3, [r4, #0]
 8005fee:	b91e      	cbnz	r6, 8005ff8 <_printf_i+0x198>
 8005ff0:	6823      	ldr	r3, [r4, #0]
 8005ff2:	f023 0320 	bic.w	r3, r3, #32
 8005ff6:	6023      	str	r3, [r4, #0]
 8005ff8:	2310      	movs	r3, #16
 8005ffa:	e7af      	b.n	8005f5c <_printf_i+0xfc>
 8005ffc:	6823      	ldr	r3, [r4, #0]
 8005ffe:	f043 0320 	orr.w	r3, r3, #32
 8006002:	6023      	str	r3, [r4, #0]
 8006004:	2378      	movs	r3, #120	; 0x78
 8006006:	4828      	ldr	r0, [pc, #160]	; (80060a8 <_printf_i+0x248>)
 8006008:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800600c:	e7e3      	b.n	8005fd6 <_printf_i+0x176>
 800600e:	0659      	lsls	r1, r3, #25
 8006010:	bf48      	it	mi
 8006012:	b2b6      	uxthmi	r6, r6
 8006014:	e7e6      	b.n	8005fe4 <_printf_i+0x184>
 8006016:	4615      	mov	r5, r2
 8006018:	e7bb      	b.n	8005f92 <_printf_i+0x132>
 800601a:	682b      	ldr	r3, [r5, #0]
 800601c:	6826      	ldr	r6, [r4, #0]
 800601e:	1d18      	adds	r0, r3, #4
 8006020:	6961      	ldr	r1, [r4, #20]
 8006022:	6028      	str	r0, [r5, #0]
 8006024:	0635      	lsls	r5, r6, #24
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	d501      	bpl.n	800602e <_printf_i+0x1ce>
 800602a:	6019      	str	r1, [r3, #0]
 800602c:	e002      	b.n	8006034 <_printf_i+0x1d4>
 800602e:	0670      	lsls	r0, r6, #25
 8006030:	d5fb      	bpl.n	800602a <_printf_i+0x1ca>
 8006032:	8019      	strh	r1, [r3, #0]
 8006034:	2300      	movs	r3, #0
 8006036:	4615      	mov	r5, r2
 8006038:	6123      	str	r3, [r4, #16]
 800603a:	e7ba      	b.n	8005fb2 <_printf_i+0x152>
 800603c:	682b      	ldr	r3, [r5, #0]
 800603e:	2100      	movs	r1, #0
 8006040:	1d1a      	adds	r2, r3, #4
 8006042:	602a      	str	r2, [r5, #0]
 8006044:	681d      	ldr	r5, [r3, #0]
 8006046:	6862      	ldr	r2, [r4, #4]
 8006048:	4628      	mov	r0, r5
 800604a:	f000 f82f 	bl	80060ac <memchr>
 800604e:	b108      	cbz	r0, 8006054 <_printf_i+0x1f4>
 8006050:	1b40      	subs	r0, r0, r5
 8006052:	6060      	str	r0, [r4, #4]
 8006054:	6863      	ldr	r3, [r4, #4]
 8006056:	6123      	str	r3, [r4, #16]
 8006058:	2300      	movs	r3, #0
 800605a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800605e:	e7a8      	b.n	8005fb2 <_printf_i+0x152>
 8006060:	462a      	mov	r2, r5
 8006062:	4649      	mov	r1, r9
 8006064:	4640      	mov	r0, r8
 8006066:	6923      	ldr	r3, [r4, #16]
 8006068:	47d0      	blx	sl
 800606a:	3001      	adds	r0, #1
 800606c:	d0ab      	beq.n	8005fc6 <_printf_i+0x166>
 800606e:	6823      	ldr	r3, [r4, #0]
 8006070:	079b      	lsls	r3, r3, #30
 8006072:	d413      	bmi.n	800609c <_printf_i+0x23c>
 8006074:	68e0      	ldr	r0, [r4, #12]
 8006076:	9b03      	ldr	r3, [sp, #12]
 8006078:	4298      	cmp	r0, r3
 800607a:	bfb8      	it	lt
 800607c:	4618      	movlt	r0, r3
 800607e:	e7a4      	b.n	8005fca <_printf_i+0x16a>
 8006080:	2301      	movs	r3, #1
 8006082:	4632      	mov	r2, r6
 8006084:	4649      	mov	r1, r9
 8006086:	4640      	mov	r0, r8
 8006088:	47d0      	blx	sl
 800608a:	3001      	adds	r0, #1
 800608c:	d09b      	beq.n	8005fc6 <_printf_i+0x166>
 800608e:	3501      	adds	r5, #1
 8006090:	68e3      	ldr	r3, [r4, #12]
 8006092:	9903      	ldr	r1, [sp, #12]
 8006094:	1a5b      	subs	r3, r3, r1
 8006096:	42ab      	cmp	r3, r5
 8006098:	dcf2      	bgt.n	8006080 <_printf_i+0x220>
 800609a:	e7eb      	b.n	8006074 <_printf_i+0x214>
 800609c:	2500      	movs	r5, #0
 800609e:	f104 0619 	add.w	r6, r4, #25
 80060a2:	e7f5      	b.n	8006090 <_printf_i+0x230>
 80060a4:	08006de8 	.word	0x08006de8
 80060a8:	08006df9 	.word	0x08006df9

080060ac <memchr>:
 80060ac:	4603      	mov	r3, r0
 80060ae:	b510      	push	{r4, lr}
 80060b0:	b2c9      	uxtb	r1, r1
 80060b2:	4402      	add	r2, r0
 80060b4:	4293      	cmp	r3, r2
 80060b6:	4618      	mov	r0, r3
 80060b8:	d101      	bne.n	80060be <memchr+0x12>
 80060ba:	2000      	movs	r0, #0
 80060bc:	e003      	b.n	80060c6 <memchr+0x1a>
 80060be:	7804      	ldrb	r4, [r0, #0]
 80060c0:	3301      	adds	r3, #1
 80060c2:	428c      	cmp	r4, r1
 80060c4:	d1f6      	bne.n	80060b4 <memchr+0x8>
 80060c6:	bd10      	pop	{r4, pc}

080060c8 <memcpy>:
 80060c8:	440a      	add	r2, r1
 80060ca:	4291      	cmp	r1, r2
 80060cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80060d0:	d100      	bne.n	80060d4 <memcpy+0xc>
 80060d2:	4770      	bx	lr
 80060d4:	b510      	push	{r4, lr}
 80060d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060da:	4291      	cmp	r1, r2
 80060dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060e0:	d1f9      	bne.n	80060d6 <memcpy+0xe>
 80060e2:	bd10      	pop	{r4, pc}

080060e4 <memmove>:
 80060e4:	4288      	cmp	r0, r1
 80060e6:	b510      	push	{r4, lr}
 80060e8:	eb01 0402 	add.w	r4, r1, r2
 80060ec:	d902      	bls.n	80060f4 <memmove+0x10>
 80060ee:	4284      	cmp	r4, r0
 80060f0:	4623      	mov	r3, r4
 80060f2:	d807      	bhi.n	8006104 <memmove+0x20>
 80060f4:	1e43      	subs	r3, r0, #1
 80060f6:	42a1      	cmp	r1, r4
 80060f8:	d008      	beq.n	800610c <memmove+0x28>
 80060fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 80060fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006102:	e7f8      	b.n	80060f6 <memmove+0x12>
 8006104:	4601      	mov	r1, r0
 8006106:	4402      	add	r2, r0
 8006108:	428a      	cmp	r2, r1
 800610a:	d100      	bne.n	800610e <memmove+0x2a>
 800610c:	bd10      	pop	{r4, pc}
 800610e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006112:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006116:	e7f7      	b.n	8006108 <memmove+0x24>

08006118 <_free_r>:
 8006118:	b538      	push	{r3, r4, r5, lr}
 800611a:	4605      	mov	r5, r0
 800611c:	2900      	cmp	r1, #0
 800611e:	d040      	beq.n	80061a2 <_free_r+0x8a>
 8006120:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006124:	1f0c      	subs	r4, r1, #4
 8006126:	2b00      	cmp	r3, #0
 8006128:	bfb8      	it	lt
 800612a:	18e4      	addlt	r4, r4, r3
 800612c:	f000 f910 	bl	8006350 <__malloc_lock>
 8006130:	4a1c      	ldr	r2, [pc, #112]	; (80061a4 <_free_r+0x8c>)
 8006132:	6813      	ldr	r3, [r2, #0]
 8006134:	b933      	cbnz	r3, 8006144 <_free_r+0x2c>
 8006136:	6063      	str	r3, [r4, #4]
 8006138:	6014      	str	r4, [r2, #0]
 800613a:	4628      	mov	r0, r5
 800613c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006140:	f000 b90c 	b.w	800635c <__malloc_unlock>
 8006144:	42a3      	cmp	r3, r4
 8006146:	d908      	bls.n	800615a <_free_r+0x42>
 8006148:	6820      	ldr	r0, [r4, #0]
 800614a:	1821      	adds	r1, r4, r0
 800614c:	428b      	cmp	r3, r1
 800614e:	bf01      	itttt	eq
 8006150:	6819      	ldreq	r1, [r3, #0]
 8006152:	685b      	ldreq	r3, [r3, #4]
 8006154:	1809      	addeq	r1, r1, r0
 8006156:	6021      	streq	r1, [r4, #0]
 8006158:	e7ed      	b.n	8006136 <_free_r+0x1e>
 800615a:	461a      	mov	r2, r3
 800615c:	685b      	ldr	r3, [r3, #4]
 800615e:	b10b      	cbz	r3, 8006164 <_free_r+0x4c>
 8006160:	42a3      	cmp	r3, r4
 8006162:	d9fa      	bls.n	800615a <_free_r+0x42>
 8006164:	6811      	ldr	r1, [r2, #0]
 8006166:	1850      	adds	r0, r2, r1
 8006168:	42a0      	cmp	r0, r4
 800616a:	d10b      	bne.n	8006184 <_free_r+0x6c>
 800616c:	6820      	ldr	r0, [r4, #0]
 800616e:	4401      	add	r1, r0
 8006170:	1850      	adds	r0, r2, r1
 8006172:	4283      	cmp	r3, r0
 8006174:	6011      	str	r1, [r2, #0]
 8006176:	d1e0      	bne.n	800613a <_free_r+0x22>
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	4401      	add	r1, r0
 800617e:	6011      	str	r1, [r2, #0]
 8006180:	6053      	str	r3, [r2, #4]
 8006182:	e7da      	b.n	800613a <_free_r+0x22>
 8006184:	d902      	bls.n	800618c <_free_r+0x74>
 8006186:	230c      	movs	r3, #12
 8006188:	602b      	str	r3, [r5, #0]
 800618a:	e7d6      	b.n	800613a <_free_r+0x22>
 800618c:	6820      	ldr	r0, [r4, #0]
 800618e:	1821      	adds	r1, r4, r0
 8006190:	428b      	cmp	r3, r1
 8006192:	bf01      	itttt	eq
 8006194:	6819      	ldreq	r1, [r3, #0]
 8006196:	685b      	ldreq	r3, [r3, #4]
 8006198:	1809      	addeq	r1, r1, r0
 800619a:	6021      	streq	r1, [r4, #0]
 800619c:	6063      	str	r3, [r4, #4]
 800619e:	6054      	str	r4, [r2, #4]
 80061a0:	e7cb      	b.n	800613a <_free_r+0x22>
 80061a2:	bd38      	pop	{r3, r4, r5, pc}
 80061a4:	20000b18 	.word	0x20000b18

080061a8 <sbrk_aligned>:
 80061a8:	b570      	push	{r4, r5, r6, lr}
 80061aa:	4e0e      	ldr	r6, [pc, #56]	; (80061e4 <sbrk_aligned+0x3c>)
 80061ac:	460c      	mov	r4, r1
 80061ae:	6831      	ldr	r1, [r6, #0]
 80061b0:	4605      	mov	r5, r0
 80061b2:	b911      	cbnz	r1, 80061ba <sbrk_aligned+0x12>
 80061b4:	f000 f8bc 	bl	8006330 <_sbrk_r>
 80061b8:	6030      	str	r0, [r6, #0]
 80061ba:	4621      	mov	r1, r4
 80061bc:	4628      	mov	r0, r5
 80061be:	f000 f8b7 	bl	8006330 <_sbrk_r>
 80061c2:	1c43      	adds	r3, r0, #1
 80061c4:	d00a      	beq.n	80061dc <sbrk_aligned+0x34>
 80061c6:	1cc4      	adds	r4, r0, #3
 80061c8:	f024 0403 	bic.w	r4, r4, #3
 80061cc:	42a0      	cmp	r0, r4
 80061ce:	d007      	beq.n	80061e0 <sbrk_aligned+0x38>
 80061d0:	1a21      	subs	r1, r4, r0
 80061d2:	4628      	mov	r0, r5
 80061d4:	f000 f8ac 	bl	8006330 <_sbrk_r>
 80061d8:	3001      	adds	r0, #1
 80061da:	d101      	bne.n	80061e0 <sbrk_aligned+0x38>
 80061dc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80061e0:	4620      	mov	r0, r4
 80061e2:	bd70      	pop	{r4, r5, r6, pc}
 80061e4:	20000b1c 	.word	0x20000b1c

080061e8 <_malloc_r>:
 80061e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061ec:	1ccd      	adds	r5, r1, #3
 80061ee:	f025 0503 	bic.w	r5, r5, #3
 80061f2:	3508      	adds	r5, #8
 80061f4:	2d0c      	cmp	r5, #12
 80061f6:	bf38      	it	cc
 80061f8:	250c      	movcc	r5, #12
 80061fa:	2d00      	cmp	r5, #0
 80061fc:	4607      	mov	r7, r0
 80061fe:	db01      	blt.n	8006204 <_malloc_r+0x1c>
 8006200:	42a9      	cmp	r1, r5
 8006202:	d905      	bls.n	8006210 <_malloc_r+0x28>
 8006204:	230c      	movs	r3, #12
 8006206:	2600      	movs	r6, #0
 8006208:	603b      	str	r3, [r7, #0]
 800620a:	4630      	mov	r0, r6
 800620c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006210:	4e2e      	ldr	r6, [pc, #184]	; (80062cc <_malloc_r+0xe4>)
 8006212:	f000 f89d 	bl	8006350 <__malloc_lock>
 8006216:	6833      	ldr	r3, [r6, #0]
 8006218:	461c      	mov	r4, r3
 800621a:	bb34      	cbnz	r4, 800626a <_malloc_r+0x82>
 800621c:	4629      	mov	r1, r5
 800621e:	4638      	mov	r0, r7
 8006220:	f7ff ffc2 	bl	80061a8 <sbrk_aligned>
 8006224:	1c43      	adds	r3, r0, #1
 8006226:	4604      	mov	r4, r0
 8006228:	d14d      	bne.n	80062c6 <_malloc_r+0xde>
 800622a:	6834      	ldr	r4, [r6, #0]
 800622c:	4626      	mov	r6, r4
 800622e:	2e00      	cmp	r6, #0
 8006230:	d140      	bne.n	80062b4 <_malloc_r+0xcc>
 8006232:	6823      	ldr	r3, [r4, #0]
 8006234:	4631      	mov	r1, r6
 8006236:	4638      	mov	r0, r7
 8006238:	eb04 0803 	add.w	r8, r4, r3
 800623c:	f000 f878 	bl	8006330 <_sbrk_r>
 8006240:	4580      	cmp	r8, r0
 8006242:	d13a      	bne.n	80062ba <_malloc_r+0xd2>
 8006244:	6821      	ldr	r1, [r4, #0]
 8006246:	3503      	adds	r5, #3
 8006248:	1a6d      	subs	r5, r5, r1
 800624a:	f025 0503 	bic.w	r5, r5, #3
 800624e:	3508      	adds	r5, #8
 8006250:	2d0c      	cmp	r5, #12
 8006252:	bf38      	it	cc
 8006254:	250c      	movcc	r5, #12
 8006256:	4638      	mov	r0, r7
 8006258:	4629      	mov	r1, r5
 800625a:	f7ff ffa5 	bl	80061a8 <sbrk_aligned>
 800625e:	3001      	adds	r0, #1
 8006260:	d02b      	beq.n	80062ba <_malloc_r+0xd2>
 8006262:	6823      	ldr	r3, [r4, #0]
 8006264:	442b      	add	r3, r5
 8006266:	6023      	str	r3, [r4, #0]
 8006268:	e00e      	b.n	8006288 <_malloc_r+0xa0>
 800626a:	6822      	ldr	r2, [r4, #0]
 800626c:	1b52      	subs	r2, r2, r5
 800626e:	d41e      	bmi.n	80062ae <_malloc_r+0xc6>
 8006270:	2a0b      	cmp	r2, #11
 8006272:	d916      	bls.n	80062a2 <_malloc_r+0xba>
 8006274:	1961      	adds	r1, r4, r5
 8006276:	42a3      	cmp	r3, r4
 8006278:	6025      	str	r5, [r4, #0]
 800627a:	bf18      	it	ne
 800627c:	6059      	strne	r1, [r3, #4]
 800627e:	6863      	ldr	r3, [r4, #4]
 8006280:	bf08      	it	eq
 8006282:	6031      	streq	r1, [r6, #0]
 8006284:	5162      	str	r2, [r4, r5]
 8006286:	604b      	str	r3, [r1, #4]
 8006288:	4638      	mov	r0, r7
 800628a:	f104 060b 	add.w	r6, r4, #11
 800628e:	f000 f865 	bl	800635c <__malloc_unlock>
 8006292:	f026 0607 	bic.w	r6, r6, #7
 8006296:	1d23      	adds	r3, r4, #4
 8006298:	1af2      	subs	r2, r6, r3
 800629a:	d0b6      	beq.n	800620a <_malloc_r+0x22>
 800629c:	1b9b      	subs	r3, r3, r6
 800629e:	50a3      	str	r3, [r4, r2]
 80062a0:	e7b3      	b.n	800620a <_malloc_r+0x22>
 80062a2:	6862      	ldr	r2, [r4, #4]
 80062a4:	42a3      	cmp	r3, r4
 80062a6:	bf0c      	ite	eq
 80062a8:	6032      	streq	r2, [r6, #0]
 80062aa:	605a      	strne	r2, [r3, #4]
 80062ac:	e7ec      	b.n	8006288 <_malloc_r+0xa0>
 80062ae:	4623      	mov	r3, r4
 80062b0:	6864      	ldr	r4, [r4, #4]
 80062b2:	e7b2      	b.n	800621a <_malloc_r+0x32>
 80062b4:	4634      	mov	r4, r6
 80062b6:	6876      	ldr	r6, [r6, #4]
 80062b8:	e7b9      	b.n	800622e <_malloc_r+0x46>
 80062ba:	230c      	movs	r3, #12
 80062bc:	4638      	mov	r0, r7
 80062be:	603b      	str	r3, [r7, #0]
 80062c0:	f000 f84c 	bl	800635c <__malloc_unlock>
 80062c4:	e7a1      	b.n	800620a <_malloc_r+0x22>
 80062c6:	6025      	str	r5, [r4, #0]
 80062c8:	e7de      	b.n	8006288 <_malloc_r+0xa0>
 80062ca:	bf00      	nop
 80062cc:	20000b18 	.word	0x20000b18

080062d0 <_realloc_r>:
 80062d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80062d4:	4680      	mov	r8, r0
 80062d6:	4614      	mov	r4, r2
 80062d8:	460e      	mov	r6, r1
 80062da:	b921      	cbnz	r1, 80062e6 <_realloc_r+0x16>
 80062dc:	4611      	mov	r1, r2
 80062de:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80062e2:	f7ff bf81 	b.w	80061e8 <_malloc_r>
 80062e6:	b92a      	cbnz	r2, 80062f4 <_realloc_r+0x24>
 80062e8:	f7ff ff16 	bl	8006118 <_free_r>
 80062ec:	4625      	mov	r5, r4
 80062ee:	4628      	mov	r0, r5
 80062f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80062f4:	f000 f838 	bl	8006368 <_malloc_usable_size_r>
 80062f8:	4284      	cmp	r4, r0
 80062fa:	4607      	mov	r7, r0
 80062fc:	d802      	bhi.n	8006304 <_realloc_r+0x34>
 80062fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006302:	d812      	bhi.n	800632a <_realloc_r+0x5a>
 8006304:	4621      	mov	r1, r4
 8006306:	4640      	mov	r0, r8
 8006308:	f7ff ff6e 	bl	80061e8 <_malloc_r>
 800630c:	4605      	mov	r5, r0
 800630e:	2800      	cmp	r0, #0
 8006310:	d0ed      	beq.n	80062ee <_realloc_r+0x1e>
 8006312:	42bc      	cmp	r4, r7
 8006314:	4622      	mov	r2, r4
 8006316:	4631      	mov	r1, r6
 8006318:	bf28      	it	cs
 800631a:	463a      	movcs	r2, r7
 800631c:	f7ff fed4 	bl	80060c8 <memcpy>
 8006320:	4631      	mov	r1, r6
 8006322:	4640      	mov	r0, r8
 8006324:	f7ff fef8 	bl	8006118 <_free_r>
 8006328:	e7e1      	b.n	80062ee <_realloc_r+0x1e>
 800632a:	4635      	mov	r5, r6
 800632c:	e7df      	b.n	80062ee <_realloc_r+0x1e>
	...

08006330 <_sbrk_r>:
 8006330:	b538      	push	{r3, r4, r5, lr}
 8006332:	2300      	movs	r3, #0
 8006334:	4d05      	ldr	r5, [pc, #20]	; (800634c <_sbrk_r+0x1c>)
 8006336:	4604      	mov	r4, r0
 8006338:	4608      	mov	r0, r1
 800633a:	602b      	str	r3, [r5, #0]
 800633c:	f7fb f896 	bl	800146c <_sbrk>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	d102      	bne.n	800634a <_sbrk_r+0x1a>
 8006344:	682b      	ldr	r3, [r5, #0]
 8006346:	b103      	cbz	r3, 800634a <_sbrk_r+0x1a>
 8006348:	6023      	str	r3, [r4, #0]
 800634a:	bd38      	pop	{r3, r4, r5, pc}
 800634c:	20000b20 	.word	0x20000b20

08006350 <__malloc_lock>:
 8006350:	4801      	ldr	r0, [pc, #4]	; (8006358 <__malloc_lock+0x8>)
 8006352:	f000 b811 	b.w	8006378 <__retarget_lock_acquire_recursive>
 8006356:	bf00      	nop
 8006358:	20000b24 	.word	0x20000b24

0800635c <__malloc_unlock>:
 800635c:	4801      	ldr	r0, [pc, #4]	; (8006364 <__malloc_unlock+0x8>)
 800635e:	f000 b80c 	b.w	800637a <__retarget_lock_release_recursive>
 8006362:	bf00      	nop
 8006364:	20000b24 	.word	0x20000b24

08006368 <_malloc_usable_size_r>:
 8006368:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800636c:	1f18      	subs	r0, r3, #4
 800636e:	2b00      	cmp	r3, #0
 8006370:	bfbc      	itt	lt
 8006372:	580b      	ldrlt	r3, [r1, r0]
 8006374:	18c0      	addlt	r0, r0, r3
 8006376:	4770      	bx	lr

08006378 <__retarget_lock_acquire_recursive>:
 8006378:	4770      	bx	lr

0800637a <__retarget_lock_release_recursive>:
 800637a:	4770      	bx	lr

0800637c <_init>:
 800637c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800637e:	bf00      	nop
 8006380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006382:	bc08      	pop	{r3}
 8006384:	469e      	mov	lr, r3
 8006386:	4770      	bx	lr

08006388 <_fini>:
 8006388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800638a:	bf00      	nop
 800638c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800638e:	bc08      	pop	{r3}
 8006390:	469e      	mov	lr, r3
 8006392:	4770      	bx	lr
